/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemainingQuestionsPerDifficulty = {
  easy: number;
  medium: number;
  hard: number;
};

/**
 * The difficulty of the question
 */
export const PowerPath100ProgressResultDifficulty = {
  Easy: "easy",
  Medium: "medium",
  Hard: "hard",
} as const;
/**
 * The difficulty of the question
 */
export type PowerPath100ProgressResultDifficulty = ClosedEnum<
  typeof PowerPath100ProgressResultDifficulty
>;

/**
 * The QTI content of the question
 */
export type PowerPath100ProgressResultContent = {
  /**
   * The type of the question
   */
  type?: string | undefined;
  /**
   * The raw XML question in QTI format
   */
  rawXml: string;
};

/**
 * The student's response to the question
 */
export type PowerPath100ProgressResultResponse = string | Array<string>;

/**
 * The result of the question
 */
export type PowerPath100ProgressResultResult = {
  /**
   * The score assigned to the question, considering the student's response
   */
  score: number;
  /**
   * The feedback for the question
   */
  feedback: string;
};

/**
 * A PowerPath Test Question
 */
export type SeenQuestion = {
  /**
   * The ID that represents the question in the test
   */
  id: string;
  /**
   * The index of the question in the test
   */
  index: number;
  /**
   * The title of the question
   */
  title: string;
  /**
   * The URL of the QTI question
   */
  url: string;
  /**
   * The difficulty of the question
   */
  difficulty?: PowerPath100ProgressResultDifficulty | undefined;
  /**
   * The QTI content of the question
   */
  content?: PowerPath100ProgressResultContent | undefined;
  /**
   * The student's response to the question
   */
  response: string | Array<string>;
  /**
   * Whether the student's response is correct
   */
  correct?: boolean | undefined;
  /**
   * The result of the question
   */
  result?: PowerPath100ProgressResultResult | undefined;
};

/**
 * Represents the progress of the student in the PowerPath100 lesson
 */
export type PowerPath100ProgressResult = {
  lessonType?: "powerpath-100" | undefined;
  remainingQuestionsPerDifficulty: RemainingQuestionsPerDifficulty;
  /**
   * The current score for this attempt
   */
  score: number;
  seenQuestions: Array<SeenQuestion>;
  /**
   * The attempt number
   */
  attempt: number;
  /**
   * The XP the student has earned in the lesson
   */
  xp: number | null;
  /**
   * The multiplier for the student's XP
   */
  multiplier: number | null;
  /**
   * The accuracy of the student's attempted questions
   */
  accuracy: number;
  /**
   * The number of correct questions the student has answered in the lesson
   */
  correctQuestions: number;
  /**
   * The total number of questions in the lesson
   */
  totalQuestions: number;
};

/** @internal */
export const RemainingQuestionsPerDifficulty$inboundSchema: z.ZodType<
  RemainingQuestionsPerDifficulty,
  z.ZodTypeDef,
  unknown
> = z.object({
  easy: z.number(),
  medium: z.number(),
  hard: z.number(),
});

/** @internal */
export type RemainingQuestionsPerDifficulty$Outbound = {
  easy: number;
  medium: number;
  hard: number;
};

/** @internal */
export const RemainingQuestionsPerDifficulty$outboundSchema: z.ZodType<
  RemainingQuestionsPerDifficulty$Outbound,
  z.ZodTypeDef,
  RemainingQuestionsPerDifficulty
> = z.object({
  easy: z.number(),
  medium: z.number(),
  hard: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemainingQuestionsPerDifficulty$ {
  /** @deprecated use `RemainingQuestionsPerDifficulty$inboundSchema` instead. */
  export const inboundSchema = RemainingQuestionsPerDifficulty$inboundSchema;
  /** @deprecated use `RemainingQuestionsPerDifficulty$outboundSchema` instead. */
  export const outboundSchema = RemainingQuestionsPerDifficulty$outboundSchema;
  /** @deprecated use `RemainingQuestionsPerDifficulty$Outbound` instead. */
  export type Outbound = RemainingQuestionsPerDifficulty$Outbound;
}

export function remainingQuestionsPerDifficultyToJSON(
  remainingQuestionsPerDifficulty: RemainingQuestionsPerDifficulty,
): string {
  return JSON.stringify(
    RemainingQuestionsPerDifficulty$outboundSchema.parse(
      remainingQuestionsPerDifficulty,
    ),
  );
}

export function remainingQuestionsPerDifficultyFromJSON(
  jsonString: string,
): SafeParseResult<RemainingQuestionsPerDifficulty, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemainingQuestionsPerDifficulty$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemainingQuestionsPerDifficulty' from JSON`,
  );
}

/** @internal */
export const PowerPath100ProgressResultDifficulty$inboundSchema:
  z.ZodNativeEnum<typeof PowerPath100ProgressResultDifficulty> = z.nativeEnum(
    PowerPath100ProgressResultDifficulty,
  );

/** @internal */
export const PowerPath100ProgressResultDifficulty$outboundSchema:
  z.ZodNativeEnum<typeof PowerPath100ProgressResultDifficulty> =
    PowerPath100ProgressResultDifficulty$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPath100ProgressResultDifficulty$ {
  /** @deprecated use `PowerPath100ProgressResultDifficulty$inboundSchema` instead. */
  export const inboundSchema =
    PowerPath100ProgressResultDifficulty$inboundSchema;
  /** @deprecated use `PowerPath100ProgressResultDifficulty$outboundSchema` instead. */
  export const outboundSchema =
    PowerPath100ProgressResultDifficulty$outboundSchema;
}

/** @internal */
export const PowerPath100ProgressResultContent$inboundSchema: z.ZodType<
  PowerPath100ProgressResultContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  rawXml: z.string(),
});

/** @internal */
export type PowerPath100ProgressResultContent$Outbound = {
  type?: string | undefined;
  rawXml: string;
};

/** @internal */
export const PowerPath100ProgressResultContent$outboundSchema: z.ZodType<
  PowerPath100ProgressResultContent$Outbound,
  z.ZodTypeDef,
  PowerPath100ProgressResultContent
> = z.object({
  type: z.string().optional(),
  rawXml: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPath100ProgressResultContent$ {
  /** @deprecated use `PowerPath100ProgressResultContent$inboundSchema` instead. */
  export const inboundSchema = PowerPath100ProgressResultContent$inboundSchema;
  /** @deprecated use `PowerPath100ProgressResultContent$outboundSchema` instead. */
  export const outboundSchema =
    PowerPath100ProgressResultContent$outboundSchema;
  /** @deprecated use `PowerPath100ProgressResultContent$Outbound` instead. */
  export type Outbound = PowerPath100ProgressResultContent$Outbound;
}

export function powerPath100ProgressResultContentToJSON(
  powerPath100ProgressResultContent: PowerPath100ProgressResultContent,
): string {
  return JSON.stringify(
    PowerPath100ProgressResultContent$outboundSchema.parse(
      powerPath100ProgressResultContent,
    ),
  );
}

export function powerPath100ProgressResultContentFromJSON(
  jsonString: string,
): SafeParseResult<PowerPath100ProgressResultContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PowerPath100ProgressResultContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PowerPath100ProgressResultContent' from JSON`,
  );
}

/** @internal */
export const PowerPath100ProgressResultResponse$inboundSchema: z.ZodType<
  PowerPath100ProgressResultResponse,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type PowerPath100ProgressResultResponse$Outbound =
  | string
  | Array<string>;

/** @internal */
export const PowerPath100ProgressResultResponse$outboundSchema: z.ZodType<
  PowerPath100ProgressResultResponse$Outbound,
  z.ZodTypeDef,
  PowerPath100ProgressResultResponse
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPath100ProgressResultResponse$ {
  /** @deprecated use `PowerPath100ProgressResultResponse$inboundSchema` instead. */
  export const inboundSchema = PowerPath100ProgressResultResponse$inboundSchema;
  /** @deprecated use `PowerPath100ProgressResultResponse$outboundSchema` instead. */
  export const outboundSchema =
    PowerPath100ProgressResultResponse$outboundSchema;
  /** @deprecated use `PowerPath100ProgressResultResponse$Outbound` instead. */
  export type Outbound = PowerPath100ProgressResultResponse$Outbound;
}

export function powerPath100ProgressResultResponseToJSON(
  powerPath100ProgressResultResponse: PowerPath100ProgressResultResponse,
): string {
  return JSON.stringify(
    PowerPath100ProgressResultResponse$outboundSchema.parse(
      powerPath100ProgressResultResponse,
    ),
  );
}

export function powerPath100ProgressResultResponseFromJSON(
  jsonString: string,
): SafeParseResult<PowerPath100ProgressResultResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PowerPath100ProgressResultResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PowerPath100ProgressResultResponse' from JSON`,
  );
}

/** @internal */
export const PowerPath100ProgressResultResult$inboundSchema: z.ZodType<
  PowerPath100ProgressResultResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  score: z.number(),
  feedback: z.string(),
});

/** @internal */
export type PowerPath100ProgressResultResult$Outbound = {
  score: number;
  feedback: string;
};

/** @internal */
export const PowerPath100ProgressResultResult$outboundSchema: z.ZodType<
  PowerPath100ProgressResultResult$Outbound,
  z.ZodTypeDef,
  PowerPath100ProgressResultResult
> = z.object({
  score: z.number(),
  feedback: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPath100ProgressResultResult$ {
  /** @deprecated use `PowerPath100ProgressResultResult$inboundSchema` instead. */
  export const inboundSchema = PowerPath100ProgressResultResult$inboundSchema;
  /** @deprecated use `PowerPath100ProgressResultResult$outboundSchema` instead. */
  export const outboundSchema = PowerPath100ProgressResultResult$outboundSchema;
  /** @deprecated use `PowerPath100ProgressResultResult$Outbound` instead. */
  export type Outbound = PowerPath100ProgressResultResult$Outbound;
}

export function powerPath100ProgressResultResultToJSON(
  powerPath100ProgressResultResult: PowerPath100ProgressResultResult,
): string {
  return JSON.stringify(
    PowerPath100ProgressResultResult$outboundSchema.parse(
      powerPath100ProgressResultResult,
    ),
  );
}

export function powerPath100ProgressResultResultFromJSON(
  jsonString: string,
): SafeParseResult<PowerPath100ProgressResultResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PowerPath100ProgressResultResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PowerPath100ProgressResultResult' from JSON`,
  );
}

/** @internal */
export const SeenQuestion$inboundSchema: z.ZodType<
  SeenQuestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  index: z.number(),
  title: z.string(),
  url: z.string(),
  difficulty: PowerPath100ProgressResultDifficulty$inboundSchema.default(
    "medium",
  ),
  content: z.lazy(() => PowerPath100ProgressResultContent$inboundSchema)
    .optional(),
  response: z.union([z.string(), z.array(z.string())]),
  correct: z.boolean().optional(),
  result: z.lazy(() => PowerPath100ProgressResultResult$inboundSchema)
    .optional(),
});

/** @internal */
export type SeenQuestion$Outbound = {
  id: string;
  index: number;
  title: string;
  url: string;
  difficulty: string;
  content?: PowerPath100ProgressResultContent$Outbound | undefined;
  response: string | Array<string>;
  correct?: boolean | undefined;
  result?: PowerPath100ProgressResultResult$Outbound | undefined;
};

/** @internal */
export const SeenQuestion$outboundSchema: z.ZodType<
  SeenQuestion$Outbound,
  z.ZodTypeDef,
  SeenQuestion
> = z.object({
  id: z.string(),
  index: z.number(),
  title: z.string(),
  url: z.string(),
  difficulty: PowerPath100ProgressResultDifficulty$outboundSchema.default(
    "medium",
  ),
  content: z.lazy(() => PowerPath100ProgressResultContent$outboundSchema)
    .optional(),
  response: z.union([z.string(), z.array(z.string())]),
  correct: z.boolean().optional(),
  result: z.lazy(() => PowerPath100ProgressResultResult$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeenQuestion$ {
  /** @deprecated use `SeenQuestion$inboundSchema` instead. */
  export const inboundSchema = SeenQuestion$inboundSchema;
  /** @deprecated use `SeenQuestion$outboundSchema` instead. */
  export const outboundSchema = SeenQuestion$outboundSchema;
  /** @deprecated use `SeenQuestion$Outbound` instead. */
  export type Outbound = SeenQuestion$Outbound;
}

export function seenQuestionToJSON(seenQuestion: SeenQuestion): string {
  return JSON.stringify(SeenQuestion$outboundSchema.parse(seenQuestion));
}

export function seenQuestionFromJSON(
  jsonString: string,
): SafeParseResult<SeenQuestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeenQuestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeenQuestion' from JSON`,
  );
}

/** @internal */
export const PowerPath100ProgressResult$inboundSchema: z.ZodType<
  PowerPath100ProgressResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonType: z.literal("powerpath-100").default("powerpath-100").optional(),
  remainingQuestionsPerDifficulty: z.lazy(() =>
    RemainingQuestionsPerDifficulty$inboundSchema
  ),
  score: z.number(),
  seenQuestions: z.array(z.lazy(() => SeenQuestion$inboundSchema)),
  attempt: z.number(),
  xp: z.nullable(z.number()),
  multiplier: z.nullable(z.number()),
  accuracy: z.number(),
  correctQuestions: z.number(),
  totalQuestions: z.number(),
});

/** @internal */
export type PowerPath100ProgressResult$Outbound = {
  lessonType: "powerpath-100";
  remainingQuestionsPerDifficulty: RemainingQuestionsPerDifficulty$Outbound;
  score: number;
  seenQuestions: Array<SeenQuestion$Outbound>;
  attempt: number;
  xp: number | null;
  multiplier: number | null;
  accuracy: number;
  correctQuestions: number;
  totalQuestions: number;
};

/** @internal */
export const PowerPath100ProgressResult$outboundSchema: z.ZodType<
  PowerPath100ProgressResult$Outbound,
  z.ZodTypeDef,
  PowerPath100ProgressResult
> = z.object({
  lessonType: z.literal("powerpath-100").default("powerpath-100" as const),
  remainingQuestionsPerDifficulty: z.lazy(() =>
    RemainingQuestionsPerDifficulty$outboundSchema
  ),
  score: z.number(),
  seenQuestions: z.array(z.lazy(() => SeenQuestion$outboundSchema)),
  attempt: z.number(),
  xp: z.nullable(z.number()),
  multiplier: z.nullable(z.number()),
  accuracy: z.number(),
  correctQuestions: z.number(),
  totalQuestions: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPath100ProgressResult$ {
  /** @deprecated use `PowerPath100ProgressResult$inboundSchema` instead. */
  export const inboundSchema = PowerPath100ProgressResult$inboundSchema;
  /** @deprecated use `PowerPath100ProgressResult$outboundSchema` instead. */
  export const outboundSchema = PowerPath100ProgressResult$outboundSchema;
  /** @deprecated use `PowerPath100ProgressResult$Outbound` instead. */
  export type Outbound = PowerPath100ProgressResult$Outbound;
}

export function powerPath100ProgressResultToJSON(
  powerPath100ProgressResult: PowerPath100ProgressResult,
): string {
  return JSON.stringify(
    PowerPath100ProgressResult$outboundSchema.parse(powerPath100ProgressResult),
  );
}

export function powerPath100ProgressResultFromJSON(
  jsonString: string,
): SafeParseResult<PowerPath100ProgressResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PowerPath100ProgressResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PowerPath100ProgressResult' from JSON`,
  );
}
