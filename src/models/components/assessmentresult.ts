/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AssessmentResultStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type AssessmentResultStatus = ClosedEnum<typeof AssessmentResultStatus>;

export type AssessmentResultAssessmentLineItem = {
  sourcedId: string;
};

export type Student = {
  sourcedId: string;
};

export type AssessmentResultScoreScale = {
  sourcedId: string;
};

export const ScoreStatus = {
  Exempt: "exempt",
  FullyGraded: "fully graded",
  NotSubmitted: "not submitted",
  PartiallyGraded: "partially graded",
  Submitted: "submitted",
} as const;
export type ScoreStatus = ClosedEnum<typeof ScoreStatus>;

export type AssessmentResultLearningObjectiveId = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

export type AssessmentResultLearningObjectiveSet = {
  source: string;
  learningObjectiveIds: Array<AssessmentResultLearningObjectiveId>;
};

/**
 * Represents an assessment result.
 */
export type AssessmentResult = {
  sourcedId?: string | undefined;
  status: AssessmentResultStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  assessmentLineItem: AssessmentResultAssessmentLineItem;
  student: Student;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: Date;
  scoreScale?: AssessmentResultScoreScale | null | undefined;
  scorePercentile?: number | null | undefined;
  scoreStatus: ScoreStatus;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<AssessmentResultLearningObjectiveSet>
    | null
    | undefined;
  inProgress?: string | null | undefined;
  incomplete?: string | null | undefined;
  late?: string | null | undefined;
  missing?: string | null | undefined;
};

/** @internal */
export const AssessmentResultStatus$inboundSchema: z.ZodNativeEnum<
  typeof AssessmentResultStatus
> = z.nativeEnum(AssessmentResultStatus);

/** @internal */
export const AssessmentResultStatus$outboundSchema: z.ZodNativeEnum<
  typeof AssessmentResultStatus
> = AssessmentResultStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResultStatus$ {
  /** @deprecated use `AssessmentResultStatus$inboundSchema` instead. */
  export const inboundSchema = AssessmentResultStatus$inboundSchema;
  /** @deprecated use `AssessmentResultStatus$outboundSchema` instead. */
  export const outboundSchema = AssessmentResultStatus$outboundSchema;
}

/** @internal */
export const AssessmentResultAssessmentLineItem$inboundSchema: z.ZodType<
  AssessmentResultAssessmentLineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type AssessmentResultAssessmentLineItem$Outbound = {
  sourcedId: string;
};

/** @internal */
export const AssessmentResultAssessmentLineItem$outboundSchema: z.ZodType<
  AssessmentResultAssessmentLineItem$Outbound,
  z.ZodTypeDef,
  AssessmentResultAssessmentLineItem
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResultAssessmentLineItem$ {
  /** @deprecated use `AssessmentResultAssessmentLineItem$inboundSchema` instead. */
  export const inboundSchema = AssessmentResultAssessmentLineItem$inboundSchema;
  /** @deprecated use `AssessmentResultAssessmentLineItem$outboundSchema` instead. */
  export const outboundSchema =
    AssessmentResultAssessmentLineItem$outboundSchema;
  /** @deprecated use `AssessmentResultAssessmentLineItem$Outbound` instead. */
  export type Outbound = AssessmentResultAssessmentLineItem$Outbound;
}

export function assessmentResultAssessmentLineItemToJSON(
  assessmentResultAssessmentLineItem: AssessmentResultAssessmentLineItem,
): string {
  return JSON.stringify(
    AssessmentResultAssessmentLineItem$outboundSchema.parse(
      assessmentResultAssessmentLineItem,
    ),
  );
}

export function assessmentResultAssessmentLineItemFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResultAssessmentLineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AssessmentResultAssessmentLineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResultAssessmentLineItem' from JSON`,
  );
}

/** @internal */
export const Student$inboundSchema: z.ZodType<Student, z.ZodTypeDef, unknown> =
  z.object({
    sourcedId: z.string(),
  });

/** @internal */
export type Student$Outbound = {
  sourcedId: string;
};

/** @internal */
export const Student$outboundSchema: z.ZodType<
  Student$Outbound,
  z.ZodTypeDef,
  Student
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Student$ {
  /** @deprecated use `Student$inboundSchema` instead. */
  export const inboundSchema = Student$inboundSchema;
  /** @deprecated use `Student$outboundSchema` instead. */
  export const outboundSchema = Student$outboundSchema;
  /** @deprecated use `Student$Outbound` instead. */
  export type Outbound = Student$Outbound;
}

export function studentToJSON(student: Student): string {
  return JSON.stringify(Student$outboundSchema.parse(student));
}

export function studentFromJSON(
  jsonString: string,
): SafeParseResult<Student, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Student$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Student' from JSON`,
  );
}

/** @internal */
export const AssessmentResultScoreScale$inboundSchema: z.ZodType<
  AssessmentResultScoreScale,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type AssessmentResultScoreScale$Outbound = {
  sourcedId: string;
};

/** @internal */
export const AssessmentResultScoreScale$outboundSchema: z.ZodType<
  AssessmentResultScoreScale$Outbound,
  z.ZodTypeDef,
  AssessmentResultScoreScale
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResultScoreScale$ {
  /** @deprecated use `AssessmentResultScoreScale$inboundSchema` instead. */
  export const inboundSchema = AssessmentResultScoreScale$inboundSchema;
  /** @deprecated use `AssessmentResultScoreScale$outboundSchema` instead. */
  export const outboundSchema = AssessmentResultScoreScale$outboundSchema;
  /** @deprecated use `AssessmentResultScoreScale$Outbound` instead. */
  export type Outbound = AssessmentResultScoreScale$Outbound;
}

export function assessmentResultScoreScaleToJSON(
  assessmentResultScoreScale: AssessmentResultScoreScale,
): string {
  return JSON.stringify(
    AssessmentResultScoreScale$outboundSchema.parse(assessmentResultScoreScale),
  );
}

export function assessmentResultScoreScaleFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResultScoreScale, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentResultScoreScale$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResultScoreScale' from JSON`,
  );
}

/** @internal */
export const ScoreStatus$inboundSchema: z.ZodNativeEnum<typeof ScoreStatus> = z
  .nativeEnum(ScoreStatus);

/** @internal */
export const ScoreStatus$outboundSchema: z.ZodNativeEnum<typeof ScoreStatus> =
  ScoreStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScoreStatus$ {
  /** @deprecated use `ScoreStatus$inboundSchema` instead. */
  export const inboundSchema = ScoreStatus$inboundSchema;
  /** @deprecated use `ScoreStatus$outboundSchema` instead. */
  export const outboundSchema = ScoreStatus$outboundSchema;
}

/** @internal */
export const AssessmentResultLearningObjectiveId$inboundSchema: z.ZodType<
  AssessmentResultLearningObjectiveId,
  z.ZodTypeDef,
  unknown
> = z.object({
  learningObjectiveId: z.string(),
  score: z.number().optional(),
  textScore: z.string().optional(),
});

/** @internal */
export type AssessmentResultLearningObjectiveId$Outbound = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

/** @internal */
export const AssessmentResultLearningObjectiveId$outboundSchema: z.ZodType<
  AssessmentResultLearningObjectiveId$Outbound,
  z.ZodTypeDef,
  AssessmentResultLearningObjectiveId
> = z.object({
  learningObjectiveId: z.string(),
  score: z.number().optional(),
  textScore: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResultLearningObjectiveId$ {
  /** @deprecated use `AssessmentResultLearningObjectiveId$inboundSchema` instead. */
  export const inboundSchema =
    AssessmentResultLearningObjectiveId$inboundSchema;
  /** @deprecated use `AssessmentResultLearningObjectiveId$outboundSchema` instead. */
  export const outboundSchema =
    AssessmentResultLearningObjectiveId$outboundSchema;
  /** @deprecated use `AssessmentResultLearningObjectiveId$Outbound` instead. */
  export type Outbound = AssessmentResultLearningObjectiveId$Outbound;
}

export function assessmentResultLearningObjectiveIdToJSON(
  assessmentResultLearningObjectiveId: AssessmentResultLearningObjectiveId,
): string {
  return JSON.stringify(
    AssessmentResultLearningObjectiveId$outboundSchema.parse(
      assessmentResultLearningObjectiveId,
    ),
  );
}

export function assessmentResultLearningObjectiveIdFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResultLearningObjectiveId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AssessmentResultLearningObjectiveId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResultLearningObjectiveId' from JSON`,
  );
}

/** @internal */
export const AssessmentResultLearningObjectiveSet$inboundSchema: z.ZodType<
  AssessmentResultLearningObjectiveSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  learningObjectiveIds: z.array(
    z.lazy(() => AssessmentResultLearningObjectiveId$inboundSchema),
  ),
});

/** @internal */
export type AssessmentResultLearningObjectiveSet$Outbound = {
  source: string;
  learningObjectiveIds: Array<AssessmentResultLearningObjectiveId$Outbound>;
};

/** @internal */
export const AssessmentResultLearningObjectiveSet$outboundSchema: z.ZodType<
  AssessmentResultLearningObjectiveSet$Outbound,
  z.ZodTypeDef,
  AssessmentResultLearningObjectiveSet
> = z.object({
  source: z.string(),
  learningObjectiveIds: z.array(
    z.lazy(() => AssessmentResultLearningObjectiveId$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResultLearningObjectiveSet$ {
  /** @deprecated use `AssessmentResultLearningObjectiveSet$inboundSchema` instead. */
  export const inboundSchema =
    AssessmentResultLearningObjectiveSet$inboundSchema;
  /** @deprecated use `AssessmentResultLearningObjectiveSet$outboundSchema` instead. */
  export const outboundSchema =
    AssessmentResultLearningObjectiveSet$outboundSchema;
  /** @deprecated use `AssessmentResultLearningObjectiveSet$Outbound` instead. */
  export type Outbound = AssessmentResultLearningObjectiveSet$Outbound;
}

export function assessmentResultLearningObjectiveSetToJSON(
  assessmentResultLearningObjectiveSet: AssessmentResultLearningObjectiveSet,
): string {
  return JSON.stringify(
    AssessmentResultLearningObjectiveSet$outboundSchema.parse(
      assessmentResultLearningObjectiveSet,
    ),
  );
}

export function assessmentResultLearningObjectiveSetFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResultLearningObjectiveSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AssessmentResultLearningObjectiveSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResultLearningObjectiveSet' from JSON`,
  );
}

/** @internal */
export const AssessmentResult$inboundSchema: z.ZodType<
  AssessmentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: AssessmentResultStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  assessmentLineItem: z.lazy(() =>
    AssessmentResultAssessmentLineItem$inboundSchema
  ),
  student: z.lazy(() => Student$inboundSchema),
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  scoreScale: z.nullable(z.lazy(() => AssessmentResultScoreScale$inboundSchema))
    .optional(),
  scorePercentile: z.nullable(z.number()).optional(),
  scoreStatus: ScoreStatus$inboundSchema,
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() => AssessmentResultLearningObjectiveSet$inboundSchema)),
  ).optional(),
  inProgress: z.nullable(z.string()).optional(),
  incomplete: z.nullable(z.string()).optional(),
  late: z.nullable(z.string()).optional(),
  missing: z.nullable(z.string()).optional(),
});

/** @internal */
export type AssessmentResult$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  assessmentLineItem: AssessmentResultAssessmentLineItem$Outbound;
  student: Student$Outbound;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: string;
  scoreScale?: AssessmentResultScoreScale$Outbound | null | undefined;
  scorePercentile?: number | null | undefined;
  scoreStatus: string;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<AssessmentResultLearningObjectiveSet$Outbound>
    | null
    | undefined;
  inProgress?: string | null | undefined;
  incomplete?: string | null | undefined;
  late?: string | null | undefined;
  missing?: string | null | undefined;
};

/** @internal */
export const AssessmentResult$outboundSchema: z.ZodType<
  AssessmentResult$Outbound,
  z.ZodTypeDef,
  AssessmentResult
> = z.object({
  sourcedId: z.string().optional(),
  status: AssessmentResultStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  assessmentLineItem: z.lazy(() =>
    AssessmentResultAssessmentLineItem$outboundSchema
  ),
  student: z.lazy(() => Student$outboundSchema),
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.date().transform(v => v.toISOString()),
  scoreScale: z.nullable(
    z.lazy(() => AssessmentResultScoreScale$outboundSchema),
  ).optional(),
  scorePercentile: z.nullable(z.number()).optional(),
  scoreStatus: ScoreStatus$outboundSchema,
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() => AssessmentResultLearningObjectiveSet$outboundSchema)),
  ).optional(),
  inProgress: z.nullable(z.string()).optional(),
  incomplete: z.nullable(z.string()).optional(),
  late: z.nullable(z.string()).optional(),
  missing: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResult$ {
  /** @deprecated use `AssessmentResult$inboundSchema` instead. */
  export const inboundSchema = AssessmentResult$inboundSchema;
  /** @deprecated use `AssessmentResult$outboundSchema` instead. */
  export const outboundSchema = AssessmentResult$outboundSchema;
  /** @deprecated use `AssessmentResult$Outbound` instead. */
  export type Outbound = AssessmentResult$Outbound;
}

export function assessmentResultToJSON(
  assessmentResult: AssessmentResult,
): string {
  return JSON.stringify(
    AssessmentResult$outboundSchema.parse(assessmentResult),
  );
}

export function assessmentResultFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResult' from JSON`,
  );
}
