/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const LessonPlanTreeComponentStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type LessonPlanTreeComponentStatus = ClosedEnum<
  typeof LessonPlanTreeComponentStatus
>;

export const ResourceStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type ResourceStatus = ClosedEnum<typeof ResourceStatus>;

export const Role = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type Role = ClosedEnum<typeof Role>;

export const Importance = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type Importance = ClosedEnum<typeof Importance>;

export type MetadataDetails = {
  type: string;
};

/**
 * Represents a digital resource of some kind.
 */
export type Resource = {
  sourcedId: string;
  status: ResourceStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  roles?: Array<Role> | undefined;
  importance?: Importance | undefined;
  vendorResourceId: string;
  vendorId?: string | null | undefined;
  applicationId?: string | null | undefined;
  metadataDetails: MetadataDetails;
};

export type LessonPlanTreeComponentComponentResource = {
  tenantId: string | null;
  clientAppId: string | null;
  /**
   * The ID of the lesson plan item
   */
  id: string;
  sortOrder?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  courseComponentSourcedId: string;
  resource: Resource;
};

export type LessonPlanTreeComponent = {
  /**
   * The ID of the lesson plan item
   */
  id: string;
  /**
   * The Sourced ID of the component
   */
  sourcedId: string;
  status: LessonPlanTreeComponentStatus;
  title: string;
  sortOrder?: number | undefined;
  unlockDate?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  prerequisites?: Array<string> | undefined;
  prerequisiteCriteria?: string | undefined;
  componentResources?:
    | Array<LessonPlanTreeComponentComponentResource>
    | undefined;
  subComponents?: Array<LessonPlanTreeComponent> | undefined;
};

/** @internal */
export const LessonPlanTreeComponentStatus$inboundSchema: z.ZodNativeEnum<
  typeof LessonPlanTreeComponentStatus
> = z.nativeEnum(LessonPlanTreeComponentStatus);

/** @internal */
export const LessonPlanTreeComponentStatus$outboundSchema: z.ZodNativeEnum<
  typeof LessonPlanTreeComponentStatus
> = LessonPlanTreeComponentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LessonPlanTreeComponentStatus$ {
  /** @deprecated use `LessonPlanTreeComponentStatus$inboundSchema` instead. */
  export const inboundSchema = LessonPlanTreeComponentStatus$inboundSchema;
  /** @deprecated use `LessonPlanTreeComponentStatus$outboundSchema` instead. */
  export const outboundSchema = LessonPlanTreeComponentStatus$outboundSchema;
}

/** @internal */
export const ResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof ResourceStatus
> = z.nativeEnum(ResourceStatus);

/** @internal */
export const ResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof ResourceStatus
> = ResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceStatus$ {
  /** @deprecated use `ResourceStatus$inboundSchema` instead. */
  export const inboundSchema = ResourceStatus$inboundSchema;
  /** @deprecated use `ResourceStatus$outboundSchema` instead. */
  export const outboundSchema = ResourceStatus$outboundSchema;
}

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const Importance$inboundSchema: z.ZodNativeEnum<typeof Importance> = z
  .nativeEnum(Importance);

/** @internal */
export const Importance$outboundSchema: z.ZodNativeEnum<typeof Importance> =
  Importance$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Importance$ {
  /** @deprecated use `Importance$inboundSchema` instead. */
  export const inboundSchema = Importance$inboundSchema;
  /** @deprecated use `Importance$outboundSchema` instead. */
  export const outboundSchema = Importance$outboundSchema;
}

/** @internal */
export const MetadataDetails$inboundSchema: z.ZodType<
  MetadataDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
});

/** @internal */
export type MetadataDetails$Outbound = {
  type: string;
};

/** @internal */
export const MetadataDetails$outboundSchema: z.ZodType<
  MetadataDetails$Outbound,
  z.ZodTypeDef,
  MetadataDetails
> = z.object({
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataDetails$ {
  /** @deprecated use `MetadataDetails$inboundSchema` instead. */
  export const inboundSchema = MetadataDetails$inboundSchema;
  /** @deprecated use `MetadataDetails$outboundSchema` instead. */
  export const outboundSchema = MetadataDetails$outboundSchema;
  /** @deprecated use `MetadataDetails$Outbound` instead. */
  export type Outbound = MetadataDetails$Outbound;
}

export function metadataDetailsToJSON(
  metadataDetails: MetadataDetails,
): string {
  return JSON.stringify(MetadataDetails$outboundSchema.parse(metadataDetails));
}

export function metadataDetailsFromJSON(
  jsonString: string,
): SafeParseResult<MetadataDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataDetails' from JSON`,
  );
}

/** @internal */
export const Resource$inboundSchema: z.ZodType<
  Resource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: ResourceStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  roles: z.array(Role$inboundSchema).optional(),
  importance: Importance$inboundSchema.optional(),
  vendorResourceId: z.string(),
  vendorId: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  metadataDetails: z.lazy(() => MetadataDetails$inboundSchema),
});

/** @internal */
export type Resource$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  roles?: Array<string> | undefined;
  importance?: string | undefined;
  vendorResourceId: string;
  vendorId?: string | null | undefined;
  applicationId?: string | null | undefined;
  metadataDetails: MetadataDetails$Outbound;
};

/** @internal */
export const Resource$outboundSchema: z.ZodType<
  Resource$Outbound,
  z.ZodTypeDef,
  Resource
> = z.object({
  sourcedId: z.string(),
  status: ResourceStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  roles: z.array(Role$outboundSchema).optional(),
  importance: Importance$outboundSchema.optional(),
  vendorResourceId: z.string(),
  vendorId: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  metadataDetails: z.lazy(() => MetadataDetails$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resource$ {
  /** @deprecated use `Resource$inboundSchema` instead. */
  export const inboundSchema = Resource$inboundSchema;
  /** @deprecated use `Resource$outboundSchema` instead. */
  export const outboundSchema = Resource$outboundSchema;
  /** @deprecated use `Resource$Outbound` instead. */
  export type Outbound = Resource$Outbound;
}

export function resourceToJSON(resource: Resource): string {
  return JSON.stringify(Resource$outboundSchema.parse(resource));
}

export function resourceFromJSON(
  jsonString: string,
): SafeParseResult<Resource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resource' from JSON`,
  );
}

/** @internal */
export const LessonPlanTreeComponentComponentResource$inboundSchema: z.ZodType<
  LessonPlanTreeComponentComponentResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  tenantId: z.nullable(z.string()),
  clientAppId: z.nullable(z.string()),
  id: z.string(),
  sortOrder: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  courseComponentSourcedId: z.string(),
  resource: z.lazy(() => Resource$inboundSchema),
});

/** @internal */
export type LessonPlanTreeComponentComponentResource$Outbound = {
  tenantId: string | null;
  clientAppId: string | null;
  id: string;
  sortOrder?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  courseComponentSourcedId: string;
  resource: Resource$Outbound;
};

/** @internal */
export const LessonPlanTreeComponentComponentResource$outboundSchema: z.ZodType<
  LessonPlanTreeComponentComponentResource$Outbound,
  z.ZodTypeDef,
  LessonPlanTreeComponentComponentResource
> = z.object({
  tenantId: z.nullable(z.string()),
  clientAppId: z.nullable(z.string()),
  id: z.string(),
  sortOrder: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  courseComponentSourcedId: z.string(),
  resource: z.lazy(() => Resource$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LessonPlanTreeComponentComponentResource$ {
  /** @deprecated use `LessonPlanTreeComponentComponentResource$inboundSchema` instead. */
  export const inboundSchema =
    LessonPlanTreeComponentComponentResource$inboundSchema;
  /** @deprecated use `LessonPlanTreeComponentComponentResource$outboundSchema` instead. */
  export const outboundSchema =
    LessonPlanTreeComponentComponentResource$outboundSchema;
  /** @deprecated use `LessonPlanTreeComponentComponentResource$Outbound` instead. */
  export type Outbound = LessonPlanTreeComponentComponentResource$Outbound;
}

export function lessonPlanTreeComponentComponentResourceToJSON(
  lessonPlanTreeComponentComponentResource:
    LessonPlanTreeComponentComponentResource,
): string {
  return JSON.stringify(
    LessonPlanTreeComponentComponentResource$outboundSchema.parse(
      lessonPlanTreeComponentComponentResource,
    ),
  );
}

export function lessonPlanTreeComponentComponentResourceFromJSON(
  jsonString: string,
): SafeParseResult<
  LessonPlanTreeComponentComponentResource,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      LessonPlanTreeComponentComponentResource$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'LessonPlanTreeComponentComponentResource' from JSON`,
  );
}

/** @internal */
export const LessonPlanTreeComponent$inboundSchema: z.ZodType<
  LessonPlanTreeComponent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  sourcedId: z.string(),
  status: LessonPlanTreeComponentStatus$inboundSchema,
  title: z.string(),
  sortOrder: z.number().optional(),
  unlockDate: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  prerequisites: z.array(z.string()).optional(),
  prerequisiteCriteria: z.string().optional(),
  componentResources: z.array(
    z.lazy(() => LessonPlanTreeComponentComponentResource$inboundSchema),
  ).optional(),
  subComponents: z.array(z.lazy(() => LessonPlanTreeComponent$inboundSchema))
    .optional(),
});

/** @internal */
export type LessonPlanTreeComponent$Outbound = {
  id: string;
  sourcedId: string;
  status: string;
  title: string;
  sortOrder?: number | undefined;
  unlockDate?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  prerequisites?: Array<string> | undefined;
  prerequisiteCriteria?: string | undefined;
  componentResources?:
    | Array<LessonPlanTreeComponentComponentResource$Outbound>
    | undefined;
  subComponents?: Array<LessonPlanTreeComponent$Outbound> | undefined;
};

/** @internal */
export const LessonPlanTreeComponent$outboundSchema: z.ZodType<
  LessonPlanTreeComponent$Outbound,
  z.ZodTypeDef,
  LessonPlanTreeComponent
> = z.object({
  id: z.string(),
  sourcedId: z.string(),
  status: LessonPlanTreeComponentStatus$outboundSchema,
  title: z.string(),
  sortOrder: z.number().optional(),
  unlockDate: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  prerequisites: z.array(z.string()).optional(),
  prerequisiteCriteria: z.string().optional(),
  componentResources: z.array(
    z.lazy(() => LessonPlanTreeComponentComponentResource$outboundSchema),
  ).optional(),
  subComponents: z.array(z.lazy(() => LessonPlanTreeComponent$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LessonPlanTreeComponent$ {
  /** @deprecated use `LessonPlanTreeComponent$inboundSchema` instead. */
  export const inboundSchema = LessonPlanTreeComponent$inboundSchema;
  /** @deprecated use `LessonPlanTreeComponent$outboundSchema` instead. */
  export const outboundSchema = LessonPlanTreeComponent$outboundSchema;
  /** @deprecated use `LessonPlanTreeComponent$Outbound` instead. */
  export type Outbound = LessonPlanTreeComponent$Outbound;
}

export function lessonPlanTreeComponentToJSON(
  lessonPlanTreeComponent: LessonPlanTreeComponent,
): string {
  return JSON.stringify(
    LessonPlanTreeComponent$outboundSchema.parse(lessonPlanTreeComponent),
  );
}

export function lessonPlanTreeComponentFromJSON(
  jsonString: string,
): SafeParseResult<LessonPlanTreeComponent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LessonPlanTreeComponent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LessonPlanTreeComponent' from JSON`,
  );
}
