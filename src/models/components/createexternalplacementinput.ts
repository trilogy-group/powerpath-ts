/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of external service (e.g.: 'edulastic')
 */
export const CreateExternalPlacementInputToolProvider = {
  Edulastic: "edulastic",
} as const;
/**
 * The type of external service (e.g.: 'edulastic')
 */
export type CreateExternalPlacementInputToolProvider = ClosedEnum<
  typeof CreateExternalPlacementInputToolProvider
>;

/**
 * Input for creating an external placement test
 */
export type CreateExternalPlacementInput = {
  /**
   * The sourcedId of the Course to create the external test for
   */
  courseId: string;
  /**
   * The title of the external test reference
   */
  lessonTitle?: string | undefined;
  /**
   * The URL to the external test system (e.g., Edulastic, QTI, etc.)
   */
  launchUrl?: string | undefined;
  /**
   * The type of external service (e.g.: 'edulastic')
   */
  toolProvider: CreateExternalPlacementInputToolProvider;
  /**
   * The title of the unit containing the external test
   */
  unitTitle?: string | undefined;
  /**
   * The sourcedId of an existing CourseComponent (unit) for the test. If not provided, a new unit will be created.
   */
  courseComponentSourcedId?: string | undefined;
  /**
   * The ID of the test in the spreadsheet
   */
  vendorId: string;
  /**
   * Description of the external test that will be added to the Resource entity's metadata
   */
  description?: string | undefined;
  /**
   * Additional metadata for the external test resource
   */
  resourceMetadata?: any | undefined;
  lessonType?: "placement" | undefined;
  /**
   * The grades for the resource
   */
  grades: Array<number>;
  /**
   * The courseId to enroll the student in if they fail the placement test (optional)
   */
  courseIdOnFail?: string | null | undefined;
  /**
   * The XP value for the resource
   */
  xp?: number | undefined;
};

/** @internal */
export const CreateExternalPlacementInputToolProvider$inboundSchema:
  z.ZodNativeEnum<typeof CreateExternalPlacementInputToolProvider> = z
    .nativeEnum(CreateExternalPlacementInputToolProvider);

/** @internal */
export const CreateExternalPlacementInputToolProvider$outboundSchema:
  z.ZodNativeEnum<typeof CreateExternalPlacementInputToolProvider> =
    CreateExternalPlacementInputToolProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExternalPlacementInputToolProvider$ {
  /** @deprecated use `CreateExternalPlacementInputToolProvider$inboundSchema` instead. */
  export const inboundSchema =
    CreateExternalPlacementInputToolProvider$inboundSchema;
  /** @deprecated use `CreateExternalPlacementInputToolProvider$outboundSchema` instead. */
  export const outboundSchema =
    CreateExternalPlacementInputToolProvider$outboundSchema;
}

/** @internal */
export const CreateExternalPlacementInput$inboundSchema: z.ZodType<
  CreateExternalPlacementInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseId: z.string(),
  lessonTitle: z.string().optional(),
  launchUrl: z.string().optional(),
  toolProvider: CreateExternalPlacementInputToolProvider$inboundSchema,
  unitTitle: z.string().optional(),
  courseComponentSourcedId: z.string().optional(),
  vendorId: z.string(),
  description: z.string().optional(),
  resourceMetadata: z.any().optional(),
  lessonType: z.literal("placement").default("placement").optional(),
  grades: z.array(z.number()),
  courseIdOnFail: z.nullable(z.string()).optional(),
  xp: z.number().optional(),
});

/** @internal */
export type CreateExternalPlacementInput$Outbound = {
  courseId: string;
  lessonTitle?: string | undefined;
  launchUrl?: string | undefined;
  toolProvider: string;
  unitTitle?: string | undefined;
  courseComponentSourcedId?: string | undefined;
  vendorId: string;
  description?: string | undefined;
  resourceMetadata?: any | undefined;
  lessonType: "placement";
  grades: Array<number>;
  courseIdOnFail?: string | null | undefined;
  xp?: number | undefined;
};

/** @internal */
export const CreateExternalPlacementInput$outboundSchema: z.ZodType<
  CreateExternalPlacementInput$Outbound,
  z.ZodTypeDef,
  CreateExternalPlacementInput
> = z.object({
  courseId: z.string(),
  lessonTitle: z.string().optional(),
  launchUrl: z.string().optional(),
  toolProvider: CreateExternalPlacementInputToolProvider$outboundSchema,
  unitTitle: z.string().optional(),
  courseComponentSourcedId: z.string().optional(),
  vendorId: z.string(),
  description: z.string().optional(),
  resourceMetadata: z.any().optional(),
  lessonType: z.literal("placement").default("placement" as const),
  grades: z.array(z.number()),
  courseIdOnFail: z.nullable(z.string()).optional(),
  xp: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExternalPlacementInput$ {
  /** @deprecated use `CreateExternalPlacementInput$inboundSchema` instead. */
  export const inboundSchema = CreateExternalPlacementInput$inboundSchema;
  /** @deprecated use `CreateExternalPlacementInput$outboundSchema` instead. */
  export const outboundSchema = CreateExternalPlacementInput$outboundSchema;
  /** @deprecated use `CreateExternalPlacementInput$Outbound` instead. */
  export type Outbound = CreateExternalPlacementInput$Outbound;
}

export function createExternalPlacementInputToJSON(
  createExternalPlacementInput: CreateExternalPlacementInput,
): string {
  return JSON.stringify(
    CreateExternalPlacementInput$outboundSchema.parse(
      createExternalPlacementInput,
    ),
  );
}

export function createExternalPlacementInputFromJSON(
  jsonString: string,
): SafeParseResult<CreateExternalPlacementInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateExternalPlacementInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateExternalPlacementInput' from JSON`,
  );
}
