/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PowerPathTestQuestion,
  PowerPathTestQuestion$inboundSchema,
  PowerPathTestQuestion$Outbound,
  PowerPathTestQuestion$outboundSchema,
} from "./powerpathtestquestion.js";

/**
 * Represents the progress of the student in the PowerPath Quiz lesson
 */
export type QuizProgressResult = {
  lessonType?: "quiz" | undefined;
  /**
   * Whether the lesson has been finalized in the current attempt
   */
  finalized: boolean;
  /**
   * The current score for this attempt
   */
  score?: number | undefined;
  questions: Array<PowerPathTestQuestion>;
  /**
   * The XP the student has earned in the lesson
   */
  xp: number | null;
  /**
   * The multiplier for the student's XP
   */
  multiplier: number | null;
  /**
   * The accuracy of the student's attempted questions
   */
  accuracy: number;
  /**
   * The number of correct questions the student has answered in the lesson
   */
  correctQuestions: number;
  /**
   * The total number of questions in the lesson
   */
  totalQuestions: number;
};

/** @internal */
export const QuizProgressResult$inboundSchema: z.ZodType<
  QuizProgressResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonType: z.literal("quiz").optional(),
  finalized: z.boolean(),
  score: z.number().optional(),
  questions: z.array(PowerPathTestQuestion$inboundSchema),
  xp: z.nullable(z.number()),
  multiplier: z.nullable(z.number()),
  accuracy: z.number(),
  correctQuestions: z.number(),
  totalQuestions: z.number(),
});

/** @internal */
export type QuizProgressResult$Outbound = {
  lessonType: "quiz";
  finalized: boolean;
  score?: number | undefined;
  questions: Array<PowerPathTestQuestion$Outbound>;
  xp: number | null;
  multiplier: number | null;
  accuracy: number;
  correctQuestions: number;
  totalQuestions: number;
};

/** @internal */
export const QuizProgressResult$outboundSchema: z.ZodType<
  QuizProgressResult$Outbound,
  z.ZodTypeDef,
  QuizProgressResult
> = z.object({
  lessonType: z.literal("quiz").default("quiz" as const),
  finalized: z.boolean(),
  score: z.number().optional(),
  questions: z.array(PowerPathTestQuestion$outboundSchema),
  xp: z.nullable(z.number()),
  multiplier: z.nullable(z.number()),
  accuracy: z.number(),
  correctQuestions: z.number(),
  totalQuestions: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuizProgressResult$ {
  /** @deprecated use `QuizProgressResult$inboundSchema` instead. */
  export const inboundSchema = QuizProgressResult$inboundSchema;
  /** @deprecated use `QuizProgressResult$outboundSchema` instead. */
  export const outboundSchema = QuizProgressResult$outboundSchema;
  /** @deprecated use `QuizProgressResult$Outbound` instead. */
  export type Outbound = QuizProgressResult$Outbound;
}

export function quizProgressResultToJSON(
  quizProgressResult: QuizProgressResult,
): string {
  return JSON.stringify(
    QuizProgressResult$outboundSchema.parse(quizProgressResult),
  );
}

export function quizProgressResultFromJSON(
  jsonString: string,
): SafeParseResult<QuizProgressResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuizProgressResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuizProgressResult' from JSON`,
  );
}
