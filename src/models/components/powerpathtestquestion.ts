/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The difficulty of the question
 */
export const PowerPathTestQuestionDifficulty = {
  Easy: "easy",
  Medium: "medium",
  Hard: "hard",
} as const;
/**
 * The difficulty of the question
 */
export type PowerPathTestQuestionDifficulty = ClosedEnum<
  typeof PowerPathTestQuestionDifficulty
>;

/**
 * The QTI content of the question
 */
export type PowerPathTestQuestionContent = {
  /**
   * The type of the question
   */
  type?: string | undefined;
  /**
   * The raw XML question in QTI format
   */
  rawXml: string;
};

/**
 * The student's response to the question
 */
export type PowerPathTestQuestionResponse = string | Array<string>;

/**
 * The result of the question
 */
export type PowerPathTestQuestionResult = {
  /**
   * The score assigned to the question, considering the student's response
   */
  score: number;
  /**
   * The feedback for the question
   */
  feedback: string;
};

/**
 * A PowerPath Test Question
 */
export type PowerPathTestQuestion = {
  /**
   * The ID that represents the question in the test
   */
  id: string;
  /**
   * The index of the question in the test
   */
  index: number;
  /**
   * The title of the question
   */
  title: string;
  /**
   * The URL of the QTI question
   */
  url: string;
  /**
   * The difficulty of the question
   */
  difficulty?: PowerPathTestQuestionDifficulty | undefined;
  /**
   * The QTI content of the question
   */
  content?: PowerPathTestQuestionContent | undefined;
  /**
   * The student's response to the question
   */
  response?: string | Array<string> | undefined;
  /**
   * Whether the student's response is correct
   */
  correct?: boolean | undefined;
  /**
   * The result of the question
   */
  result?: PowerPathTestQuestionResult | undefined;
};

/** @internal */
export const PowerPathTestQuestionDifficulty$inboundSchema: z.ZodNativeEnum<
  typeof PowerPathTestQuestionDifficulty
> = z.nativeEnum(PowerPathTestQuestionDifficulty);

/** @internal */
export const PowerPathTestQuestionDifficulty$outboundSchema: z.ZodNativeEnum<
  typeof PowerPathTestQuestionDifficulty
> = PowerPathTestQuestionDifficulty$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPathTestQuestionDifficulty$ {
  /** @deprecated use `PowerPathTestQuestionDifficulty$inboundSchema` instead. */
  export const inboundSchema = PowerPathTestQuestionDifficulty$inboundSchema;
  /** @deprecated use `PowerPathTestQuestionDifficulty$outboundSchema` instead. */
  export const outboundSchema = PowerPathTestQuestionDifficulty$outboundSchema;
}

/** @internal */
export const PowerPathTestQuestionContent$inboundSchema: z.ZodType<
  PowerPathTestQuestionContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  rawXml: z.string(),
});

/** @internal */
export type PowerPathTestQuestionContent$Outbound = {
  type?: string | undefined;
  rawXml: string;
};

/** @internal */
export const PowerPathTestQuestionContent$outboundSchema: z.ZodType<
  PowerPathTestQuestionContent$Outbound,
  z.ZodTypeDef,
  PowerPathTestQuestionContent
> = z.object({
  type: z.string().optional(),
  rawXml: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPathTestQuestionContent$ {
  /** @deprecated use `PowerPathTestQuestionContent$inboundSchema` instead. */
  export const inboundSchema = PowerPathTestQuestionContent$inboundSchema;
  /** @deprecated use `PowerPathTestQuestionContent$outboundSchema` instead. */
  export const outboundSchema = PowerPathTestQuestionContent$outboundSchema;
  /** @deprecated use `PowerPathTestQuestionContent$Outbound` instead. */
  export type Outbound = PowerPathTestQuestionContent$Outbound;
}

export function powerPathTestQuestionContentToJSON(
  powerPathTestQuestionContent: PowerPathTestQuestionContent,
): string {
  return JSON.stringify(
    PowerPathTestQuestionContent$outboundSchema.parse(
      powerPathTestQuestionContent,
    ),
  );
}

export function powerPathTestQuestionContentFromJSON(
  jsonString: string,
): SafeParseResult<PowerPathTestQuestionContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PowerPathTestQuestionContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PowerPathTestQuestionContent' from JSON`,
  );
}

/** @internal */
export const PowerPathTestQuestionResponse$inboundSchema: z.ZodType<
  PowerPathTestQuestionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type PowerPathTestQuestionResponse$Outbound = string | Array<string>;

/** @internal */
export const PowerPathTestQuestionResponse$outboundSchema: z.ZodType<
  PowerPathTestQuestionResponse$Outbound,
  z.ZodTypeDef,
  PowerPathTestQuestionResponse
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPathTestQuestionResponse$ {
  /** @deprecated use `PowerPathTestQuestionResponse$inboundSchema` instead. */
  export const inboundSchema = PowerPathTestQuestionResponse$inboundSchema;
  /** @deprecated use `PowerPathTestQuestionResponse$outboundSchema` instead. */
  export const outboundSchema = PowerPathTestQuestionResponse$outboundSchema;
  /** @deprecated use `PowerPathTestQuestionResponse$Outbound` instead. */
  export type Outbound = PowerPathTestQuestionResponse$Outbound;
}

export function powerPathTestQuestionResponseToJSON(
  powerPathTestQuestionResponse: PowerPathTestQuestionResponse,
): string {
  return JSON.stringify(
    PowerPathTestQuestionResponse$outboundSchema.parse(
      powerPathTestQuestionResponse,
    ),
  );
}

export function powerPathTestQuestionResponseFromJSON(
  jsonString: string,
): SafeParseResult<PowerPathTestQuestionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PowerPathTestQuestionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PowerPathTestQuestionResponse' from JSON`,
  );
}

/** @internal */
export const PowerPathTestQuestionResult$inboundSchema: z.ZodType<
  PowerPathTestQuestionResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  score: z.number(),
  feedback: z.string(),
});

/** @internal */
export type PowerPathTestQuestionResult$Outbound = {
  score: number;
  feedback: string;
};

/** @internal */
export const PowerPathTestQuestionResult$outboundSchema: z.ZodType<
  PowerPathTestQuestionResult$Outbound,
  z.ZodTypeDef,
  PowerPathTestQuestionResult
> = z.object({
  score: z.number(),
  feedback: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPathTestQuestionResult$ {
  /** @deprecated use `PowerPathTestQuestionResult$inboundSchema` instead. */
  export const inboundSchema = PowerPathTestQuestionResult$inboundSchema;
  /** @deprecated use `PowerPathTestQuestionResult$outboundSchema` instead. */
  export const outboundSchema = PowerPathTestQuestionResult$outboundSchema;
  /** @deprecated use `PowerPathTestQuestionResult$Outbound` instead. */
  export type Outbound = PowerPathTestQuestionResult$Outbound;
}

export function powerPathTestQuestionResultToJSON(
  powerPathTestQuestionResult: PowerPathTestQuestionResult,
): string {
  return JSON.stringify(
    PowerPathTestQuestionResult$outboundSchema.parse(
      powerPathTestQuestionResult,
    ),
  );
}

export function powerPathTestQuestionResultFromJSON(
  jsonString: string,
): SafeParseResult<PowerPathTestQuestionResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PowerPathTestQuestionResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PowerPathTestQuestionResult' from JSON`,
  );
}

/** @internal */
export const PowerPathTestQuestion$inboundSchema: z.ZodType<
  PowerPathTestQuestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  index: z.number(),
  title: z.string(),
  url: z.string(),
  difficulty: PowerPathTestQuestionDifficulty$inboundSchema.default("medium"),
  content: z.lazy(() => PowerPathTestQuestionContent$inboundSchema).optional(),
  response: z.union([z.string(), z.array(z.string())]).optional(),
  correct: z.boolean().optional(),
  result: z.lazy(() => PowerPathTestQuestionResult$inboundSchema).optional(),
});

/** @internal */
export type PowerPathTestQuestion$Outbound = {
  id: string;
  index: number;
  title: string;
  url: string;
  difficulty: string;
  content?: PowerPathTestQuestionContent$Outbound | undefined;
  response?: string | Array<string> | undefined;
  correct?: boolean | undefined;
  result?: PowerPathTestQuestionResult$Outbound | undefined;
};

/** @internal */
export const PowerPathTestQuestion$outboundSchema: z.ZodType<
  PowerPathTestQuestion$Outbound,
  z.ZodTypeDef,
  PowerPathTestQuestion
> = z.object({
  id: z.string(),
  index: z.number(),
  title: z.string(),
  url: z.string(),
  difficulty: PowerPathTestQuestionDifficulty$outboundSchema.default("medium"),
  content: z.lazy(() => PowerPathTestQuestionContent$outboundSchema).optional(),
  response: z.union([z.string(), z.array(z.string())]).optional(),
  correct: z.boolean().optional(),
  result: z.lazy(() => PowerPathTestQuestionResult$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PowerPathTestQuestion$ {
  /** @deprecated use `PowerPathTestQuestion$inboundSchema` instead. */
  export const inboundSchema = PowerPathTestQuestion$inboundSchema;
  /** @deprecated use `PowerPathTestQuestion$outboundSchema` instead. */
  export const outboundSchema = PowerPathTestQuestion$outboundSchema;
  /** @deprecated use `PowerPathTestQuestion$Outbound` instead. */
  export type Outbound = PowerPathTestQuestion$Outbound;
}

export function powerPathTestQuestionToJSON(
  powerPathTestQuestion: PowerPathTestQuestion,
): string {
  return JSON.stringify(
    PowerPathTestQuestion$outboundSchema.parse(powerPathTestQuestion),
  );
}

export function powerPathTestQuestionFromJSON(
  jsonString: string,
): SafeParseResult<PowerPathTestQuestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PowerPathTestQuestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PowerPathTestQuestion' from JSON`,
  );
}
