/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LearningObjectiveSet = {
  source: string;
  learningObjectiveIds: Array<string>;
};

/** @internal */
export const LearningObjectiveSet$inboundSchema: z.ZodType<
  LearningObjectiveSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  learningObjectiveIds: z.array(z.string()),
});

/** @internal */
export type LearningObjectiveSet$Outbound = {
  source: string;
  learningObjectiveIds: Array<string>;
};

/** @internal */
export const LearningObjectiveSet$outboundSchema: z.ZodType<
  LearningObjectiveSet$Outbound,
  z.ZodTypeDef,
  LearningObjectiveSet
> = z.object({
  source: z.string(),
  learningObjectiveIds: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LearningObjectiveSet$ {
  /** @deprecated use `LearningObjectiveSet$inboundSchema` instead. */
  export const inboundSchema = LearningObjectiveSet$inboundSchema;
  /** @deprecated use `LearningObjectiveSet$outboundSchema` instead. */
  export const outboundSchema = LearningObjectiveSet$outboundSchema;
  /** @deprecated use `LearningObjectiveSet$Outbound` instead. */
  export type Outbound = LearningObjectiveSet$Outbound;
}

export function learningObjectiveSetToJSON(
  learningObjectiveSet: LearningObjectiveSet,
): string {
  return JSON.stringify(
    LearningObjectiveSet$outboundSchema.parse(learningObjectiveSet),
  );
}

export function learningObjectiveSetFromJSON(
  jsonString: string,
): SafeParseResult<LearningObjectiveSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LearningObjectiveSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LearningObjectiveSet' from JSON`,
  );
}
