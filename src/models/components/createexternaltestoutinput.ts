/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of external service (e.g.: 'edulastic')
 */
export const CreateExternalTestOutInputToolProvider = {
  Edulastic: "edulastic",
} as const;
/**
 * The type of external service (e.g.: 'edulastic')
 */
export type CreateExternalTestOutInputToolProvider = ClosedEnum<
  typeof CreateExternalTestOutInputToolProvider
>;

/**
 * Input for creating an external test-out lesson
 */
export type CreateExternalTestOutInput = {
  /**
   * The sourcedId of the Course to create the external test for
   */
  courseId: string;
  /**
   * The title of the external test reference
   */
  lessonTitle?: string | undefined;
  /**
   * The URL to the external test system (e.g., Edulastic, QTI, etc.)
   */
  launchUrl?: string | undefined;
  /**
   * The type of external service (e.g.: 'edulastic')
   */
  toolProvider: CreateExternalTestOutInputToolProvider;
  /**
   * The title of the unit containing the external test
   */
  unitTitle?: string | undefined;
  /**
   * The sourcedId of an existing CourseComponent (unit) for the test. If not provided, a new unit will be created.
   */
  courseComponentSourcedId?: string | undefined;
  /**
   * The ID of the test in the spreadsheet
   */
  vendorId: string;
  /**
   * Description of the external test that will be added to the Resource entity's metadata
   */
  description?: string | undefined;
  /**
   * Additional metadata for the external test resource
   */
  resourceMetadata?: any | undefined;
  lessonType?: "test-out" | undefined;
  /**
   * The XP value for the resource
   */
  xp: number;
};

/** @internal */
export const CreateExternalTestOutInputToolProvider$inboundSchema:
  z.ZodNativeEnum<typeof CreateExternalTestOutInputToolProvider> = z.nativeEnum(
    CreateExternalTestOutInputToolProvider,
  );

/** @internal */
export const CreateExternalTestOutInputToolProvider$outboundSchema:
  z.ZodNativeEnum<typeof CreateExternalTestOutInputToolProvider> =
    CreateExternalTestOutInputToolProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExternalTestOutInputToolProvider$ {
  /** @deprecated use `CreateExternalTestOutInputToolProvider$inboundSchema` instead. */
  export const inboundSchema =
    CreateExternalTestOutInputToolProvider$inboundSchema;
  /** @deprecated use `CreateExternalTestOutInputToolProvider$outboundSchema` instead. */
  export const outboundSchema =
    CreateExternalTestOutInputToolProvider$outboundSchema;
}

/** @internal */
export const CreateExternalTestOutInput$inboundSchema: z.ZodType<
  CreateExternalTestOutInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseId: z.string(),
  lessonTitle: z.string().optional(),
  launchUrl: z.string().optional(),
  toolProvider: CreateExternalTestOutInputToolProvider$inboundSchema,
  unitTitle: z.string().optional(),
  courseComponentSourcedId: z.string().optional(),
  vendorId: z.string(),
  description: z.string().optional(),
  resourceMetadata: z.any().optional(),
  lessonType: z.literal("test-out").default("test-out").optional(),
  xp: z.number(),
});

/** @internal */
export type CreateExternalTestOutInput$Outbound = {
  courseId: string;
  lessonTitle?: string | undefined;
  launchUrl?: string | undefined;
  toolProvider: string;
  unitTitle?: string | undefined;
  courseComponentSourcedId?: string | undefined;
  vendorId: string;
  description?: string | undefined;
  resourceMetadata?: any | undefined;
  lessonType: "test-out";
  xp: number;
};

/** @internal */
export const CreateExternalTestOutInput$outboundSchema: z.ZodType<
  CreateExternalTestOutInput$Outbound,
  z.ZodTypeDef,
  CreateExternalTestOutInput
> = z.object({
  courseId: z.string(),
  lessonTitle: z.string().optional(),
  launchUrl: z.string().optional(),
  toolProvider: CreateExternalTestOutInputToolProvider$outboundSchema,
  unitTitle: z.string().optional(),
  courseComponentSourcedId: z.string().optional(),
  vendorId: z.string(),
  description: z.string().optional(),
  resourceMetadata: z.any().optional(),
  lessonType: z.literal("test-out").default("test-out" as const),
  xp: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExternalTestOutInput$ {
  /** @deprecated use `CreateExternalTestOutInput$inboundSchema` instead. */
  export const inboundSchema = CreateExternalTestOutInput$inboundSchema;
  /** @deprecated use `CreateExternalTestOutInput$outboundSchema` instead. */
  export const outboundSchema = CreateExternalTestOutInput$outboundSchema;
  /** @deprecated use `CreateExternalTestOutInput$Outbound` instead. */
  export type Outbound = CreateExternalTestOutInput$Outbound;
}

export function createExternalTestOutInputToJSON(
  createExternalTestOutInput: CreateExternalTestOutInput,
): string {
  return JSON.stringify(
    CreateExternalTestOutInput$outboundSchema.parse(createExternalTestOutInput),
  );
}

export function createExternalTestOutInputFromJSON(
  jsonString: string,
): SafeParseResult<CreateExternalTestOutInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateExternalTestOutInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateExternalTestOutInput' from JSON`,
  );
}
