/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The credentials for accessing the assigned test on Edulastic
 */
export type Credentials = {
  email: string;
  password: string;
};

/**
 * Holds the id of the TestOut lesson (ComponentResource), or its results in case it was previously attempted
 */
export type TestOutResult = {
  lessonType?: "test-out" | undefined;
  /**
   * The id of the testOut lesson
   */
  lessonId: string | null;
  /**
   * Whether the Test Out has been finalized in the current attempt
   */
  finalized: boolean;
  /**
   * The tool provider for the testOut lesson
   */
  toolProvider: string | null;
  /**
   * The attempt number
   */
  attempt?: number | undefined;
  /**
   * The credentials for accessing the assigned test on Edulastic
   */
  credentials?: Credentials | undefined;
  /**
   * The id of the assignment on Edulastic for results retrieval
   */
  assignmentId?: string | undefined;
  /**
   * The id of the class on Edulastic for results retrieval
   */
  classId?: string | undefined;
  /**
   * The URL of the test on Edulastic
   */
  testUrl?: string | undefined;
  /**
   * The id of the test on Edulastic
   */
  testId?: string | undefined;
};

/** @internal */
export const Credentials$inboundSchema: z.ZodType<
  Credentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  password: z.string(),
});

/** @internal */
export type Credentials$Outbound = {
  email: string;
  password: string;
};

/** @internal */
export const Credentials$outboundSchema: z.ZodType<
  Credentials$Outbound,
  z.ZodTypeDef,
  Credentials
> = z.object({
  email: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Credentials$ {
  /** @deprecated use `Credentials$inboundSchema` instead. */
  export const inboundSchema = Credentials$inboundSchema;
  /** @deprecated use `Credentials$outboundSchema` instead. */
  export const outboundSchema = Credentials$outboundSchema;
  /** @deprecated use `Credentials$Outbound` instead. */
  export type Outbound = Credentials$Outbound;
}

export function credentialsToJSON(credentials: Credentials): string {
  return JSON.stringify(Credentials$outboundSchema.parse(credentials));
}

export function credentialsFromJSON(
  jsonString: string,
): SafeParseResult<Credentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Credentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Credentials' from JSON`,
  );
}

/** @internal */
export const TestOutResult$inboundSchema: z.ZodType<
  TestOutResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonType: z.literal("test-out").default("test-out").optional(),
  lessonId: z.nullable(z.string()),
  finalized: z.boolean(),
  toolProvider: z.nullable(z.string()),
  attempt: z.number().optional(),
  credentials: z.lazy(() => Credentials$inboundSchema).optional(),
  assignmentId: z.string().optional(),
  classId: z.string().optional(),
  testUrl: z.string().optional(),
  testId: z.string().optional(),
});

/** @internal */
export type TestOutResult$Outbound = {
  lessonType: "test-out";
  lessonId: string | null;
  finalized: boolean;
  toolProvider: string | null;
  attempt?: number | undefined;
  credentials?: Credentials$Outbound | undefined;
  assignmentId?: string | undefined;
  classId?: string | undefined;
  testUrl?: string | undefined;
  testId?: string | undefined;
};

/** @internal */
export const TestOutResult$outboundSchema: z.ZodType<
  TestOutResult$Outbound,
  z.ZodTypeDef,
  TestOutResult
> = z.object({
  lessonType: z.literal("test-out").default("test-out" as const),
  lessonId: z.nullable(z.string()),
  finalized: z.boolean(),
  toolProvider: z.nullable(z.string()),
  attempt: z.number().optional(),
  credentials: z.lazy(() => Credentials$outboundSchema).optional(),
  assignmentId: z.string().optional(),
  classId: z.string().optional(),
  testUrl: z.string().optional(),
  testId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestOutResult$ {
  /** @deprecated use `TestOutResult$inboundSchema` instead. */
  export const inboundSchema = TestOutResult$inboundSchema;
  /** @deprecated use `TestOutResult$outboundSchema` instead. */
  export const outboundSchema = TestOutResult$outboundSchema;
  /** @deprecated use `TestOutResult$Outbound` instead. */
  export type Outbound = TestOutResult$Outbound;
}

export function testOutResultToJSON(testOutResult: TestOutResult): string {
  return JSON.stringify(TestOutResult$outboundSchema.parse(testOutResult));
}

export function testOutResultFromJSON(
  jsonString: string,
): SafeParseResult<TestOutResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestOutResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestOutResult' from JSON`,
  );
}
