/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AttachResourceRequestBody = {
  /**
   * The Sourced ID of the Component Resource to attach to the Lesson Plan
   */
  componentResourceId: string;
  /**
   * The order of the Lesson Plan Item
   */
  order: number;
  /**
   * The Sourced ID of the parent Lesson Plan Item. It must reference a Component.
   */
  parentId: string | null;
  /**
   * Whether the Lesson Plan Item is skipped for this user
   */
  skipped?: boolean | null | undefined;
};

export type AttachResourceRequest = {
  /**
   * Lesson plan ID
   */
  lessonPlanId: string;
  requestBody?: AttachResourceRequestBody | undefined;
};

export const AttachResourceType = {
  Component: "component",
  Resource: "resource",
} as const;
export type AttachResourceType = ClosedEnum<typeof AttachResourceType>;

export type AttachResourceLessonPlanItem = {
  id?: string | undefined;
  lessonPlanId: string;
  type: AttachResourceType;
  componentId?: string | null | undefined;
  componentResourceId?: string | null | undefined;
  order: number;
  parentId?: string | null | undefined;
  skipped?: boolean | undefined;
};

/**
 * Resource attached
 */
export type AttachResourceResponse = {
  lessonPlanItem: AttachResourceLessonPlanItem;
};

/** @internal */
export const AttachResourceRequestBody$inboundSchema: z.ZodType<
  AttachResourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  componentResourceId: z.string(),
  order: z.number(),
  parentId: z.nullable(z.string()),
  skipped: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type AttachResourceRequestBody$Outbound = {
  componentResourceId: string;
  order: number;
  parentId: string | null;
  skipped: boolean | null;
};

/** @internal */
export const AttachResourceRequestBody$outboundSchema: z.ZodType<
  AttachResourceRequestBody$Outbound,
  z.ZodTypeDef,
  AttachResourceRequestBody
> = z.object({
  componentResourceId: z.string(),
  order: z.number(),
  parentId: z.nullable(z.string()),
  skipped: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachResourceRequestBody$ {
  /** @deprecated use `AttachResourceRequestBody$inboundSchema` instead. */
  export const inboundSchema = AttachResourceRequestBody$inboundSchema;
  /** @deprecated use `AttachResourceRequestBody$outboundSchema` instead. */
  export const outboundSchema = AttachResourceRequestBody$outboundSchema;
  /** @deprecated use `AttachResourceRequestBody$Outbound` instead. */
  export type Outbound = AttachResourceRequestBody$Outbound;
}

export function attachResourceRequestBodyToJSON(
  attachResourceRequestBody: AttachResourceRequestBody,
): string {
  return JSON.stringify(
    AttachResourceRequestBody$outboundSchema.parse(attachResourceRequestBody),
  );
}

export function attachResourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AttachResourceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachResourceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachResourceRequestBody' from JSON`,
  );
}

/** @internal */
export const AttachResourceRequest$inboundSchema: z.ZodType<
  AttachResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonPlanId: z.string(),
  RequestBody: z.lazy(() => AttachResourceRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AttachResourceRequest$Outbound = {
  lessonPlanId: string;
  RequestBody?: AttachResourceRequestBody$Outbound | undefined;
};

/** @internal */
export const AttachResourceRequest$outboundSchema: z.ZodType<
  AttachResourceRequest$Outbound,
  z.ZodTypeDef,
  AttachResourceRequest
> = z.object({
  lessonPlanId: z.string(),
  requestBody: z.lazy(() => AttachResourceRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachResourceRequest$ {
  /** @deprecated use `AttachResourceRequest$inboundSchema` instead. */
  export const inboundSchema = AttachResourceRequest$inboundSchema;
  /** @deprecated use `AttachResourceRequest$outboundSchema` instead. */
  export const outboundSchema = AttachResourceRequest$outboundSchema;
  /** @deprecated use `AttachResourceRequest$Outbound` instead. */
  export type Outbound = AttachResourceRequest$Outbound;
}

export function attachResourceRequestToJSON(
  attachResourceRequest: AttachResourceRequest,
): string {
  return JSON.stringify(
    AttachResourceRequest$outboundSchema.parse(attachResourceRequest),
  );
}

export function attachResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<AttachResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachResourceRequest' from JSON`,
  );
}

/** @internal */
export const AttachResourceType$inboundSchema: z.ZodNativeEnum<
  typeof AttachResourceType
> = z.nativeEnum(AttachResourceType);

/** @internal */
export const AttachResourceType$outboundSchema: z.ZodNativeEnum<
  typeof AttachResourceType
> = AttachResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachResourceType$ {
  /** @deprecated use `AttachResourceType$inboundSchema` instead. */
  export const inboundSchema = AttachResourceType$inboundSchema;
  /** @deprecated use `AttachResourceType$outboundSchema` instead. */
  export const outboundSchema = AttachResourceType$outboundSchema;
}

/** @internal */
export const AttachResourceLessonPlanItem$inboundSchema: z.ZodType<
  AttachResourceLessonPlanItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  lessonPlanId: z.string(),
  type: AttachResourceType$inboundSchema,
  componentId: z.nullable(z.string()).optional(),
  componentResourceId: z.nullable(z.string()).optional(),
  order: z.number(),
  parentId: z.nullable(z.string()).optional(),
  skipped: z.boolean().default(false),
});

/** @internal */
export type AttachResourceLessonPlanItem$Outbound = {
  id?: string | undefined;
  lessonPlanId: string;
  type: string;
  componentId?: string | null | undefined;
  componentResourceId?: string | null | undefined;
  order: number;
  parentId?: string | null | undefined;
  skipped: boolean;
};

/** @internal */
export const AttachResourceLessonPlanItem$outboundSchema: z.ZodType<
  AttachResourceLessonPlanItem$Outbound,
  z.ZodTypeDef,
  AttachResourceLessonPlanItem
> = z.object({
  id: z.string().optional(),
  lessonPlanId: z.string(),
  type: AttachResourceType$outboundSchema,
  componentId: z.nullable(z.string()).optional(),
  componentResourceId: z.nullable(z.string()).optional(),
  order: z.number(),
  parentId: z.nullable(z.string()).optional(),
  skipped: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachResourceLessonPlanItem$ {
  /** @deprecated use `AttachResourceLessonPlanItem$inboundSchema` instead. */
  export const inboundSchema = AttachResourceLessonPlanItem$inboundSchema;
  /** @deprecated use `AttachResourceLessonPlanItem$outboundSchema` instead. */
  export const outboundSchema = AttachResourceLessonPlanItem$outboundSchema;
  /** @deprecated use `AttachResourceLessonPlanItem$Outbound` instead. */
  export type Outbound = AttachResourceLessonPlanItem$Outbound;
}

export function attachResourceLessonPlanItemToJSON(
  attachResourceLessonPlanItem: AttachResourceLessonPlanItem,
): string {
  return JSON.stringify(
    AttachResourceLessonPlanItem$outboundSchema.parse(
      attachResourceLessonPlanItem,
    ),
  );
}

export function attachResourceLessonPlanItemFromJSON(
  jsonString: string,
): SafeParseResult<AttachResourceLessonPlanItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachResourceLessonPlanItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachResourceLessonPlanItem' from JSON`,
  );
}

/** @internal */
export const AttachResourceResponse$inboundSchema: z.ZodType<
  AttachResourceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonPlanItem: z.lazy(() => AttachResourceLessonPlanItem$inboundSchema),
});

/** @internal */
export type AttachResourceResponse$Outbound = {
  lessonPlanItem: AttachResourceLessonPlanItem$Outbound;
};

/** @internal */
export const AttachResourceResponse$outboundSchema: z.ZodType<
  AttachResourceResponse$Outbound,
  z.ZodTypeDef,
  AttachResourceResponse
> = z.object({
  lessonPlanItem: z.lazy(() => AttachResourceLessonPlanItem$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachResourceResponse$ {
  /** @deprecated use `AttachResourceResponse$inboundSchema` instead. */
  export const inboundSchema = AttachResourceResponse$inboundSchema;
  /** @deprecated use `AttachResourceResponse$outboundSchema` instead. */
  export const outboundSchema = AttachResourceResponse$outboundSchema;
  /** @deprecated use `AttachResourceResponse$Outbound` instead. */
  export type Outbound = AttachResourceResponse$Outbound;
}

export function attachResourceResponseToJSON(
  attachResourceResponse: AttachResourceResponse,
): string {
  return JSON.stringify(
    AttachResourceResponse$outboundSchema.parse(attachResourceResponse),
  );
}

export function attachResourceResponseFromJSON(
  jsonString: string,
): SafeParseResult<AttachResourceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachResourceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachResourceResponse' from JSON`,
  );
}
