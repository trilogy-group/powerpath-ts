/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FinalStudentAssessmentResponseRequest = {
  /**
   * The sourcedId of the student
   */
  student: string;
  /**
   * The sourcedId of the lesson
   */
  lesson: string;
};

/**
 * Success
 */
export type FinalStudentAssessmentResponseResponse = {
  lessonType?: "quiz" | undefined;
  /**
   * Whether the lesson has been finalized in the current attempt
   */
  finalized: boolean;
  questions: Array<components.PowerPathTestQuestion>;
  /**
   * The final score for the student
   */
  score: number;
  /**
   * The accuracy of the student's attempted questions
   */
  accuracy: number;
  /**
   * The number of correct questions the student has answered in the lesson
   */
  correctQuestions: number;
  /**
   * The total number of questions in the lesson
   */
  totalQuestions: number;
  /**
   * The XP the student has earned in the lesson
   */
  xp: number | null;
  /**
   * The multiplier for the student's XP
   */
  multiplier: number | null;
};

/** @internal */
export const FinalStudentAssessmentResponseRequest$inboundSchema: z.ZodType<
  FinalStudentAssessmentResponseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  lesson: z.string(),
});

/** @internal */
export type FinalStudentAssessmentResponseRequest$Outbound = {
  student: string;
  lesson: string;
};

/** @internal */
export const FinalStudentAssessmentResponseRequest$outboundSchema: z.ZodType<
  FinalStudentAssessmentResponseRequest$Outbound,
  z.ZodTypeDef,
  FinalStudentAssessmentResponseRequest
> = z.object({
  student: z.string(),
  lesson: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinalStudentAssessmentResponseRequest$ {
  /** @deprecated use `FinalStudentAssessmentResponseRequest$inboundSchema` instead. */
  export const inboundSchema =
    FinalStudentAssessmentResponseRequest$inboundSchema;
  /** @deprecated use `FinalStudentAssessmentResponseRequest$outboundSchema` instead. */
  export const outboundSchema =
    FinalStudentAssessmentResponseRequest$outboundSchema;
  /** @deprecated use `FinalStudentAssessmentResponseRequest$Outbound` instead. */
  export type Outbound = FinalStudentAssessmentResponseRequest$Outbound;
}

export function finalStudentAssessmentResponseRequestToJSON(
  finalStudentAssessmentResponseRequest: FinalStudentAssessmentResponseRequest,
): string {
  return JSON.stringify(
    FinalStudentAssessmentResponseRequest$outboundSchema.parse(
      finalStudentAssessmentResponseRequest,
    ),
  );
}

export function finalStudentAssessmentResponseRequestFromJSON(
  jsonString: string,
): SafeParseResult<FinalStudentAssessmentResponseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FinalStudentAssessmentResponseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FinalStudentAssessmentResponseRequest' from JSON`,
  );
}

/** @internal */
export const FinalStudentAssessmentResponseResponse$inboundSchema: z.ZodType<
  FinalStudentAssessmentResponseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonType: z.literal("quiz").default("quiz").optional(),
  finalized: z.boolean(),
  questions: z.array(components.PowerPathTestQuestion$inboundSchema),
  score: z.number(),
  accuracy: z.number(),
  correctQuestions: z.number(),
  totalQuestions: z.number(),
  xp: z.nullable(z.number()),
  multiplier: z.nullable(z.number()),
});

/** @internal */
export type FinalStudentAssessmentResponseResponse$Outbound = {
  lessonType: "quiz";
  finalized: boolean;
  questions: Array<components.PowerPathTestQuestion$Outbound>;
  score: number;
  accuracy: number;
  correctQuestions: number;
  totalQuestions: number;
  xp: number | null;
  multiplier: number | null;
};

/** @internal */
export const FinalStudentAssessmentResponseResponse$outboundSchema: z.ZodType<
  FinalStudentAssessmentResponseResponse$Outbound,
  z.ZodTypeDef,
  FinalStudentAssessmentResponseResponse
> = z.object({
  lessonType: z.literal("quiz").default("quiz" as const),
  finalized: z.boolean(),
  questions: z.array(components.PowerPathTestQuestion$outboundSchema),
  score: z.number(),
  accuracy: z.number(),
  correctQuestions: z.number(),
  totalQuestions: z.number(),
  xp: z.nullable(z.number()),
  multiplier: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinalStudentAssessmentResponseResponse$ {
  /** @deprecated use `FinalStudentAssessmentResponseResponse$inboundSchema` instead. */
  export const inboundSchema =
    FinalStudentAssessmentResponseResponse$inboundSchema;
  /** @deprecated use `FinalStudentAssessmentResponseResponse$outboundSchema` instead. */
  export const outboundSchema =
    FinalStudentAssessmentResponseResponse$outboundSchema;
  /** @deprecated use `FinalStudentAssessmentResponseResponse$Outbound` instead. */
  export type Outbound = FinalStudentAssessmentResponseResponse$Outbound;
}

export function finalStudentAssessmentResponseResponseToJSON(
  finalStudentAssessmentResponseResponse:
    FinalStudentAssessmentResponseResponse,
): string {
  return JSON.stringify(
    FinalStudentAssessmentResponseResponse$outboundSchema.parse(
      finalStudentAssessmentResponseResponse,
    ),
  );
}

export function finalStudentAssessmentResponseResponseFromJSON(
  jsonString: string,
): SafeParseResult<FinalStudentAssessmentResponseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FinalStudentAssessmentResponseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FinalStudentAssessmentResponseResponse' from JSON`,
  );
}
