/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Success
 */
export type UpdateStudentQuestionResponseResponse =
  | (components.PowerPath100UpdateStudentQuestionResponseResult & {
    lessonType: "powerpath-100";
  })
  | (components.QuizUpdateStudentQuestionResponseResult & {
    lessonType: "quiz";
  });

/** @internal */
export const UpdateStudentQuestionResponseResponse$inboundSchema: z.ZodType<
  UpdateStudentQuestionResponseResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.PowerPath100UpdateStudentQuestionResponseResult$inboundSchema.and(
    z.object({ lessonType: z.literal("powerpath-100") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
  components.QuizUpdateStudentQuestionResponseResult$inboundSchema.and(
    z.object({ lessonType: z.literal("quiz") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
]);

/** @internal */
export type UpdateStudentQuestionResponseResponse$Outbound =
  | (components.PowerPath100UpdateStudentQuestionResponseResult$Outbound & {
    lessonType: "powerpath-100";
  })
  | (components.QuizUpdateStudentQuestionResponseResult$Outbound & {
    lessonType: "quiz";
  });

/** @internal */
export const UpdateStudentQuestionResponseResponse$outboundSchema: z.ZodType<
  UpdateStudentQuestionResponseResponse$Outbound,
  z.ZodTypeDef,
  UpdateStudentQuestionResponseResponse
> = z.union([
  components.PowerPath100UpdateStudentQuestionResponseResult$outboundSchema.and(
    z.object({ lessonType: z.literal("powerpath-100") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
  components.QuizUpdateStudentQuestionResponseResult$outboundSchema.and(
    z.object({ lessonType: z.literal("quiz") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStudentQuestionResponseResponse$ {
  /** @deprecated use `UpdateStudentQuestionResponseResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateStudentQuestionResponseResponse$inboundSchema;
  /** @deprecated use `UpdateStudentQuestionResponseResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStudentQuestionResponseResponse$outboundSchema;
  /** @deprecated use `UpdateStudentQuestionResponseResponse$Outbound` instead. */
  export type Outbound = UpdateStudentQuestionResponseResponse$Outbound;
}

export function updateStudentQuestionResponseResponseToJSON(
  updateStudentQuestionResponseResponse: UpdateStudentQuestionResponseResponse,
): string {
  return JSON.stringify(
    UpdateStudentQuestionResponseResponse$outboundSchema.parse(
      updateStudentQuestionResponseResponse,
    ),
  );
}

export function updateStudentQuestionResponseResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStudentQuestionResponseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateStudentQuestionResponseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStudentQuestionResponseResponse' from JSON`,
  );
}
