/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAttemptsRequest = {
  /**
   * The sourcedId of the student
   */
  student: string;
  /**
   * The sourcedId of the lesson
   */
  lesson: string;
};

/**
 * The status of this attempt
 */
export const GetAttemptsScoreStatus = {
  Exempt: "exempt",
  FullyGraded: "fully graded",
  NotSubmitted: "not submitted",
  PartiallyGraded: "partially graded",
  Submitted: "submitted",
} as const;
/**
 * The status of this attempt
 */
export type GetAttemptsScoreStatus = ClosedEnum<typeof GetAttemptsScoreStatus>;

export type Attempt = {
  /**
   * The attempt number
   */
  attempt: number | null;
  /**
   * The current score for this attempt
   */
  score: number;
  /**
   * The status of this attempt
   */
  scoreStatus: GetAttemptsScoreStatus;
  /**
   * When this attempt was started
   */
  startedAt: Date | null;
  /**
   * When this attempt was completed
   */
  completedAt: Date | null;
};

/**
 * Success
 */
export type GetAttemptsResponse = {
  attempts: Array<Attempt>;
};

/** @internal */
export const GetAttemptsRequest$inboundSchema: z.ZodType<
  GetAttemptsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  lesson: z.string(),
});

/** @internal */
export type GetAttemptsRequest$Outbound = {
  student: string;
  lesson: string;
};

/** @internal */
export const GetAttemptsRequest$outboundSchema: z.ZodType<
  GetAttemptsRequest$Outbound,
  z.ZodTypeDef,
  GetAttemptsRequest
> = z.object({
  student: z.string(),
  lesson: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttemptsRequest$ {
  /** @deprecated use `GetAttemptsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAttemptsRequest$inboundSchema;
  /** @deprecated use `GetAttemptsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAttemptsRequest$outboundSchema;
  /** @deprecated use `GetAttemptsRequest$Outbound` instead. */
  export type Outbound = GetAttemptsRequest$Outbound;
}

export function getAttemptsRequestToJSON(
  getAttemptsRequest: GetAttemptsRequest,
): string {
  return JSON.stringify(
    GetAttemptsRequest$outboundSchema.parse(getAttemptsRequest),
  );
}

export function getAttemptsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAttemptsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAttemptsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAttemptsRequest' from JSON`,
  );
}

/** @internal */
export const GetAttemptsScoreStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAttemptsScoreStatus
> = z.nativeEnum(GetAttemptsScoreStatus);

/** @internal */
export const GetAttemptsScoreStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAttemptsScoreStatus
> = GetAttemptsScoreStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttemptsScoreStatus$ {
  /** @deprecated use `GetAttemptsScoreStatus$inboundSchema` instead. */
  export const inboundSchema = GetAttemptsScoreStatus$inboundSchema;
  /** @deprecated use `GetAttemptsScoreStatus$outboundSchema` instead. */
  export const outboundSchema = GetAttemptsScoreStatus$outboundSchema;
}

/** @internal */
export const Attempt$inboundSchema: z.ZodType<Attempt, z.ZodTypeDef, unknown> =
  z.object({
    attempt: z.nullable(z.number()),
    score: z.number(),
    scoreStatus: GetAttemptsScoreStatus$inboundSchema,
    startedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    completedAt: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
  });

/** @internal */
export type Attempt$Outbound = {
  attempt: number | null;
  score: number;
  scoreStatus: string;
  startedAt: string | null;
  completedAt: string | null;
};

/** @internal */
export const Attempt$outboundSchema: z.ZodType<
  Attempt$Outbound,
  z.ZodTypeDef,
  Attempt
> = z.object({
  attempt: z.nullable(z.number()),
  score: z.number(),
  scoreStatus: GetAttemptsScoreStatus$outboundSchema,
  startedAt: z.nullable(z.date().transform(v => v.toISOString())),
  completedAt: z.nullable(z.date().transform(v => v.toISOString())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attempt$ {
  /** @deprecated use `Attempt$inboundSchema` instead. */
  export const inboundSchema = Attempt$inboundSchema;
  /** @deprecated use `Attempt$outboundSchema` instead. */
  export const outboundSchema = Attempt$outboundSchema;
  /** @deprecated use `Attempt$Outbound` instead. */
  export type Outbound = Attempt$Outbound;
}

export function attemptToJSON(attempt: Attempt): string {
  return JSON.stringify(Attempt$outboundSchema.parse(attempt));
}

export function attemptFromJSON(
  jsonString: string,
): SafeParseResult<Attempt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attempt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attempt' from JSON`,
  );
}

/** @internal */
export const GetAttemptsResponse$inboundSchema: z.ZodType<
  GetAttemptsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  attempts: z.array(z.lazy(() => Attempt$inboundSchema)),
});

/** @internal */
export type GetAttemptsResponse$Outbound = {
  attempts: Array<Attempt$Outbound>;
};

/** @internal */
export const GetAttemptsResponse$outboundSchema: z.ZodType<
  GetAttemptsResponse$Outbound,
  z.ZodTypeDef,
  GetAttemptsResponse
> = z.object({
  attempts: z.array(z.lazy(() => Attempt$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAttemptsResponse$ {
  /** @deprecated use `GetAttemptsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAttemptsResponse$inboundSchema;
  /** @deprecated use `GetAttemptsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAttemptsResponse$outboundSchema;
  /** @deprecated use `GetAttemptsResponse$Outbound` instead. */
  export type Outbound = GetAttemptsResponse$Outbound;
}

export function getAttemptsResponseToJSON(
  getAttemptsResponse: GetAttemptsResponse,
): string {
  return JSON.stringify(
    GetAttemptsResponse$outboundSchema.parse(getAttemptsResponse),
  );
}

export function getAttemptsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAttemptsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAttemptsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAttemptsResponse' from JSON`,
  );
}
