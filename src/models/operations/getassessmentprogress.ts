/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAssessmentProgressRequest = {
  /**
   * The sourcedId of the student who is answering the question
   */
  student: string;
  /**
   * The sourcedId of the ComponentResource that represents the PowerPath lesson
   */
  lesson: string;
  /**
   * The attempt number of the lesson that the student is answering
   */
  attempt?: number | undefined;
};

/**
 * Success
 */
export type GetAssessmentProgressResponse =
  | (components.PowerPath100ProgressResult & { lessonType: "powerpath-100" })
  | (components.QuizProgressResult & { lessonType: "quiz" });

/** @internal */
export const GetAssessmentProgressRequest$inboundSchema: z.ZodType<
  GetAssessmentProgressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  lesson: z.string(),
  attempt: z.number().optional(),
});

/** @internal */
export type GetAssessmentProgressRequest$Outbound = {
  student: string;
  lesson: string;
  attempt?: number | undefined;
};

/** @internal */
export const GetAssessmentProgressRequest$outboundSchema: z.ZodType<
  GetAssessmentProgressRequest$Outbound,
  z.ZodTypeDef,
  GetAssessmentProgressRequest
> = z.object({
  student: z.string(),
  lesson: z.string(),
  attempt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentProgressRequest$ {
  /** @deprecated use `GetAssessmentProgressRequest$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentProgressRequest$inboundSchema;
  /** @deprecated use `GetAssessmentProgressRequest$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentProgressRequest$outboundSchema;
  /** @deprecated use `GetAssessmentProgressRequest$Outbound` instead. */
  export type Outbound = GetAssessmentProgressRequest$Outbound;
}

export function getAssessmentProgressRequestToJSON(
  getAssessmentProgressRequest: GetAssessmentProgressRequest,
): string {
  return JSON.stringify(
    GetAssessmentProgressRequest$outboundSchema.parse(
      getAssessmentProgressRequest,
    ),
  );
}

export function getAssessmentProgressRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentProgressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentProgressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentProgressRequest' from JSON`,
  );
}

/** @internal */
export const GetAssessmentProgressResponse$inboundSchema: z.ZodType<
  GetAssessmentProgressResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.PowerPath100ProgressResult$inboundSchema.and(
    z.object({ lessonType: z.literal("powerpath-100") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
  components.QuizProgressResult$inboundSchema.and(
    z.object({ lessonType: z.literal("quiz") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
]);

/** @internal */
export type GetAssessmentProgressResponse$Outbound =
  | (components.PowerPath100ProgressResult$Outbound & {
    lessonType: "powerpath-100";
  })
  | (components.QuizProgressResult$Outbound & { lessonType: "quiz" });

/** @internal */
export const GetAssessmentProgressResponse$outboundSchema: z.ZodType<
  GetAssessmentProgressResponse$Outbound,
  z.ZodTypeDef,
  GetAssessmentProgressResponse
> = z.union([
  components.PowerPath100ProgressResult$outboundSchema.and(
    z.object({ lessonType: z.literal("powerpath-100") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
  components.QuizProgressResult$outboundSchema.and(
    z.object({ lessonType: z.literal("quiz") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAssessmentProgressResponse$ {
  /** @deprecated use `GetAssessmentProgressResponse$inboundSchema` instead. */
  export const inboundSchema = GetAssessmentProgressResponse$inboundSchema;
  /** @deprecated use `GetAssessmentProgressResponse$outboundSchema` instead. */
  export const outboundSchema = GetAssessmentProgressResponse$outboundSchema;
  /** @deprecated use `GetAssessmentProgressResponse$Outbound` instead. */
  export type Outbound = GetAssessmentProgressResponse$Outbound;
}

export function getAssessmentProgressResponseToJSON(
  getAssessmentProgressResponse: GetAssessmentProgressResponse,
): string {
  return JSON.stringify(
    GetAssessmentProgressResponse$outboundSchema.parse(
      getAssessmentProgressResponse,
    ),
  );
}

export function getAssessmentProgressResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAssessmentProgressResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAssessmentProgressResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAssessmentProgressResponse' from JSON`,
  );
}
