/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ImportExternalTestAssignmentResultsRequest = {
  /**
   * The sourcedId of the student
   */
  student: string;
  /**
   * The sourcedId of the lesson (ComponentResource)
   */
  lesson: string;
  /**
   * The name of the application
   */
  applicationName?: string | undefined;
};

export const ImportExternalTestAssignmentResultsLessonType = {
  TestOut: "test-out",
  Placement: "placement",
} as const;
export type ImportExternalTestAssignmentResultsLessonType = ClosedEnum<
  typeof ImportExternalTestAssignmentResultsLessonType
>;

/**
 * The credentials for accessing the assigned test on Edulastic
 */
export type ImportExternalTestAssignmentResultsCredentials = {
  email: string;
  password: string;
};

/**
 * Success
 */
export type ImportExternalTestAssignmentResultsResponse = {
  lessonType: ImportExternalTestAssignmentResultsLessonType;
  /**
   * The sourcedId of the lesson (ComponentResource)
   */
  lessonId: string | null;
  /**
   * The tool provider for the lesson (ComponentResource)
   */
  toolProvider: string;
  /**
   * Whether the Test has been finalized in the current attempt
   */
  finalized: boolean;
  /**
   * The attempt number
   */
  attempt: number;
  /**
   * The credentials for accessing the assigned test on Edulastic
   */
  credentials?: ImportExternalTestAssignmentResultsCredentials | undefined;
  /**
   * The id of the assignment on Edulastic for results retrieval
   */
  assignmentId?: string | undefined;
  /**
   * The id of the class on Edulastic for results retrieval
   */
  classId?: string | undefined;
  /**
   * The URL of the test on Edulastic
   */
  testUrl?: string | undefined;
  /**
   * The id of the test on Edulastic
   */
  testId?: string | undefined;
  /**
   * The courseId to enroll the student in if they fail the placement test (can be null)
   */
  courseIdOnFail: string | null;
  /**
   * Whether the test has a fallback course for auto-enrollment on failure
   */
  hasFallbackCourse: boolean;
};

/** @internal */
export const ImportExternalTestAssignmentResultsRequest$inboundSchema:
  z.ZodType<ImportExternalTestAssignmentResultsRequest, z.ZodTypeDef, unknown> =
    z.object({
      student: z.string(),
      lesson: z.string(),
      applicationName: z.string().optional(),
    });

/** @internal */
export type ImportExternalTestAssignmentResultsRequest$Outbound = {
  student: string;
  lesson: string;
  applicationName?: string | undefined;
};

/** @internal */
export const ImportExternalTestAssignmentResultsRequest$outboundSchema:
  z.ZodType<
    ImportExternalTestAssignmentResultsRequest$Outbound,
    z.ZodTypeDef,
    ImportExternalTestAssignmentResultsRequest
  > = z.object({
    student: z.string(),
    lesson: z.string(),
    applicationName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportExternalTestAssignmentResultsRequest$ {
  /** @deprecated use `ImportExternalTestAssignmentResultsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ImportExternalTestAssignmentResultsRequest$inboundSchema;
  /** @deprecated use `ImportExternalTestAssignmentResultsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ImportExternalTestAssignmentResultsRequest$outboundSchema;
  /** @deprecated use `ImportExternalTestAssignmentResultsRequest$Outbound` instead. */
  export type Outbound = ImportExternalTestAssignmentResultsRequest$Outbound;
}

export function importExternalTestAssignmentResultsRequestToJSON(
  importExternalTestAssignmentResultsRequest:
    ImportExternalTestAssignmentResultsRequest,
): string {
  return JSON.stringify(
    ImportExternalTestAssignmentResultsRequest$outboundSchema.parse(
      importExternalTestAssignmentResultsRequest,
    ),
  );
}

export function importExternalTestAssignmentResultsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ImportExternalTestAssignmentResultsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ImportExternalTestAssignmentResultsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ImportExternalTestAssignmentResultsRequest' from JSON`,
  );
}

/** @internal */
export const ImportExternalTestAssignmentResultsLessonType$inboundSchema:
  z.ZodNativeEnum<typeof ImportExternalTestAssignmentResultsLessonType> = z
    .nativeEnum(ImportExternalTestAssignmentResultsLessonType);

/** @internal */
export const ImportExternalTestAssignmentResultsLessonType$outboundSchema:
  z.ZodNativeEnum<typeof ImportExternalTestAssignmentResultsLessonType> =
    ImportExternalTestAssignmentResultsLessonType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportExternalTestAssignmentResultsLessonType$ {
  /** @deprecated use `ImportExternalTestAssignmentResultsLessonType$inboundSchema` instead. */
  export const inboundSchema =
    ImportExternalTestAssignmentResultsLessonType$inboundSchema;
  /** @deprecated use `ImportExternalTestAssignmentResultsLessonType$outboundSchema` instead. */
  export const outboundSchema =
    ImportExternalTestAssignmentResultsLessonType$outboundSchema;
}

/** @internal */
export const ImportExternalTestAssignmentResultsCredentials$inboundSchema:
  z.ZodType<
    ImportExternalTestAssignmentResultsCredentials,
    z.ZodTypeDef,
    unknown
  > = z.object({
    email: z.string(),
    password: z.string(),
  });

/** @internal */
export type ImportExternalTestAssignmentResultsCredentials$Outbound = {
  email: string;
  password: string;
};

/** @internal */
export const ImportExternalTestAssignmentResultsCredentials$outboundSchema:
  z.ZodType<
    ImportExternalTestAssignmentResultsCredentials$Outbound,
    z.ZodTypeDef,
    ImportExternalTestAssignmentResultsCredentials
  > = z.object({
    email: z.string(),
    password: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportExternalTestAssignmentResultsCredentials$ {
  /** @deprecated use `ImportExternalTestAssignmentResultsCredentials$inboundSchema` instead. */
  export const inboundSchema =
    ImportExternalTestAssignmentResultsCredentials$inboundSchema;
  /** @deprecated use `ImportExternalTestAssignmentResultsCredentials$outboundSchema` instead. */
  export const outboundSchema =
    ImportExternalTestAssignmentResultsCredentials$outboundSchema;
  /** @deprecated use `ImportExternalTestAssignmentResultsCredentials$Outbound` instead. */
  export type Outbound =
    ImportExternalTestAssignmentResultsCredentials$Outbound;
}

export function importExternalTestAssignmentResultsCredentialsToJSON(
  importExternalTestAssignmentResultsCredentials:
    ImportExternalTestAssignmentResultsCredentials,
): string {
  return JSON.stringify(
    ImportExternalTestAssignmentResultsCredentials$outboundSchema.parse(
      importExternalTestAssignmentResultsCredentials,
    ),
  );
}

export function importExternalTestAssignmentResultsCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<
  ImportExternalTestAssignmentResultsCredentials,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ImportExternalTestAssignmentResultsCredentials$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ImportExternalTestAssignmentResultsCredentials' from JSON`,
  );
}

/** @internal */
export const ImportExternalTestAssignmentResultsResponse$inboundSchema:
  z.ZodType<
    ImportExternalTestAssignmentResultsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    lessonType: ImportExternalTestAssignmentResultsLessonType$inboundSchema,
    lessonId: z.nullable(z.string()),
    toolProvider: z.string(),
    finalized: z.boolean(),
    attempt: z.number(),
    credentials: z.lazy(() =>
      ImportExternalTestAssignmentResultsCredentials$inboundSchema
    ).optional(),
    assignmentId: z.string().optional(),
    classId: z.string().optional(),
    testUrl: z.string().optional(),
    testId: z.string().optional(),
    courseIdOnFail: z.nullable(z.string()),
    hasFallbackCourse: z.boolean(),
  });

/** @internal */
export type ImportExternalTestAssignmentResultsResponse$Outbound = {
  lessonType: string;
  lessonId: string | null;
  toolProvider: string;
  finalized: boolean;
  attempt: number;
  credentials?:
    | ImportExternalTestAssignmentResultsCredentials$Outbound
    | undefined;
  assignmentId?: string | undefined;
  classId?: string | undefined;
  testUrl?: string | undefined;
  testId?: string | undefined;
  courseIdOnFail: string | null;
  hasFallbackCourse: boolean;
};

/** @internal */
export const ImportExternalTestAssignmentResultsResponse$outboundSchema:
  z.ZodType<
    ImportExternalTestAssignmentResultsResponse$Outbound,
    z.ZodTypeDef,
    ImportExternalTestAssignmentResultsResponse
  > = z.object({
    lessonType: ImportExternalTestAssignmentResultsLessonType$outboundSchema,
    lessonId: z.nullable(z.string()),
    toolProvider: z.string(),
    finalized: z.boolean(),
    attempt: z.number(),
    credentials: z.lazy(() =>
      ImportExternalTestAssignmentResultsCredentials$outboundSchema
    ).optional(),
    assignmentId: z.string().optional(),
    classId: z.string().optional(),
    testUrl: z.string().optional(),
    testId: z.string().optional(),
    courseIdOnFail: z.nullable(z.string()),
    hasFallbackCourse: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportExternalTestAssignmentResultsResponse$ {
  /** @deprecated use `ImportExternalTestAssignmentResultsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ImportExternalTestAssignmentResultsResponse$inboundSchema;
  /** @deprecated use `ImportExternalTestAssignmentResultsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ImportExternalTestAssignmentResultsResponse$outboundSchema;
  /** @deprecated use `ImportExternalTestAssignmentResultsResponse$Outbound` instead. */
  export type Outbound = ImportExternalTestAssignmentResultsResponse$Outbound;
}

export function importExternalTestAssignmentResultsResponseToJSON(
  importExternalTestAssignmentResultsResponse:
    ImportExternalTestAssignmentResultsResponse,
): string {
  return JSON.stringify(
    ImportExternalTestAssignmentResultsResponse$outboundSchema.parse(
      importExternalTestAssignmentResultsResponse,
    ),
  );
}

export function importExternalTestAssignmentResultsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ImportExternalTestAssignmentResultsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ImportExternalTestAssignmentResultsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ImportExternalTestAssignmentResultsResponse' from JSON`,
  );
}
