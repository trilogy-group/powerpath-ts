/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCurrentLevelRequest = {
  /**
   * The sourcedId of the student
   */
  student: string;
  /**
   * The subject name
   */
  subject: string;
};

/**
 * Success
 */
export type GetCurrentLevelResponse = {
  /**
   * The grade level of the current level in the subject
   */
  gradeLevel: number | null;
  /**
   * Whether the student has completed the onboarding process for the subject
   */
  onboarded: boolean;
  /**
   * The number of placement tests available for the subject
   */
  availableTests: number;
};

/** @internal */
export const GetCurrentLevelRequest$inboundSchema: z.ZodType<
  GetCurrentLevelRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  subject: z.string(),
});

/** @internal */
export type GetCurrentLevelRequest$Outbound = {
  student: string;
  subject: string;
};

/** @internal */
export const GetCurrentLevelRequest$outboundSchema: z.ZodType<
  GetCurrentLevelRequest$Outbound,
  z.ZodTypeDef,
  GetCurrentLevelRequest
> = z.object({
  student: z.string(),
  subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentLevelRequest$ {
  /** @deprecated use `GetCurrentLevelRequest$inboundSchema` instead. */
  export const inboundSchema = GetCurrentLevelRequest$inboundSchema;
  /** @deprecated use `GetCurrentLevelRequest$outboundSchema` instead. */
  export const outboundSchema = GetCurrentLevelRequest$outboundSchema;
  /** @deprecated use `GetCurrentLevelRequest$Outbound` instead. */
  export type Outbound = GetCurrentLevelRequest$Outbound;
}

export function getCurrentLevelRequestToJSON(
  getCurrentLevelRequest: GetCurrentLevelRequest,
): string {
  return JSON.stringify(
    GetCurrentLevelRequest$outboundSchema.parse(getCurrentLevelRequest),
  );
}

export function getCurrentLevelRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentLevelRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentLevelRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentLevelRequest' from JSON`,
  );
}

/** @internal */
export const GetCurrentLevelResponse$inboundSchema: z.ZodType<
  GetCurrentLevelResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  gradeLevel: z.nullable(z.number()),
  onboarded: z.boolean(),
  availableTests: z.number(),
});

/** @internal */
export type GetCurrentLevelResponse$Outbound = {
  gradeLevel: number | null;
  onboarded: boolean;
  availableTests: number;
};

/** @internal */
export const GetCurrentLevelResponse$outboundSchema: z.ZodType<
  GetCurrentLevelResponse$Outbound,
  z.ZodTypeDef,
  GetCurrentLevelResponse
> = z.object({
  gradeLevel: z.nullable(z.number()),
  onboarded: z.boolean(),
  availableTests: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentLevelResponse$ {
  /** @deprecated use `GetCurrentLevelResponse$inboundSchema` instead. */
  export const inboundSchema = GetCurrentLevelResponse$inboundSchema;
  /** @deprecated use `GetCurrentLevelResponse$outboundSchema` instead. */
  export const outboundSchema = GetCurrentLevelResponse$outboundSchema;
  /** @deprecated use `GetCurrentLevelResponse$Outbound` instead. */
  export type Outbound = GetCurrentLevelResponse$Outbound;
}

export function getCurrentLevelResponseToJSON(
  getCurrentLevelResponse: GetCurrentLevelResponse,
): string {
  return JSON.stringify(
    GetCurrentLevelResponse$outboundSchema.parse(getCurrentLevelResponse),
  );
}

export function getCurrentLevelResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentLevelResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentLevelResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentLevelResponse' from JSON`,
  );
}
