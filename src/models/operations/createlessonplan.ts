/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateLessonPlanRequest = {
  /**
   * The Sourced ID of the course
   */
  courseId: string;
  /**
   * The Sourced ID of the student
   */
  userId: string;
  /**
   * (optional) The Sourced ID of the class. Defaults to current year's class for the student
   */
  classId?: string | undefined;
};

export const CreateLessonPlanStatus2 = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateLessonPlanStatus2 = ClosedEnum<
  typeof CreateLessonPlanStatus2
>;

export type CreateLessonPlanAcademicSession2 = {
  sourcedId: string;
};

export type CreateLessonPlanOrg2 = {
  sourcedId: string;
};

/**
 * Represents a course.
 */
export type CreateLessonPlanCourse2 = {
  sourcedId?: string | undefined;
  status: CreateLessonPlanStatus2;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: CreateLessonPlanAcademicSession2 | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: CreateLessonPlanOrg2;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

export type CreateLessonPlanLessonPlanLessonPlan2 = {
  /**
   * Represents a course.
   */
  course: CreateLessonPlanCourse2;
  subComponents: Array<components.LessonPlanTreeComponent>;
};

export type CreateLessonPlanLessonPlan2 = {
  lessonPlan: CreateLessonPlanLessonPlanLessonPlan2;
};

/**
 * Lesson plan created
 */
export type CreateLessonPlanResponseBody2 = {
  lessonPlan: CreateLessonPlanLessonPlan2;
};

export const CreateLessonPlanStatus1 = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateLessonPlanStatus1 = ClosedEnum<
  typeof CreateLessonPlanStatus1
>;

export type CreateLessonPlanAcademicSession1 = {
  sourcedId: string;
};

export type CreateLessonPlanOrg1 = {
  sourcedId: string;
};

/**
 * Represents a course.
 */
export type CreateLessonPlanCourse1 = {
  sourcedId?: string | undefined;
  status: CreateLessonPlanStatus1;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: CreateLessonPlanAcademicSession1 | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: CreateLessonPlanOrg1;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

export type CreateLessonPlanLessonPlanLessonPlan1 = {
  /**
   * Represents a course.
   */
  course: CreateLessonPlanCourse1;
  subComponents: Array<components.LessonPlanTreeComponent>;
};

export type CreateLessonPlanLessonPlan1 = {
  lessonPlan: CreateLessonPlanLessonPlanLessonPlan1;
};

/**
 * Lesson plan already exists
 */
export type CreateLessonPlanResponseBody1 = {
  lessonPlan: CreateLessonPlanLessonPlan1;
};

export type CreateLessonPlanResponse =
  | CreateLessonPlanResponseBody1
  | CreateLessonPlanResponseBody2;

/** @internal */
export const CreateLessonPlanRequest$inboundSchema: z.ZodType<
  CreateLessonPlanRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseId: z.string(),
  userId: z.string(),
  classId: z.string().optional(),
});

/** @internal */
export type CreateLessonPlanRequest$Outbound = {
  courseId: string;
  userId: string;
  classId?: string | undefined;
};

/** @internal */
export const CreateLessonPlanRequest$outboundSchema: z.ZodType<
  CreateLessonPlanRequest$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanRequest
> = z.object({
  courseId: z.string(),
  userId: z.string(),
  classId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanRequest$ {
  /** @deprecated use `CreateLessonPlanRequest$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanRequest$inboundSchema;
  /** @deprecated use `CreateLessonPlanRequest$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanRequest$outboundSchema;
  /** @deprecated use `CreateLessonPlanRequest$Outbound` instead. */
  export type Outbound = CreateLessonPlanRequest$Outbound;
}

export function createLessonPlanRequestToJSON(
  createLessonPlanRequest: CreateLessonPlanRequest,
): string {
  return JSON.stringify(
    CreateLessonPlanRequest$outboundSchema.parse(createLessonPlanRequest),
  );
}

export function createLessonPlanRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanRequest' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanStatus2$inboundSchema: z.ZodNativeEnum<
  typeof CreateLessonPlanStatus2
> = z.nativeEnum(CreateLessonPlanStatus2);

/** @internal */
export const CreateLessonPlanStatus2$outboundSchema: z.ZodNativeEnum<
  typeof CreateLessonPlanStatus2
> = CreateLessonPlanStatus2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanStatus2$ {
  /** @deprecated use `CreateLessonPlanStatus2$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanStatus2$inboundSchema;
  /** @deprecated use `CreateLessonPlanStatus2$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanStatus2$outboundSchema;
}

/** @internal */
export const CreateLessonPlanAcademicSession2$inboundSchema: z.ZodType<
  CreateLessonPlanAcademicSession2,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateLessonPlanAcademicSession2$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateLessonPlanAcademicSession2$outboundSchema: z.ZodType<
  CreateLessonPlanAcademicSession2$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanAcademicSession2
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanAcademicSession2$ {
  /** @deprecated use `CreateLessonPlanAcademicSession2$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanAcademicSession2$inboundSchema;
  /** @deprecated use `CreateLessonPlanAcademicSession2$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanAcademicSession2$outboundSchema;
  /** @deprecated use `CreateLessonPlanAcademicSession2$Outbound` instead. */
  export type Outbound = CreateLessonPlanAcademicSession2$Outbound;
}

export function createLessonPlanAcademicSession2ToJSON(
  createLessonPlanAcademicSession2: CreateLessonPlanAcademicSession2,
): string {
  return JSON.stringify(
    CreateLessonPlanAcademicSession2$outboundSchema.parse(
      createLessonPlanAcademicSession2,
    ),
  );
}

export function createLessonPlanAcademicSession2FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanAcademicSession2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanAcademicSession2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanAcademicSession2' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanOrg2$inboundSchema: z.ZodType<
  CreateLessonPlanOrg2,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateLessonPlanOrg2$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateLessonPlanOrg2$outboundSchema: z.ZodType<
  CreateLessonPlanOrg2$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanOrg2
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanOrg2$ {
  /** @deprecated use `CreateLessonPlanOrg2$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanOrg2$inboundSchema;
  /** @deprecated use `CreateLessonPlanOrg2$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanOrg2$outboundSchema;
  /** @deprecated use `CreateLessonPlanOrg2$Outbound` instead. */
  export type Outbound = CreateLessonPlanOrg2$Outbound;
}

export function createLessonPlanOrg2ToJSON(
  createLessonPlanOrg2: CreateLessonPlanOrg2,
): string {
  return JSON.stringify(
    CreateLessonPlanOrg2$outboundSchema.parse(createLessonPlanOrg2),
  );
}

export function createLessonPlanOrg2FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanOrg2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanOrg2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanOrg2' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanCourse2$inboundSchema: z.ZodType<
  CreateLessonPlanCourse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateLessonPlanStatus2$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => CreateLessonPlanAcademicSession2$inboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => CreateLessonPlanOrg2$inboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateLessonPlanCourse2$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?:
    | CreateLessonPlanAcademicSession2$Outbound
    | null
    | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: CreateLessonPlanOrg2$Outbound;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/** @internal */
export const CreateLessonPlanCourse2$outboundSchema: z.ZodType<
  CreateLessonPlanCourse2$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanCourse2
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateLessonPlanStatus2$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => CreateLessonPlanAcademicSession2$outboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => CreateLessonPlanOrg2$outboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanCourse2$ {
  /** @deprecated use `CreateLessonPlanCourse2$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanCourse2$inboundSchema;
  /** @deprecated use `CreateLessonPlanCourse2$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanCourse2$outboundSchema;
  /** @deprecated use `CreateLessonPlanCourse2$Outbound` instead. */
  export type Outbound = CreateLessonPlanCourse2$Outbound;
}

export function createLessonPlanCourse2ToJSON(
  createLessonPlanCourse2: CreateLessonPlanCourse2,
): string {
  return JSON.stringify(
    CreateLessonPlanCourse2$outboundSchema.parse(createLessonPlanCourse2),
  );
}

export function createLessonPlanCourse2FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanCourse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanCourse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanCourse2' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanLessonPlanLessonPlan2$inboundSchema: z.ZodType<
  CreateLessonPlanLessonPlanLessonPlan2,
  z.ZodTypeDef,
  unknown
> = z.object({
  course: z.lazy(() => CreateLessonPlanCourse2$inboundSchema),
  subComponents: z.array(components.LessonPlanTreeComponent$inboundSchema),
});

/** @internal */
export type CreateLessonPlanLessonPlanLessonPlan2$Outbound = {
  course: CreateLessonPlanCourse2$Outbound;
  subComponents: Array<components.LessonPlanTreeComponent$Outbound>;
};

/** @internal */
export const CreateLessonPlanLessonPlanLessonPlan2$outboundSchema: z.ZodType<
  CreateLessonPlanLessonPlanLessonPlan2$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanLessonPlanLessonPlan2
> = z.object({
  course: z.lazy(() => CreateLessonPlanCourse2$outboundSchema),
  subComponents: z.array(components.LessonPlanTreeComponent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanLessonPlanLessonPlan2$ {
  /** @deprecated use `CreateLessonPlanLessonPlanLessonPlan2$inboundSchema` instead. */
  export const inboundSchema =
    CreateLessonPlanLessonPlanLessonPlan2$inboundSchema;
  /** @deprecated use `CreateLessonPlanLessonPlanLessonPlan2$outboundSchema` instead. */
  export const outboundSchema =
    CreateLessonPlanLessonPlanLessonPlan2$outboundSchema;
  /** @deprecated use `CreateLessonPlanLessonPlanLessonPlan2$Outbound` instead. */
  export type Outbound = CreateLessonPlanLessonPlanLessonPlan2$Outbound;
}

export function createLessonPlanLessonPlanLessonPlan2ToJSON(
  createLessonPlanLessonPlanLessonPlan2: CreateLessonPlanLessonPlanLessonPlan2,
): string {
  return JSON.stringify(
    CreateLessonPlanLessonPlanLessonPlan2$outboundSchema.parse(
      createLessonPlanLessonPlanLessonPlan2,
    ),
  );
}

export function createLessonPlanLessonPlanLessonPlan2FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanLessonPlanLessonPlan2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateLessonPlanLessonPlanLessonPlan2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanLessonPlanLessonPlan2' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanLessonPlan2$inboundSchema: z.ZodType<
  CreateLessonPlanLessonPlan2,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonPlan: z.lazy(() => CreateLessonPlanLessonPlanLessonPlan2$inboundSchema),
});

/** @internal */
export type CreateLessonPlanLessonPlan2$Outbound = {
  lessonPlan: CreateLessonPlanLessonPlanLessonPlan2$Outbound;
};

/** @internal */
export const CreateLessonPlanLessonPlan2$outboundSchema: z.ZodType<
  CreateLessonPlanLessonPlan2$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanLessonPlan2
> = z.object({
  lessonPlan: z.lazy(() =>
    CreateLessonPlanLessonPlanLessonPlan2$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanLessonPlan2$ {
  /** @deprecated use `CreateLessonPlanLessonPlan2$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanLessonPlan2$inboundSchema;
  /** @deprecated use `CreateLessonPlanLessonPlan2$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanLessonPlan2$outboundSchema;
  /** @deprecated use `CreateLessonPlanLessonPlan2$Outbound` instead. */
  export type Outbound = CreateLessonPlanLessonPlan2$Outbound;
}

export function createLessonPlanLessonPlan2ToJSON(
  createLessonPlanLessonPlan2: CreateLessonPlanLessonPlan2,
): string {
  return JSON.stringify(
    CreateLessonPlanLessonPlan2$outboundSchema.parse(
      createLessonPlanLessonPlan2,
    ),
  );
}

export function createLessonPlanLessonPlan2FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanLessonPlan2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanLessonPlan2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanLessonPlan2' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanResponseBody2$inboundSchema: z.ZodType<
  CreateLessonPlanResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonPlan: z.lazy(() => CreateLessonPlanLessonPlan2$inboundSchema),
});

/** @internal */
export type CreateLessonPlanResponseBody2$Outbound = {
  lessonPlan: CreateLessonPlanLessonPlan2$Outbound;
};

/** @internal */
export const CreateLessonPlanResponseBody2$outboundSchema: z.ZodType<
  CreateLessonPlanResponseBody2$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanResponseBody2
> = z.object({
  lessonPlan: z.lazy(() => CreateLessonPlanLessonPlan2$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanResponseBody2$ {
  /** @deprecated use `CreateLessonPlanResponseBody2$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanResponseBody2$inboundSchema;
  /** @deprecated use `CreateLessonPlanResponseBody2$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanResponseBody2$outboundSchema;
  /** @deprecated use `CreateLessonPlanResponseBody2$Outbound` instead. */
  export type Outbound = CreateLessonPlanResponseBody2$Outbound;
}

export function createLessonPlanResponseBody2ToJSON(
  createLessonPlanResponseBody2: CreateLessonPlanResponseBody2,
): string {
  return JSON.stringify(
    CreateLessonPlanResponseBody2$outboundSchema.parse(
      createLessonPlanResponseBody2,
    ),
  );
}

export function createLessonPlanResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanResponseBody2' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanStatus1$inboundSchema: z.ZodNativeEnum<
  typeof CreateLessonPlanStatus1
> = z.nativeEnum(CreateLessonPlanStatus1);

/** @internal */
export const CreateLessonPlanStatus1$outboundSchema: z.ZodNativeEnum<
  typeof CreateLessonPlanStatus1
> = CreateLessonPlanStatus1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanStatus1$ {
  /** @deprecated use `CreateLessonPlanStatus1$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanStatus1$inboundSchema;
  /** @deprecated use `CreateLessonPlanStatus1$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanStatus1$outboundSchema;
}

/** @internal */
export const CreateLessonPlanAcademicSession1$inboundSchema: z.ZodType<
  CreateLessonPlanAcademicSession1,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateLessonPlanAcademicSession1$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateLessonPlanAcademicSession1$outboundSchema: z.ZodType<
  CreateLessonPlanAcademicSession1$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanAcademicSession1
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanAcademicSession1$ {
  /** @deprecated use `CreateLessonPlanAcademicSession1$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanAcademicSession1$inboundSchema;
  /** @deprecated use `CreateLessonPlanAcademicSession1$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanAcademicSession1$outboundSchema;
  /** @deprecated use `CreateLessonPlanAcademicSession1$Outbound` instead. */
  export type Outbound = CreateLessonPlanAcademicSession1$Outbound;
}

export function createLessonPlanAcademicSession1ToJSON(
  createLessonPlanAcademicSession1: CreateLessonPlanAcademicSession1,
): string {
  return JSON.stringify(
    CreateLessonPlanAcademicSession1$outboundSchema.parse(
      createLessonPlanAcademicSession1,
    ),
  );
}

export function createLessonPlanAcademicSession1FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanAcademicSession1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanAcademicSession1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanAcademicSession1' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanOrg1$inboundSchema: z.ZodType<
  CreateLessonPlanOrg1,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateLessonPlanOrg1$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateLessonPlanOrg1$outboundSchema: z.ZodType<
  CreateLessonPlanOrg1$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanOrg1
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanOrg1$ {
  /** @deprecated use `CreateLessonPlanOrg1$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanOrg1$inboundSchema;
  /** @deprecated use `CreateLessonPlanOrg1$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanOrg1$outboundSchema;
  /** @deprecated use `CreateLessonPlanOrg1$Outbound` instead. */
  export type Outbound = CreateLessonPlanOrg1$Outbound;
}

export function createLessonPlanOrg1ToJSON(
  createLessonPlanOrg1: CreateLessonPlanOrg1,
): string {
  return JSON.stringify(
    CreateLessonPlanOrg1$outboundSchema.parse(createLessonPlanOrg1),
  );
}

export function createLessonPlanOrg1FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanOrg1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanOrg1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanOrg1' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanCourse1$inboundSchema: z.ZodType<
  CreateLessonPlanCourse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateLessonPlanStatus1$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => CreateLessonPlanAcademicSession1$inboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => CreateLessonPlanOrg1$inboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateLessonPlanCourse1$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?:
    | CreateLessonPlanAcademicSession1$Outbound
    | null
    | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: CreateLessonPlanOrg1$Outbound;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/** @internal */
export const CreateLessonPlanCourse1$outboundSchema: z.ZodType<
  CreateLessonPlanCourse1$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanCourse1
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateLessonPlanStatus1$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => CreateLessonPlanAcademicSession1$outboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => CreateLessonPlanOrg1$outboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanCourse1$ {
  /** @deprecated use `CreateLessonPlanCourse1$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanCourse1$inboundSchema;
  /** @deprecated use `CreateLessonPlanCourse1$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanCourse1$outboundSchema;
  /** @deprecated use `CreateLessonPlanCourse1$Outbound` instead. */
  export type Outbound = CreateLessonPlanCourse1$Outbound;
}

export function createLessonPlanCourse1ToJSON(
  createLessonPlanCourse1: CreateLessonPlanCourse1,
): string {
  return JSON.stringify(
    CreateLessonPlanCourse1$outboundSchema.parse(createLessonPlanCourse1),
  );
}

export function createLessonPlanCourse1FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanCourse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanCourse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanCourse1' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanLessonPlanLessonPlan1$inboundSchema: z.ZodType<
  CreateLessonPlanLessonPlanLessonPlan1,
  z.ZodTypeDef,
  unknown
> = z.object({
  course: z.lazy(() => CreateLessonPlanCourse1$inboundSchema),
  subComponents: z.array(components.LessonPlanTreeComponent$inboundSchema),
});

/** @internal */
export type CreateLessonPlanLessonPlanLessonPlan1$Outbound = {
  course: CreateLessonPlanCourse1$Outbound;
  subComponents: Array<components.LessonPlanTreeComponent$Outbound>;
};

/** @internal */
export const CreateLessonPlanLessonPlanLessonPlan1$outboundSchema: z.ZodType<
  CreateLessonPlanLessonPlanLessonPlan1$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanLessonPlanLessonPlan1
> = z.object({
  course: z.lazy(() => CreateLessonPlanCourse1$outboundSchema),
  subComponents: z.array(components.LessonPlanTreeComponent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanLessonPlanLessonPlan1$ {
  /** @deprecated use `CreateLessonPlanLessonPlanLessonPlan1$inboundSchema` instead. */
  export const inboundSchema =
    CreateLessonPlanLessonPlanLessonPlan1$inboundSchema;
  /** @deprecated use `CreateLessonPlanLessonPlanLessonPlan1$outboundSchema` instead. */
  export const outboundSchema =
    CreateLessonPlanLessonPlanLessonPlan1$outboundSchema;
  /** @deprecated use `CreateLessonPlanLessonPlanLessonPlan1$Outbound` instead. */
  export type Outbound = CreateLessonPlanLessonPlanLessonPlan1$Outbound;
}

export function createLessonPlanLessonPlanLessonPlan1ToJSON(
  createLessonPlanLessonPlanLessonPlan1: CreateLessonPlanLessonPlanLessonPlan1,
): string {
  return JSON.stringify(
    CreateLessonPlanLessonPlanLessonPlan1$outboundSchema.parse(
      createLessonPlanLessonPlanLessonPlan1,
    ),
  );
}

export function createLessonPlanLessonPlanLessonPlan1FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanLessonPlanLessonPlan1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateLessonPlanLessonPlanLessonPlan1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanLessonPlanLessonPlan1' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanLessonPlan1$inboundSchema: z.ZodType<
  CreateLessonPlanLessonPlan1,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonPlan: z.lazy(() => CreateLessonPlanLessonPlanLessonPlan1$inboundSchema),
});

/** @internal */
export type CreateLessonPlanLessonPlan1$Outbound = {
  lessonPlan: CreateLessonPlanLessonPlanLessonPlan1$Outbound;
};

/** @internal */
export const CreateLessonPlanLessonPlan1$outboundSchema: z.ZodType<
  CreateLessonPlanLessonPlan1$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanLessonPlan1
> = z.object({
  lessonPlan: z.lazy(() =>
    CreateLessonPlanLessonPlanLessonPlan1$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanLessonPlan1$ {
  /** @deprecated use `CreateLessonPlanLessonPlan1$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanLessonPlan1$inboundSchema;
  /** @deprecated use `CreateLessonPlanLessonPlan1$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanLessonPlan1$outboundSchema;
  /** @deprecated use `CreateLessonPlanLessonPlan1$Outbound` instead. */
  export type Outbound = CreateLessonPlanLessonPlan1$Outbound;
}

export function createLessonPlanLessonPlan1ToJSON(
  createLessonPlanLessonPlan1: CreateLessonPlanLessonPlan1,
): string {
  return JSON.stringify(
    CreateLessonPlanLessonPlan1$outboundSchema.parse(
      createLessonPlanLessonPlan1,
    ),
  );
}

export function createLessonPlanLessonPlan1FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanLessonPlan1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanLessonPlan1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanLessonPlan1' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanResponseBody1$inboundSchema: z.ZodType<
  CreateLessonPlanResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonPlan: z.lazy(() => CreateLessonPlanLessonPlan1$inboundSchema),
});

/** @internal */
export type CreateLessonPlanResponseBody1$Outbound = {
  lessonPlan: CreateLessonPlanLessonPlan1$Outbound;
};

/** @internal */
export const CreateLessonPlanResponseBody1$outboundSchema: z.ZodType<
  CreateLessonPlanResponseBody1$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanResponseBody1
> = z.object({
  lessonPlan: z.lazy(() => CreateLessonPlanLessonPlan1$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanResponseBody1$ {
  /** @deprecated use `CreateLessonPlanResponseBody1$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanResponseBody1$inboundSchema;
  /** @deprecated use `CreateLessonPlanResponseBody1$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanResponseBody1$outboundSchema;
  /** @deprecated use `CreateLessonPlanResponseBody1$Outbound` instead. */
  export type Outbound = CreateLessonPlanResponseBody1$Outbound;
}

export function createLessonPlanResponseBody1ToJSON(
  createLessonPlanResponseBody1: CreateLessonPlanResponseBody1,
): string {
  return JSON.stringify(
    CreateLessonPlanResponseBody1$outboundSchema.parse(
      createLessonPlanResponseBody1,
    ),
  );
}

export function createLessonPlanResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanResponseBody1' from JSON`,
  );
}

/** @internal */
export const CreateLessonPlanResponse$inboundSchema: z.ZodType<
  CreateLessonPlanResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateLessonPlanResponseBody1$inboundSchema),
  z.lazy(() => CreateLessonPlanResponseBody2$inboundSchema),
]);

/** @internal */
export type CreateLessonPlanResponse$Outbound =
  | CreateLessonPlanResponseBody1$Outbound
  | CreateLessonPlanResponseBody2$Outbound;

/** @internal */
export const CreateLessonPlanResponse$outboundSchema: z.ZodType<
  CreateLessonPlanResponse$Outbound,
  z.ZodTypeDef,
  CreateLessonPlanResponse
> = z.union([
  z.lazy(() => CreateLessonPlanResponseBody1$outboundSchema),
  z.lazy(() => CreateLessonPlanResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLessonPlanResponse$ {
  /** @deprecated use `CreateLessonPlanResponse$inboundSchema` instead. */
  export const inboundSchema = CreateLessonPlanResponse$inboundSchema;
  /** @deprecated use `CreateLessonPlanResponse$outboundSchema` instead. */
  export const outboundSchema = CreateLessonPlanResponse$outboundSchema;
  /** @deprecated use `CreateLessonPlanResponse$Outbound` instead. */
  export type Outbound = CreateLessonPlanResponse$Outbound;
}

export function createLessonPlanResponseToJSON(
  createLessonPlanResponse: CreateLessonPlanResponse,
): string {
  return JSON.stringify(
    CreateLessonPlanResponse$outboundSchema.parse(createLessonPlanResponse),
  );
}

export function createLessonPlanResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateLessonPlanResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLessonPlanResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLessonPlanResponse' from JSON`,
  );
}
