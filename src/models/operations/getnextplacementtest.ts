/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetNextPlacementTestRequest = {
  /**
   * The sourcedId of the student
   */
  student: string;
  /**
   * The subject name
   */
  subject: string;
};

/**
 * Success
 */
export type GetNextPlacementTestResponse = {
  /**
   * Whether the student has exhausted all placement tests
   */
  exhaustedTests: boolean;
  /**
   * The grade level of the next placement test
   */
  gradeLevel: number | null;
  /**
   * The sourcedId of the next placement test (ComponentResource)
   */
  lesson: string | null;
  /**
   * Whether the student has completed the onboarding process for the subject
   */
  onboarded: boolean;
  /**
   * The number of placement tests available for the subject
   */
  availableTests: number;
};

/** @internal */
export const GetNextPlacementTestRequest$inboundSchema: z.ZodType<
  GetNextPlacementTestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  subject: z.string(),
});

/** @internal */
export type GetNextPlacementTestRequest$Outbound = {
  student: string;
  subject: string;
};

/** @internal */
export const GetNextPlacementTestRequest$outboundSchema: z.ZodType<
  GetNextPlacementTestRequest$Outbound,
  z.ZodTypeDef,
  GetNextPlacementTestRequest
> = z.object({
  student: z.string(),
  subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextPlacementTestRequest$ {
  /** @deprecated use `GetNextPlacementTestRequest$inboundSchema` instead. */
  export const inboundSchema = GetNextPlacementTestRequest$inboundSchema;
  /** @deprecated use `GetNextPlacementTestRequest$outboundSchema` instead. */
  export const outboundSchema = GetNextPlacementTestRequest$outboundSchema;
  /** @deprecated use `GetNextPlacementTestRequest$Outbound` instead. */
  export type Outbound = GetNextPlacementTestRequest$Outbound;
}

export function getNextPlacementTestRequestToJSON(
  getNextPlacementTestRequest: GetNextPlacementTestRequest,
): string {
  return JSON.stringify(
    GetNextPlacementTestRequest$outboundSchema.parse(
      getNextPlacementTestRequest,
    ),
  );
}

export function getNextPlacementTestRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetNextPlacementTestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextPlacementTestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextPlacementTestRequest' from JSON`,
  );
}

/** @internal */
export const GetNextPlacementTestResponse$inboundSchema: z.ZodType<
  GetNextPlacementTestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  exhaustedTests: z.boolean(),
  gradeLevel: z.nullable(z.number()),
  lesson: z.nullable(z.string()),
  onboarded: z.boolean(),
  availableTests: z.number(),
});

/** @internal */
export type GetNextPlacementTestResponse$Outbound = {
  exhaustedTests: boolean;
  gradeLevel: number | null;
  lesson: string | null;
  onboarded: boolean;
  availableTests: number;
};

/** @internal */
export const GetNextPlacementTestResponse$outboundSchema: z.ZodType<
  GetNextPlacementTestResponse$Outbound,
  z.ZodTypeDef,
  GetNextPlacementTestResponse
> = z.object({
  exhaustedTests: z.boolean(),
  gradeLevel: z.nullable(z.number()),
  lesson: z.nullable(z.string()),
  onboarded: z.boolean(),
  availableTests: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextPlacementTestResponse$ {
  /** @deprecated use `GetNextPlacementTestResponse$inboundSchema` instead. */
  export const inboundSchema = GetNextPlacementTestResponse$inboundSchema;
  /** @deprecated use `GetNextPlacementTestResponse$outboundSchema` instead. */
  export const outboundSchema = GetNextPlacementTestResponse$outboundSchema;
  /** @deprecated use `GetNextPlacementTestResponse$Outbound` instead. */
  export type Outbound = GetNextPlacementTestResponse$Outbound;
}

export function getNextPlacementTestResponseToJSON(
  getNextPlacementTestResponse: GetNextPlacementTestResponse,
): string {
  return JSON.stringify(
    GetNextPlacementTestResponse$outboundSchema.parse(
      getNextPlacementTestResponse,
    ),
  );
}

export function getNextPlacementTestResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetNextPlacementTestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextPlacementTestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextPlacementTestResponse' from JSON`,
  );
}
