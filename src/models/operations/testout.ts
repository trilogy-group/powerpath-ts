/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestOutRequest = {
  /**
   * The sourcedId of the student to retrieve the testOut for
   */
  student: string;
  /**
   * The sourcedId of the Course to retrieve the testOut from
   */
  course: string;
};

/** @internal */
export const TestOutRequest$inboundSchema: z.ZodType<
  TestOutRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  course: z.string(),
});

/** @internal */
export type TestOutRequest$Outbound = {
  student: string;
  course: string;
};

/** @internal */
export const TestOutRequest$outboundSchema: z.ZodType<
  TestOutRequest$Outbound,
  z.ZodTypeDef,
  TestOutRequest
> = z.object({
  student: z.string(),
  course: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestOutRequest$ {
  /** @deprecated use `TestOutRequest$inboundSchema` instead. */
  export const inboundSchema = TestOutRequest$inboundSchema;
  /** @deprecated use `TestOutRequest$outboundSchema` instead. */
  export const outboundSchema = TestOutRequest$outboundSchema;
  /** @deprecated use `TestOutRequest$Outbound` instead. */
  export type Outbound = TestOutRequest$Outbound;
}

export function testOutRequestToJSON(testOutRequest: TestOutRequest): string {
  return JSON.stringify(TestOutRequest$outboundSchema.parse(testOutRequest));
}

export function testOutRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestOutRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestOutRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestOutRequest' from JSON`,
  );
}
