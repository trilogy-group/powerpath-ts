/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AttachComponentRequestBody = {
  /**
   * The Sourced ID of the Course Component to attach to the Lesson Plan
   */
  componentId: string | null;
  /**
   * The order of the Lesson Plan Item
   */
  order: number;
  /**
   * The Sourced ID of the parent Lesson Plan Item. It must also reference a Component.
   */
  parentId?: string | null | undefined;
  /**
   * Whether the Lesson Plan Item is skipped for this user
   */
  skipped?: boolean | null | undefined;
};

export type AttachComponentRequest = {
  /**
   * Lesson plan ID
   */
  lessonPlanId: string;
  requestBody?: AttachComponentRequestBody | undefined;
};

export const AttachComponentType = {
  Component: "component",
  Resource: "resource",
} as const;
export type AttachComponentType = ClosedEnum<typeof AttachComponentType>;

export type AttachComponentLessonPlanItem = {
  id?: string | undefined;
  lessonPlanId: string;
  type: AttachComponentType;
  componentId?: string | null | undefined;
  componentResourceId?: string | null | undefined;
  order: number;
  parentId?: string | null | undefined;
  skipped?: boolean | undefined;
};

/**
 * Component attached
 */
export type AttachComponentResponse = {
  lessonPlanItem: AttachComponentLessonPlanItem;
};

/** @internal */
export const AttachComponentRequestBody$inboundSchema: z.ZodType<
  AttachComponentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  componentId: z.nullable(z.string()),
  order: z.number(),
  parentId: z.nullable(z.string()).optional(),
  skipped: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type AttachComponentRequestBody$Outbound = {
  componentId: string | null;
  order: number;
  parentId?: string | null | undefined;
  skipped: boolean | null;
};

/** @internal */
export const AttachComponentRequestBody$outboundSchema: z.ZodType<
  AttachComponentRequestBody$Outbound,
  z.ZodTypeDef,
  AttachComponentRequestBody
> = z.object({
  componentId: z.nullable(z.string()),
  order: z.number(),
  parentId: z.nullable(z.string()).optional(),
  skipped: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachComponentRequestBody$ {
  /** @deprecated use `AttachComponentRequestBody$inboundSchema` instead. */
  export const inboundSchema = AttachComponentRequestBody$inboundSchema;
  /** @deprecated use `AttachComponentRequestBody$outboundSchema` instead. */
  export const outboundSchema = AttachComponentRequestBody$outboundSchema;
  /** @deprecated use `AttachComponentRequestBody$Outbound` instead. */
  export type Outbound = AttachComponentRequestBody$Outbound;
}

export function attachComponentRequestBodyToJSON(
  attachComponentRequestBody: AttachComponentRequestBody,
): string {
  return JSON.stringify(
    AttachComponentRequestBody$outboundSchema.parse(attachComponentRequestBody),
  );
}

export function attachComponentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AttachComponentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachComponentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachComponentRequestBody' from JSON`,
  );
}

/** @internal */
export const AttachComponentRequest$inboundSchema: z.ZodType<
  AttachComponentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonPlanId: z.string(),
  RequestBody: z.lazy(() => AttachComponentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AttachComponentRequest$Outbound = {
  lessonPlanId: string;
  RequestBody?: AttachComponentRequestBody$Outbound | undefined;
};

/** @internal */
export const AttachComponentRequest$outboundSchema: z.ZodType<
  AttachComponentRequest$Outbound,
  z.ZodTypeDef,
  AttachComponentRequest
> = z.object({
  lessonPlanId: z.string(),
  requestBody: z.lazy(() => AttachComponentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachComponentRequest$ {
  /** @deprecated use `AttachComponentRequest$inboundSchema` instead. */
  export const inboundSchema = AttachComponentRequest$inboundSchema;
  /** @deprecated use `AttachComponentRequest$outboundSchema` instead. */
  export const outboundSchema = AttachComponentRequest$outboundSchema;
  /** @deprecated use `AttachComponentRequest$Outbound` instead. */
  export type Outbound = AttachComponentRequest$Outbound;
}

export function attachComponentRequestToJSON(
  attachComponentRequest: AttachComponentRequest,
): string {
  return JSON.stringify(
    AttachComponentRequest$outboundSchema.parse(attachComponentRequest),
  );
}

export function attachComponentRequestFromJSON(
  jsonString: string,
): SafeParseResult<AttachComponentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachComponentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachComponentRequest' from JSON`,
  );
}

/** @internal */
export const AttachComponentType$inboundSchema: z.ZodNativeEnum<
  typeof AttachComponentType
> = z.nativeEnum(AttachComponentType);

/** @internal */
export const AttachComponentType$outboundSchema: z.ZodNativeEnum<
  typeof AttachComponentType
> = AttachComponentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachComponentType$ {
  /** @deprecated use `AttachComponentType$inboundSchema` instead. */
  export const inboundSchema = AttachComponentType$inboundSchema;
  /** @deprecated use `AttachComponentType$outboundSchema` instead. */
  export const outboundSchema = AttachComponentType$outboundSchema;
}

/** @internal */
export const AttachComponentLessonPlanItem$inboundSchema: z.ZodType<
  AttachComponentLessonPlanItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  lessonPlanId: z.string(),
  type: AttachComponentType$inboundSchema,
  componentId: z.nullable(z.string()).optional(),
  componentResourceId: z.nullable(z.string()).optional(),
  order: z.number(),
  parentId: z.nullable(z.string()).optional(),
  skipped: z.boolean().default(false),
});

/** @internal */
export type AttachComponentLessonPlanItem$Outbound = {
  id?: string | undefined;
  lessonPlanId: string;
  type: string;
  componentId?: string | null | undefined;
  componentResourceId?: string | null | undefined;
  order: number;
  parentId?: string | null | undefined;
  skipped: boolean;
};

/** @internal */
export const AttachComponentLessonPlanItem$outboundSchema: z.ZodType<
  AttachComponentLessonPlanItem$Outbound,
  z.ZodTypeDef,
  AttachComponentLessonPlanItem
> = z.object({
  id: z.string().optional(),
  lessonPlanId: z.string(),
  type: AttachComponentType$outboundSchema,
  componentId: z.nullable(z.string()).optional(),
  componentResourceId: z.nullable(z.string()).optional(),
  order: z.number(),
  parentId: z.nullable(z.string()).optional(),
  skipped: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachComponentLessonPlanItem$ {
  /** @deprecated use `AttachComponentLessonPlanItem$inboundSchema` instead. */
  export const inboundSchema = AttachComponentLessonPlanItem$inboundSchema;
  /** @deprecated use `AttachComponentLessonPlanItem$outboundSchema` instead. */
  export const outboundSchema = AttachComponentLessonPlanItem$outboundSchema;
  /** @deprecated use `AttachComponentLessonPlanItem$Outbound` instead. */
  export type Outbound = AttachComponentLessonPlanItem$Outbound;
}

export function attachComponentLessonPlanItemToJSON(
  attachComponentLessonPlanItem: AttachComponentLessonPlanItem,
): string {
  return JSON.stringify(
    AttachComponentLessonPlanItem$outboundSchema.parse(
      attachComponentLessonPlanItem,
    ),
  );
}

export function attachComponentLessonPlanItemFromJSON(
  jsonString: string,
): SafeParseResult<AttachComponentLessonPlanItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachComponentLessonPlanItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachComponentLessonPlanItem' from JSON`,
  );
}

/** @internal */
export const AttachComponentResponse$inboundSchema: z.ZodType<
  AttachComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonPlanItem: z.lazy(() => AttachComponentLessonPlanItem$inboundSchema),
});

/** @internal */
export type AttachComponentResponse$Outbound = {
  lessonPlanItem: AttachComponentLessonPlanItem$Outbound;
};

/** @internal */
export const AttachComponentResponse$outboundSchema: z.ZodType<
  AttachComponentResponse$Outbound,
  z.ZodTypeDef,
  AttachComponentResponse
> = z.object({
  lessonPlanItem: z.lazy(() => AttachComponentLessonPlanItem$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachComponentResponse$ {
  /** @deprecated use `AttachComponentResponse$inboundSchema` instead. */
  export const inboundSchema = AttachComponentResponse$inboundSchema;
  /** @deprecated use `AttachComponentResponse$outboundSchema` instead. */
  export const outboundSchema = AttachComponentResponse$outboundSchema;
  /** @deprecated use `AttachComponentResponse$Outbound` instead. */
  export type Outbound = AttachComponentResponse$Outbound;
}

export function attachComponentResponseToJSON(
  attachComponentResponse: AttachComponentResponse,
): string {
  return JSON.stringify(
    AttachComponentResponse$outboundSchema.parse(attachComponentResponse),
  );
}

export function attachComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<AttachComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachComponentResponse' from JSON`,
  );
}
