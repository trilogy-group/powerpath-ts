/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCourseProgressRequest = {
  /**
   * Course ID
   */
  courseId: string;
  /**
   * Student ID
   */
  studentId: string;
};

export const GetCourseProgressStatus2 = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetCourseProgressStatus2 = ClosedEnum<
  typeof GetCourseProgressStatus2
>;

export type ScoreScale2 = {
  sourcedId: string;
};

export const GetCourseProgressScoreStatus2 = {
  Exempt: "exempt",
  FullyGraded: "fully graded",
  NotSubmitted: "not submitted",
  PartiallyGraded: "partially graded",
  Submitted: "submitted",
} as const;
export type GetCourseProgressScoreStatus2 = ClosedEnum<
  typeof GetCourseProgressScoreStatus2
>;

export type GetCourseProgressLearningObjectiveResult2 = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

export type GetCourseProgressLearningObjectiveSet2 = {
  source: string;
  learningObjectiveResults: Array<GetCourseProgressLearningObjectiveResult2>;
};

/**
 * Represents an assessment result.
 */
export type GetCourseProgressResult2 = {
  sourcedId?: string | undefined;
  status: GetCourseProgressStatus2;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: Date;
  scoreScale?: ScoreScale2 | null | undefined;
  scorePercentile?: number | null | undefined;
  scoreStatus: GetCourseProgressScoreStatus2;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<GetCourseProgressLearningObjectiveSet2>
    | null
    | undefined;
  inProgress?: string | null | undefined;
  incomplete?: string | null | undefined;
  late?: string | null | undefined;
  missing?: string | null | undefined;
};

export type LineItemResource = {
  type?: "resource" | undefined;
  assessmentLineItemSourcedId: string;
  courseComponentResourceSourcedId: string;
  title: string;
  /**
   * Assessment results for the resource and student
   */
  results: Array<GetCourseProgressResult2>;
};

export const GetCourseProgressStatus1 = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetCourseProgressStatus1 = ClosedEnum<
  typeof GetCourseProgressStatus1
>;

export type ScoreScale1 = {
  sourcedId: string;
};

export const GetCourseProgressScoreStatus1 = {
  Exempt: "exempt",
  FullyGraded: "fully graded",
  NotSubmitted: "not submitted",
  PartiallyGraded: "partially graded",
  Submitted: "submitted",
} as const;
export type GetCourseProgressScoreStatus1 = ClosedEnum<
  typeof GetCourseProgressScoreStatus1
>;

export type GetCourseProgressLearningObjectiveResult1 = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

export type GetCourseProgressLearningObjectiveSet1 = {
  source: string;
  learningObjectiveResults: Array<GetCourseProgressLearningObjectiveResult1>;
};

/**
 * Represents an assessment result.
 */
export type GetCourseProgressResult1 = {
  sourcedId?: string | undefined;
  status: GetCourseProgressStatus1;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: Date;
  scoreScale?: ScoreScale1 | null | undefined;
  scorePercentile?: number | null | undefined;
  scoreStatus: GetCourseProgressScoreStatus1;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<GetCourseProgressLearningObjectiveSet1>
    | null
    | undefined;
  inProgress?: string | null | undefined;
  incomplete?: string | null | undefined;
  late?: string | null | undefined;
  missing?: string | null | undefined;
};

export type LineItemComponent = {
  type?: "component" | undefined;
  assessmentLineItemSourcedId: string;
  courseComponentSourcedId: string;
  title: string;
  /**
   * Assessment results for the component and student
   */
  results: Array<GetCourseProgressResult1>;
};

export type LineItem = LineItemComponent | LineItemResource;

/**
 * Course progress
 */
export type GetCourseProgressResponse = {
  /**
   * Assessment line items for the course and student
   */
  lineItems: Array<LineItemComponent | LineItemResource>;
};

/** @internal */
export const GetCourseProgressRequest$inboundSchema: z.ZodType<
  GetCourseProgressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseId: z.string(),
  studentId: z.string(),
});

/** @internal */
export type GetCourseProgressRequest$Outbound = {
  courseId: string;
  studentId: string;
};

/** @internal */
export const GetCourseProgressRequest$outboundSchema: z.ZodType<
  GetCourseProgressRequest$Outbound,
  z.ZodTypeDef,
  GetCourseProgressRequest
> = z.object({
  courseId: z.string(),
  studentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressRequest$ {
  /** @deprecated use `GetCourseProgressRequest$inboundSchema` instead. */
  export const inboundSchema = GetCourseProgressRequest$inboundSchema;
  /** @deprecated use `GetCourseProgressRequest$outboundSchema` instead. */
  export const outboundSchema = GetCourseProgressRequest$outboundSchema;
  /** @deprecated use `GetCourseProgressRequest$Outbound` instead. */
  export type Outbound = GetCourseProgressRequest$Outbound;
}

export function getCourseProgressRequestToJSON(
  getCourseProgressRequest: GetCourseProgressRequest,
): string {
  return JSON.stringify(
    GetCourseProgressRequest$outboundSchema.parse(getCourseProgressRequest),
  );
}

export function getCourseProgressRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCourseProgressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseProgressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseProgressRequest' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressStatus2$inboundSchema: z.ZodNativeEnum<
  typeof GetCourseProgressStatus2
> = z.nativeEnum(GetCourseProgressStatus2);

/** @internal */
export const GetCourseProgressStatus2$outboundSchema: z.ZodNativeEnum<
  typeof GetCourseProgressStatus2
> = GetCourseProgressStatus2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressStatus2$ {
  /** @deprecated use `GetCourseProgressStatus2$inboundSchema` instead. */
  export const inboundSchema = GetCourseProgressStatus2$inboundSchema;
  /** @deprecated use `GetCourseProgressStatus2$outboundSchema` instead. */
  export const outboundSchema = GetCourseProgressStatus2$outboundSchema;
}

/** @internal */
export const ScoreScale2$inboundSchema: z.ZodType<
  ScoreScale2,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type ScoreScale2$Outbound = {
  sourcedId: string;
};

/** @internal */
export const ScoreScale2$outboundSchema: z.ZodType<
  ScoreScale2$Outbound,
  z.ZodTypeDef,
  ScoreScale2
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScoreScale2$ {
  /** @deprecated use `ScoreScale2$inboundSchema` instead. */
  export const inboundSchema = ScoreScale2$inboundSchema;
  /** @deprecated use `ScoreScale2$outboundSchema` instead. */
  export const outboundSchema = ScoreScale2$outboundSchema;
  /** @deprecated use `ScoreScale2$Outbound` instead. */
  export type Outbound = ScoreScale2$Outbound;
}

export function scoreScale2ToJSON(scoreScale2: ScoreScale2): string {
  return JSON.stringify(ScoreScale2$outboundSchema.parse(scoreScale2));
}

export function scoreScale2FromJSON(
  jsonString: string,
): SafeParseResult<ScoreScale2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScoreScale2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScoreScale2' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressScoreStatus2$inboundSchema: z.ZodNativeEnum<
  typeof GetCourseProgressScoreStatus2
> = z.nativeEnum(GetCourseProgressScoreStatus2);

/** @internal */
export const GetCourseProgressScoreStatus2$outboundSchema: z.ZodNativeEnum<
  typeof GetCourseProgressScoreStatus2
> = GetCourseProgressScoreStatus2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressScoreStatus2$ {
  /** @deprecated use `GetCourseProgressScoreStatus2$inboundSchema` instead. */
  export const inboundSchema = GetCourseProgressScoreStatus2$inboundSchema;
  /** @deprecated use `GetCourseProgressScoreStatus2$outboundSchema` instead. */
  export const outboundSchema = GetCourseProgressScoreStatus2$outboundSchema;
}

/** @internal */
export const GetCourseProgressLearningObjectiveResult2$inboundSchema: z.ZodType<
  GetCourseProgressLearningObjectiveResult2,
  z.ZodTypeDef,
  unknown
> = z.object({
  learningObjectiveId: z.string(),
  score: z.number().optional(),
  textScore: z.string().optional(),
});

/** @internal */
export type GetCourseProgressLearningObjectiveResult2$Outbound = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

/** @internal */
export const GetCourseProgressLearningObjectiveResult2$outboundSchema:
  z.ZodType<
    GetCourseProgressLearningObjectiveResult2$Outbound,
    z.ZodTypeDef,
    GetCourseProgressLearningObjectiveResult2
  > = z.object({
    learningObjectiveId: z.string(),
    score: z.number().optional(),
    textScore: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressLearningObjectiveResult2$ {
  /** @deprecated use `GetCourseProgressLearningObjectiveResult2$inboundSchema` instead. */
  export const inboundSchema =
    GetCourseProgressLearningObjectiveResult2$inboundSchema;
  /** @deprecated use `GetCourseProgressLearningObjectiveResult2$outboundSchema` instead. */
  export const outboundSchema =
    GetCourseProgressLearningObjectiveResult2$outboundSchema;
  /** @deprecated use `GetCourseProgressLearningObjectiveResult2$Outbound` instead. */
  export type Outbound = GetCourseProgressLearningObjectiveResult2$Outbound;
}

export function getCourseProgressLearningObjectiveResult2ToJSON(
  getCourseProgressLearningObjectiveResult2:
    GetCourseProgressLearningObjectiveResult2,
): string {
  return JSON.stringify(
    GetCourseProgressLearningObjectiveResult2$outboundSchema.parse(
      getCourseProgressLearningObjectiveResult2,
    ),
  );
}

export function getCourseProgressLearningObjectiveResult2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetCourseProgressLearningObjectiveResult2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCourseProgressLearningObjectiveResult2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCourseProgressLearningObjectiveResult2' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressLearningObjectiveSet2$inboundSchema: z.ZodType<
  GetCourseProgressLearningObjectiveSet2,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  learningObjectiveResults: z.array(
    z.lazy(() => GetCourseProgressLearningObjectiveResult2$inboundSchema),
  ),
});

/** @internal */
export type GetCourseProgressLearningObjectiveSet2$Outbound = {
  source: string;
  learningObjectiveResults: Array<
    GetCourseProgressLearningObjectiveResult2$Outbound
  >;
};

/** @internal */
export const GetCourseProgressLearningObjectiveSet2$outboundSchema: z.ZodType<
  GetCourseProgressLearningObjectiveSet2$Outbound,
  z.ZodTypeDef,
  GetCourseProgressLearningObjectiveSet2
> = z.object({
  source: z.string(),
  learningObjectiveResults: z.array(
    z.lazy(() => GetCourseProgressLearningObjectiveResult2$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressLearningObjectiveSet2$ {
  /** @deprecated use `GetCourseProgressLearningObjectiveSet2$inboundSchema` instead. */
  export const inboundSchema =
    GetCourseProgressLearningObjectiveSet2$inboundSchema;
  /** @deprecated use `GetCourseProgressLearningObjectiveSet2$outboundSchema` instead. */
  export const outboundSchema =
    GetCourseProgressLearningObjectiveSet2$outboundSchema;
  /** @deprecated use `GetCourseProgressLearningObjectiveSet2$Outbound` instead. */
  export type Outbound = GetCourseProgressLearningObjectiveSet2$Outbound;
}

export function getCourseProgressLearningObjectiveSet2ToJSON(
  getCourseProgressLearningObjectiveSet2:
    GetCourseProgressLearningObjectiveSet2,
): string {
  return JSON.stringify(
    GetCourseProgressLearningObjectiveSet2$outboundSchema.parse(
      getCourseProgressLearningObjectiveSet2,
    ),
  );
}

export function getCourseProgressLearningObjectiveSet2FromJSON(
  jsonString: string,
): SafeParseResult<GetCourseProgressLearningObjectiveSet2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCourseProgressLearningObjectiveSet2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseProgressLearningObjectiveSet2' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressResult2$inboundSchema: z.ZodType<
  GetCourseProgressResult2,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: GetCourseProgressStatus2$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  scoreScale: z.nullable(z.lazy(() => ScoreScale2$inboundSchema)).optional(),
  scorePercentile: z.nullable(z.number()).optional(),
  scoreStatus: GetCourseProgressScoreStatus2$inboundSchema,
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() => GetCourseProgressLearningObjectiveSet2$inboundSchema)),
  ).optional(),
  inProgress: z.nullable(z.string()).optional(),
  incomplete: z.nullable(z.string()).optional(),
  late: z.nullable(z.string()).optional(),
  missing: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetCourseProgressResult2$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: string;
  scoreScale?: ScoreScale2$Outbound | null | undefined;
  scorePercentile?: number | null | undefined;
  scoreStatus: string;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<GetCourseProgressLearningObjectiveSet2$Outbound>
    | null
    | undefined;
  inProgress?: string | null | undefined;
  incomplete?: string | null | undefined;
  late?: string | null | undefined;
  missing?: string | null | undefined;
};

/** @internal */
export const GetCourseProgressResult2$outboundSchema: z.ZodType<
  GetCourseProgressResult2$Outbound,
  z.ZodTypeDef,
  GetCourseProgressResult2
> = z.object({
  sourcedId: z.string().optional(),
  status: GetCourseProgressStatus2$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.date().transform(v => v.toISOString()),
  scoreScale: z.nullable(z.lazy(() => ScoreScale2$outboundSchema)).optional(),
  scorePercentile: z.nullable(z.number()).optional(),
  scoreStatus: GetCourseProgressScoreStatus2$outboundSchema,
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(
      z.lazy(() => GetCourseProgressLearningObjectiveSet2$outboundSchema),
    ),
  ).optional(),
  inProgress: z.nullable(z.string()).optional(),
  incomplete: z.nullable(z.string()).optional(),
  late: z.nullable(z.string()).optional(),
  missing: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressResult2$ {
  /** @deprecated use `GetCourseProgressResult2$inboundSchema` instead. */
  export const inboundSchema = GetCourseProgressResult2$inboundSchema;
  /** @deprecated use `GetCourseProgressResult2$outboundSchema` instead. */
  export const outboundSchema = GetCourseProgressResult2$outboundSchema;
  /** @deprecated use `GetCourseProgressResult2$Outbound` instead. */
  export type Outbound = GetCourseProgressResult2$Outbound;
}

export function getCourseProgressResult2ToJSON(
  getCourseProgressResult2: GetCourseProgressResult2,
): string {
  return JSON.stringify(
    GetCourseProgressResult2$outboundSchema.parse(getCourseProgressResult2),
  );
}

export function getCourseProgressResult2FromJSON(
  jsonString: string,
): SafeParseResult<GetCourseProgressResult2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseProgressResult2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseProgressResult2' from JSON`,
  );
}

/** @internal */
export const LineItemResource$inboundSchema: z.ZodType<
  LineItemResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("resource").default("resource").optional(),
  assessmentLineItemSourcedId: z.string(),
  courseComponentResourceSourcedId: z.string(),
  title: z.string(),
  results: z.array(z.lazy(() => GetCourseProgressResult2$inboundSchema)),
});

/** @internal */
export type LineItemResource$Outbound = {
  type: "resource";
  assessmentLineItemSourcedId: string;
  courseComponentResourceSourcedId: string;
  title: string;
  results: Array<GetCourseProgressResult2$Outbound>;
};

/** @internal */
export const LineItemResource$outboundSchema: z.ZodType<
  LineItemResource$Outbound,
  z.ZodTypeDef,
  LineItemResource
> = z.object({
  type: z.literal("resource").default("resource" as const),
  assessmentLineItemSourcedId: z.string(),
  courseComponentResourceSourcedId: z.string(),
  title: z.string(),
  results: z.array(z.lazy(() => GetCourseProgressResult2$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemResource$ {
  /** @deprecated use `LineItemResource$inboundSchema` instead. */
  export const inboundSchema = LineItemResource$inboundSchema;
  /** @deprecated use `LineItemResource$outboundSchema` instead. */
  export const outboundSchema = LineItemResource$outboundSchema;
  /** @deprecated use `LineItemResource$Outbound` instead. */
  export type Outbound = LineItemResource$Outbound;
}

export function lineItemResourceToJSON(
  lineItemResource: LineItemResource,
): string {
  return JSON.stringify(
    LineItemResource$outboundSchema.parse(lineItemResource),
  );
}

export function lineItemResourceFromJSON(
  jsonString: string,
): SafeParseResult<LineItemResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemResource' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressStatus1$inboundSchema: z.ZodNativeEnum<
  typeof GetCourseProgressStatus1
> = z.nativeEnum(GetCourseProgressStatus1);

/** @internal */
export const GetCourseProgressStatus1$outboundSchema: z.ZodNativeEnum<
  typeof GetCourseProgressStatus1
> = GetCourseProgressStatus1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressStatus1$ {
  /** @deprecated use `GetCourseProgressStatus1$inboundSchema` instead. */
  export const inboundSchema = GetCourseProgressStatus1$inboundSchema;
  /** @deprecated use `GetCourseProgressStatus1$outboundSchema` instead. */
  export const outboundSchema = GetCourseProgressStatus1$outboundSchema;
}

/** @internal */
export const ScoreScale1$inboundSchema: z.ZodType<
  ScoreScale1,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type ScoreScale1$Outbound = {
  sourcedId: string;
};

/** @internal */
export const ScoreScale1$outboundSchema: z.ZodType<
  ScoreScale1$Outbound,
  z.ZodTypeDef,
  ScoreScale1
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScoreScale1$ {
  /** @deprecated use `ScoreScale1$inboundSchema` instead. */
  export const inboundSchema = ScoreScale1$inboundSchema;
  /** @deprecated use `ScoreScale1$outboundSchema` instead. */
  export const outboundSchema = ScoreScale1$outboundSchema;
  /** @deprecated use `ScoreScale1$Outbound` instead. */
  export type Outbound = ScoreScale1$Outbound;
}

export function scoreScale1ToJSON(scoreScale1: ScoreScale1): string {
  return JSON.stringify(ScoreScale1$outboundSchema.parse(scoreScale1));
}

export function scoreScale1FromJSON(
  jsonString: string,
): SafeParseResult<ScoreScale1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScoreScale1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScoreScale1' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressScoreStatus1$inboundSchema: z.ZodNativeEnum<
  typeof GetCourseProgressScoreStatus1
> = z.nativeEnum(GetCourseProgressScoreStatus1);

/** @internal */
export const GetCourseProgressScoreStatus1$outboundSchema: z.ZodNativeEnum<
  typeof GetCourseProgressScoreStatus1
> = GetCourseProgressScoreStatus1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressScoreStatus1$ {
  /** @deprecated use `GetCourseProgressScoreStatus1$inboundSchema` instead. */
  export const inboundSchema = GetCourseProgressScoreStatus1$inboundSchema;
  /** @deprecated use `GetCourseProgressScoreStatus1$outboundSchema` instead. */
  export const outboundSchema = GetCourseProgressScoreStatus1$outboundSchema;
}

/** @internal */
export const GetCourseProgressLearningObjectiveResult1$inboundSchema: z.ZodType<
  GetCourseProgressLearningObjectiveResult1,
  z.ZodTypeDef,
  unknown
> = z.object({
  learningObjectiveId: z.string(),
  score: z.number().optional(),
  textScore: z.string().optional(),
});

/** @internal */
export type GetCourseProgressLearningObjectiveResult1$Outbound = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

/** @internal */
export const GetCourseProgressLearningObjectiveResult1$outboundSchema:
  z.ZodType<
    GetCourseProgressLearningObjectiveResult1$Outbound,
    z.ZodTypeDef,
    GetCourseProgressLearningObjectiveResult1
  > = z.object({
    learningObjectiveId: z.string(),
    score: z.number().optional(),
    textScore: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressLearningObjectiveResult1$ {
  /** @deprecated use `GetCourseProgressLearningObjectiveResult1$inboundSchema` instead. */
  export const inboundSchema =
    GetCourseProgressLearningObjectiveResult1$inboundSchema;
  /** @deprecated use `GetCourseProgressLearningObjectiveResult1$outboundSchema` instead. */
  export const outboundSchema =
    GetCourseProgressLearningObjectiveResult1$outboundSchema;
  /** @deprecated use `GetCourseProgressLearningObjectiveResult1$Outbound` instead. */
  export type Outbound = GetCourseProgressLearningObjectiveResult1$Outbound;
}

export function getCourseProgressLearningObjectiveResult1ToJSON(
  getCourseProgressLearningObjectiveResult1:
    GetCourseProgressLearningObjectiveResult1,
): string {
  return JSON.stringify(
    GetCourseProgressLearningObjectiveResult1$outboundSchema.parse(
      getCourseProgressLearningObjectiveResult1,
    ),
  );
}

export function getCourseProgressLearningObjectiveResult1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetCourseProgressLearningObjectiveResult1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCourseProgressLearningObjectiveResult1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCourseProgressLearningObjectiveResult1' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressLearningObjectiveSet1$inboundSchema: z.ZodType<
  GetCourseProgressLearningObjectiveSet1,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  learningObjectiveResults: z.array(
    z.lazy(() => GetCourseProgressLearningObjectiveResult1$inboundSchema),
  ),
});

/** @internal */
export type GetCourseProgressLearningObjectiveSet1$Outbound = {
  source: string;
  learningObjectiveResults: Array<
    GetCourseProgressLearningObjectiveResult1$Outbound
  >;
};

/** @internal */
export const GetCourseProgressLearningObjectiveSet1$outboundSchema: z.ZodType<
  GetCourseProgressLearningObjectiveSet1$Outbound,
  z.ZodTypeDef,
  GetCourseProgressLearningObjectiveSet1
> = z.object({
  source: z.string(),
  learningObjectiveResults: z.array(
    z.lazy(() => GetCourseProgressLearningObjectiveResult1$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressLearningObjectiveSet1$ {
  /** @deprecated use `GetCourseProgressLearningObjectiveSet1$inboundSchema` instead. */
  export const inboundSchema =
    GetCourseProgressLearningObjectiveSet1$inboundSchema;
  /** @deprecated use `GetCourseProgressLearningObjectiveSet1$outboundSchema` instead. */
  export const outboundSchema =
    GetCourseProgressLearningObjectiveSet1$outboundSchema;
  /** @deprecated use `GetCourseProgressLearningObjectiveSet1$Outbound` instead. */
  export type Outbound = GetCourseProgressLearningObjectiveSet1$Outbound;
}

export function getCourseProgressLearningObjectiveSet1ToJSON(
  getCourseProgressLearningObjectiveSet1:
    GetCourseProgressLearningObjectiveSet1,
): string {
  return JSON.stringify(
    GetCourseProgressLearningObjectiveSet1$outboundSchema.parse(
      getCourseProgressLearningObjectiveSet1,
    ),
  );
}

export function getCourseProgressLearningObjectiveSet1FromJSON(
  jsonString: string,
): SafeParseResult<GetCourseProgressLearningObjectiveSet1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCourseProgressLearningObjectiveSet1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseProgressLearningObjectiveSet1' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressResult1$inboundSchema: z.ZodType<
  GetCourseProgressResult1,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: GetCourseProgressStatus1$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  scoreScale: z.nullable(z.lazy(() => ScoreScale1$inboundSchema)).optional(),
  scorePercentile: z.nullable(z.number()).optional(),
  scoreStatus: GetCourseProgressScoreStatus1$inboundSchema,
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() => GetCourseProgressLearningObjectiveSet1$inboundSchema)),
  ).optional(),
  inProgress: z.nullable(z.string()).optional(),
  incomplete: z.nullable(z.string()).optional(),
  late: z.nullable(z.string()).optional(),
  missing: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetCourseProgressResult1$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: string;
  scoreScale?: ScoreScale1$Outbound | null | undefined;
  scorePercentile?: number | null | undefined;
  scoreStatus: string;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<GetCourseProgressLearningObjectiveSet1$Outbound>
    | null
    | undefined;
  inProgress?: string | null | undefined;
  incomplete?: string | null | undefined;
  late?: string | null | undefined;
  missing?: string | null | undefined;
};

/** @internal */
export const GetCourseProgressResult1$outboundSchema: z.ZodType<
  GetCourseProgressResult1$Outbound,
  z.ZodTypeDef,
  GetCourseProgressResult1
> = z.object({
  sourcedId: z.string().optional(),
  status: GetCourseProgressStatus1$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.date().transform(v => v.toISOString()),
  scoreScale: z.nullable(z.lazy(() => ScoreScale1$outboundSchema)).optional(),
  scorePercentile: z.nullable(z.number()).optional(),
  scoreStatus: GetCourseProgressScoreStatus1$outboundSchema,
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(
      z.lazy(() => GetCourseProgressLearningObjectiveSet1$outboundSchema),
    ),
  ).optional(),
  inProgress: z.nullable(z.string()).optional(),
  incomplete: z.nullable(z.string()).optional(),
  late: z.nullable(z.string()).optional(),
  missing: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressResult1$ {
  /** @deprecated use `GetCourseProgressResult1$inboundSchema` instead. */
  export const inboundSchema = GetCourseProgressResult1$inboundSchema;
  /** @deprecated use `GetCourseProgressResult1$outboundSchema` instead. */
  export const outboundSchema = GetCourseProgressResult1$outboundSchema;
  /** @deprecated use `GetCourseProgressResult1$Outbound` instead. */
  export type Outbound = GetCourseProgressResult1$Outbound;
}

export function getCourseProgressResult1ToJSON(
  getCourseProgressResult1: GetCourseProgressResult1,
): string {
  return JSON.stringify(
    GetCourseProgressResult1$outboundSchema.parse(getCourseProgressResult1),
  );
}

export function getCourseProgressResult1FromJSON(
  jsonString: string,
): SafeParseResult<GetCourseProgressResult1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseProgressResult1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseProgressResult1' from JSON`,
  );
}

/** @internal */
export const LineItemComponent$inboundSchema: z.ZodType<
  LineItemComponent,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("component").default("component").optional(),
  assessmentLineItemSourcedId: z.string(),
  courseComponentSourcedId: z.string(),
  title: z.string(),
  results: z.array(z.lazy(() => GetCourseProgressResult1$inboundSchema)),
});

/** @internal */
export type LineItemComponent$Outbound = {
  type: "component";
  assessmentLineItemSourcedId: string;
  courseComponentSourcedId: string;
  title: string;
  results: Array<GetCourseProgressResult1$Outbound>;
};

/** @internal */
export const LineItemComponent$outboundSchema: z.ZodType<
  LineItemComponent$Outbound,
  z.ZodTypeDef,
  LineItemComponent
> = z.object({
  type: z.literal("component").default("component" as const),
  assessmentLineItemSourcedId: z.string(),
  courseComponentSourcedId: z.string(),
  title: z.string(),
  results: z.array(z.lazy(() => GetCourseProgressResult1$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemComponent$ {
  /** @deprecated use `LineItemComponent$inboundSchema` instead. */
  export const inboundSchema = LineItemComponent$inboundSchema;
  /** @deprecated use `LineItemComponent$outboundSchema` instead. */
  export const outboundSchema = LineItemComponent$outboundSchema;
  /** @deprecated use `LineItemComponent$Outbound` instead. */
  export type Outbound = LineItemComponent$Outbound;
}

export function lineItemComponentToJSON(
  lineItemComponent: LineItemComponent,
): string {
  return JSON.stringify(
    LineItemComponent$outboundSchema.parse(lineItemComponent),
  );
}

export function lineItemComponentFromJSON(
  jsonString: string,
): SafeParseResult<LineItemComponent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemComponent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemComponent' from JSON`,
  );
}

/** @internal */
export const LineItem$inboundSchema: z.ZodType<
  LineItem,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => LineItemComponent$inboundSchema),
  z.lazy(() => LineItemResource$inboundSchema),
]);

/** @internal */
export type LineItem$Outbound =
  | LineItemComponent$Outbound
  | LineItemResource$Outbound;

/** @internal */
export const LineItem$outboundSchema: z.ZodType<
  LineItem$Outbound,
  z.ZodTypeDef,
  LineItem
> = z.union([
  z.lazy(() => LineItemComponent$outboundSchema),
  z.lazy(() => LineItemResource$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItem$ {
  /** @deprecated use `LineItem$inboundSchema` instead. */
  export const inboundSchema = LineItem$inboundSchema;
  /** @deprecated use `LineItem$outboundSchema` instead. */
  export const outboundSchema = LineItem$outboundSchema;
  /** @deprecated use `LineItem$Outbound` instead. */
  export type Outbound = LineItem$Outbound;
}

export function lineItemToJSON(lineItem: LineItem): string {
  return JSON.stringify(LineItem$outboundSchema.parse(lineItem));
}

export function lineItemFromJSON(
  jsonString: string,
): SafeParseResult<LineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItem' from JSON`,
  );
}

/** @internal */
export const GetCourseProgressResponse$inboundSchema: z.ZodType<
  GetCourseProgressResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lineItems: z.array(
    z.union([
      z.lazy(() => LineItemComponent$inboundSchema),
      z.lazy(() => LineItemResource$inboundSchema),
    ]),
  ),
});

/** @internal */
export type GetCourseProgressResponse$Outbound = {
  lineItems: Array<LineItemComponent$Outbound | LineItemResource$Outbound>;
};

/** @internal */
export const GetCourseProgressResponse$outboundSchema: z.ZodType<
  GetCourseProgressResponse$Outbound,
  z.ZodTypeDef,
  GetCourseProgressResponse
> = z.object({
  lineItems: z.array(
    z.union([
      z.lazy(() => LineItemComponent$outboundSchema),
      z.lazy(() => LineItemResource$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseProgressResponse$ {
  /** @deprecated use `GetCourseProgressResponse$inboundSchema` instead. */
  export const inboundSchema = GetCourseProgressResponse$inboundSchema;
  /** @deprecated use `GetCourseProgressResponse$outboundSchema` instead. */
  export const outboundSchema = GetCourseProgressResponse$outboundSchema;
  /** @deprecated use `GetCourseProgressResponse$Outbound` instead. */
  export type Outbound = GetCourseProgressResponse$Outbound;
}

export function getCourseProgressResponseToJSON(
  getCourseProgressResponse: GetCourseProgressResponse,
): string {
  return JSON.stringify(
    GetCourseProgressResponse$outboundSchema.parse(getCourseProgressResponse),
  );
}

export function getCourseProgressResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCourseProgressResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseProgressResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseProgressResponse' from JSON`,
  );
}
