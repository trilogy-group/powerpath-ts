/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllPlacementTestsRequest = {
  /**
   * The sourcedId of the student
   */
  student: string;
  /**
   * The subject name
   */
  subject: string;
};

export type ComponentResources = {};

export type Resources = {};

export type ResourcesMetadata = {};

export type AssessmentLineItems = {};

export type AssessmentResult = {};

export type PlacementTest = {
  componentResources: ComponentResources;
  resources: Resources;
  resourcesMetadata: ResourcesMetadata;
  assessmentLineItems: AssessmentLineItems | null;
  assessmentResults: Array<AssessmentResult> | null;
};

/**
 * Success
 */
export type GetAllPlacementTestsResponse = {
  placementTests: Array<PlacementTest>;
};

/** @internal */
export const GetAllPlacementTestsRequest$inboundSchema: z.ZodType<
  GetAllPlacementTestsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  subject: z.string(),
});

/** @internal */
export type GetAllPlacementTestsRequest$Outbound = {
  student: string;
  subject: string;
};

/** @internal */
export const GetAllPlacementTestsRequest$outboundSchema: z.ZodType<
  GetAllPlacementTestsRequest$Outbound,
  z.ZodTypeDef,
  GetAllPlacementTestsRequest
> = z.object({
  student: z.string(),
  subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPlacementTestsRequest$ {
  /** @deprecated use `GetAllPlacementTestsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllPlacementTestsRequest$inboundSchema;
  /** @deprecated use `GetAllPlacementTestsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllPlacementTestsRequest$outboundSchema;
  /** @deprecated use `GetAllPlacementTestsRequest$Outbound` instead. */
  export type Outbound = GetAllPlacementTestsRequest$Outbound;
}

export function getAllPlacementTestsRequestToJSON(
  getAllPlacementTestsRequest: GetAllPlacementTestsRequest,
): string {
  return JSON.stringify(
    GetAllPlacementTestsRequest$outboundSchema.parse(
      getAllPlacementTestsRequest,
    ),
  );
}

export function getAllPlacementTestsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPlacementTestsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPlacementTestsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPlacementTestsRequest' from JSON`,
  );
}

/** @internal */
export const ComponentResources$inboundSchema: z.ZodType<
  ComponentResources,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ComponentResources$Outbound = {};

/** @internal */
export const ComponentResources$outboundSchema: z.ZodType<
  ComponentResources$Outbound,
  z.ZodTypeDef,
  ComponentResources
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComponentResources$ {
  /** @deprecated use `ComponentResources$inboundSchema` instead. */
  export const inboundSchema = ComponentResources$inboundSchema;
  /** @deprecated use `ComponentResources$outboundSchema` instead. */
  export const outboundSchema = ComponentResources$outboundSchema;
  /** @deprecated use `ComponentResources$Outbound` instead. */
  export type Outbound = ComponentResources$Outbound;
}

export function componentResourcesToJSON(
  componentResources: ComponentResources,
): string {
  return JSON.stringify(
    ComponentResources$outboundSchema.parse(componentResources),
  );
}

export function componentResourcesFromJSON(
  jsonString: string,
): SafeParseResult<ComponentResources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComponentResources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComponentResources' from JSON`,
  );
}

/** @internal */
export const Resources$inboundSchema: z.ZodType<
  Resources,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Resources$Outbound = {};

/** @internal */
export const Resources$outboundSchema: z.ZodType<
  Resources$Outbound,
  z.ZodTypeDef,
  Resources
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resources$ {
  /** @deprecated use `Resources$inboundSchema` instead. */
  export const inboundSchema = Resources$inboundSchema;
  /** @deprecated use `Resources$outboundSchema` instead. */
  export const outboundSchema = Resources$outboundSchema;
  /** @deprecated use `Resources$Outbound` instead. */
  export type Outbound = Resources$Outbound;
}

export function resourcesToJSON(resources: Resources): string {
  return JSON.stringify(Resources$outboundSchema.parse(resources));
}

export function resourcesFromJSON(
  jsonString: string,
): SafeParseResult<Resources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resources' from JSON`,
  );
}

/** @internal */
export const ResourcesMetadata$inboundSchema: z.ZodType<
  ResourcesMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ResourcesMetadata$Outbound = {};

/** @internal */
export const ResourcesMetadata$outboundSchema: z.ZodType<
  ResourcesMetadata$Outbound,
  z.ZodTypeDef,
  ResourcesMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourcesMetadata$ {
  /** @deprecated use `ResourcesMetadata$inboundSchema` instead. */
  export const inboundSchema = ResourcesMetadata$inboundSchema;
  /** @deprecated use `ResourcesMetadata$outboundSchema` instead. */
  export const outboundSchema = ResourcesMetadata$outboundSchema;
  /** @deprecated use `ResourcesMetadata$Outbound` instead. */
  export type Outbound = ResourcesMetadata$Outbound;
}

export function resourcesMetadataToJSON(
  resourcesMetadata: ResourcesMetadata,
): string {
  return JSON.stringify(
    ResourcesMetadata$outboundSchema.parse(resourcesMetadata),
  );
}

export function resourcesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ResourcesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourcesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourcesMetadata' from JSON`,
  );
}

/** @internal */
export const AssessmentLineItems$inboundSchema: z.ZodType<
  AssessmentLineItems,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AssessmentLineItems$Outbound = {};

/** @internal */
export const AssessmentLineItems$outboundSchema: z.ZodType<
  AssessmentLineItems$Outbound,
  z.ZodTypeDef,
  AssessmentLineItems
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentLineItems$ {
  /** @deprecated use `AssessmentLineItems$inboundSchema` instead. */
  export const inboundSchema = AssessmentLineItems$inboundSchema;
  /** @deprecated use `AssessmentLineItems$outboundSchema` instead. */
  export const outboundSchema = AssessmentLineItems$outboundSchema;
  /** @deprecated use `AssessmentLineItems$Outbound` instead. */
  export type Outbound = AssessmentLineItems$Outbound;
}

export function assessmentLineItemsToJSON(
  assessmentLineItems: AssessmentLineItems,
): string {
  return JSON.stringify(
    AssessmentLineItems$outboundSchema.parse(assessmentLineItems),
  );
}

export function assessmentLineItemsFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentLineItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentLineItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentLineItems' from JSON`,
  );
}

/** @internal */
export const AssessmentResult$inboundSchema: z.ZodType<
  AssessmentResult,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AssessmentResult$Outbound = {};

/** @internal */
export const AssessmentResult$outboundSchema: z.ZodType<
  AssessmentResult$Outbound,
  z.ZodTypeDef,
  AssessmentResult
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssessmentResult$ {
  /** @deprecated use `AssessmentResult$inboundSchema` instead. */
  export const inboundSchema = AssessmentResult$inboundSchema;
  /** @deprecated use `AssessmentResult$outboundSchema` instead. */
  export const outboundSchema = AssessmentResult$outboundSchema;
  /** @deprecated use `AssessmentResult$Outbound` instead. */
  export type Outbound = AssessmentResult$Outbound;
}

export function assessmentResultToJSON(
  assessmentResult: AssessmentResult,
): string {
  return JSON.stringify(
    AssessmentResult$outboundSchema.parse(assessmentResult),
  );
}

export function assessmentResultFromJSON(
  jsonString: string,
): SafeParseResult<AssessmentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssessmentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssessmentResult' from JSON`,
  );
}

/** @internal */
export const PlacementTest$inboundSchema: z.ZodType<
  PlacementTest,
  z.ZodTypeDef,
  unknown
> = z.object({
  component_resources: z.lazy(() => ComponentResources$inboundSchema),
  resources: z.lazy(() => Resources$inboundSchema),
  resources_metadata: z.lazy(() => ResourcesMetadata$inboundSchema),
  assessment_line_items: z.nullable(
    z.lazy(() => AssessmentLineItems$inboundSchema),
  ),
  assessment_results: z.nullable(
    z.array(z.lazy(() => AssessmentResult$inboundSchema)),
  ),
}).transform((v) => {
  return remap$(v, {
    "component_resources": "componentResources",
    "resources_metadata": "resourcesMetadata",
    "assessment_line_items": "assessmentLineItems",
    "assessment_results": "assessmentResults",
  });
});

/** @internal */
export type PlacementTest$Outbound = {
  component_resources: ComponentResources$Outbound;
  resources: Resources$Outbound;
  resources_metadata: ResourcesMetadata$Outbound;
  assessment_line_items: AssessmentLineItems$Outbound | null;
  assessment_results: Array<AssessmentResult$Outbound> | null;
};

/** @internal */
export const PlacementTest$outboundSchema: z.ZodType<
  PlacementTest$Outbound,
  z.ZodTypeDef,
  PlacementTest
> = z.object({
  componentResources: z.lazy(() => ComponentResources$outboundSchema),
  resources: z.lazy(() => Resources$outboundSchema),
  resourcesMetadata: z.lazy(() => ResourcesMetadata$outboundSchema),
  assessmentLineItems: z.nullable(
    z.lazy(() => AssessmentLineItems$outboundSchema),
  ),
  assessmentResults: z.nullable(
    z.array(z.lazy(() => AssessmentResult$outboundSchema)),
  ),
}).transform((v) => {
  return remap$(v, {
    componentResources: "component_resources",
    resourcesMetadata: "resources_metadata",
    assessmentLineItems: "assessment_line_items",
    assessmentResults: "assessment_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlacementTest$ {
  /** @deprecated use `PlacementTest$inboundSchema` instead. */
  export const inboundSchema = PlacementTest$inboundSchema;
  /** @deprecated use `PlacementTest$outboundSchema` instead. */
  export const outboundSchema = PlacementTest$outboundSchema;
  /** @deprecated use `PlacementTest$Outbound` instead. */
  export type Outbound = PlacementTest$Outbound;
}

export function placementTestToJSON(placementTest: PlacementTest): string {
  return JSON.stringify(PlacementTest$outboundSchema.parse(placementTest));
}

export function placementTestFromJSON(
  jsonString: string,
): SafeParseResult<PlacementTest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlacementTest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlacementTest' from JSON`,
  );
}

/** @internal */
export const GetAllPlacementTestsResponse$inboundSchema: z.ZodType<
  GetAllPlacementTestsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  placementTests: z.array(z.lazy(() => PlacementTest$inboundSchema)),
});

/** @internal */
export type GetAllPlacementTestsResponse$Outbound = {
  placementTests: Array<PlacementTest$Outbound>;
};

/** @internal */
export const GetAllPlacementTestsResponse$outboundSchema: z.ZodType<
  GetAllPlacementTestsResponse$Outbound,
  z.ZodTypeDef,
  GetAllPlacementTestsResponse
> = z.object({
  placementTests: z.array(z.lazy(() => PlacementTest$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPlacementTestsResponse$ {
  /** @deprecated use `GetAllPlacementTestsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllPlacementTestsResponse$inboundSchema;
  /** @deprecated use `GetAllPlacementTestsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllPlacementTestsResponse$outboundSchema;
  /** @deprecated use `GetAllPlacementTestsResponse$Outbound` instead. */
  export type Outbound = GetAllPlacementTestsResponse$Outbound;
}

export function getAllPlacementTestsResponseToJSON(
  getAllPlacementTestsResponse: GetAllPlacementTestsResponse,
): string {
  return JSON.stringify(
    GetAllPlacementTestsResponse$outboundSchema.parse(
      getAllPlacementTestsResponse,
    ),
  );
}

export function getAllPlacementTestsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPlacementTestsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPlacementTestsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPlacementTestsResponse' from JSON`,
  );
}
