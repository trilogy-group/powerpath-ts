/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MakeExternalTestAssignmentRequest = {
  /**
   * The sourcedId of the student
   */
  student: string;
  /**
   * The sourcedId of the lesson (ComponentResource)
   */
  lesson: string;
  /**
   * The name of the application to use for authenticating on the external tool
   */
  applicationName?: string | undefined;
};

export const ToolProvider = {
  Edulastic: "edulastic",
} as const;
export type ToolProvider = ClosedEnum<typeof ToolProvider>;

export const MakeExternalTestAssignmentLessonType = {
  TestOut: "test-out",
  Placement: "placement",
} as const;
export type MakeExternalTestAssignmentLessonType = ClosedEnum<
  typeof MakeExternalTestAssignmentLessonType
>;

/**
 * The credentials for accessing the assigned test on Edulastic
 */
export type MakeExternalTestAssignmentCredentials = {
  email: string;
  password: string;
};

/**
 * Success
 */
export type MakeExternalTestAssignmentResponse = {
  toolProvider: ToolProvider;
  lessonType: MakeExternalTestAssignmentLessonType;
  /**
   * The attempt number
   */
  attempt: number;
  /**
   * The credentials for accessing the assigned test on Edulastic
   */
  credentials?: MakeExternalTestAssignmentCredentials | undefined;
  /**
   * The id of the assignment on Edulastic for results retrieval
   */
  assignmentId?: string | undefined;
  /**
   * The id of the class on Edulastic for results retrieval
   */
  classId?: string | undefined;
  /**
   * The URL of the test on Edulastic
   */
  testUrl?: string | undefined;
  /**
   * The id of the test on Edulastic
   */
  testId?: string | undefined;
};

/** @internal */
export const MakeExternalTestAssignmentRequest$inboundSchema: z.ZodType<
  MakeExternalTestAssignmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  lesson: z.string(),
  applicationName: z.string().optional(),
});

/** @internal */
export type MakeExternalTestAssignmentRequest$Outbound = {
  student: string;
  lesson: string;
  applicationName?: string | undefined;
};

/** @internal */
export const MakeExternalTestAssignmentRequest$outboundSchema: z.ZodType<
  MakeExternalTestAssignmentRequest$Outbound,
  z.ZodTypeDef,
  MakeExternalTestAssignmentRequest
> = z.object({
  student: z.string(),
  lesson: z.string(),
  applicationName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MakeExternalTestAssignmentRequest$ {
  /** @deprecated use `MakeExternalTestAssignmentRequest$inboundSchema` instead. */
  export const inboundSchema = MakeExternalTestAssignmentRequest$inboundSchema;
  /** @deprecated use `MakeExternalTestAssignmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    MakeExternalTestAssignmentRequest$outboundSchema;
  /** @deprecated use `MakeExternalTestAssignmentRequest$Outbound` instead. */
  export type Outbound = MakeExternalTestAssignmentRequest$Outbound;
}

export function makeExternalTestAssignmentRequestToJSON(
  makeExternalTestAssignmentRequest: MakeExternalTestAssignmentRequest,
): string {
  return JSON.stringify(
    MakeExternalTestAssignmentRequest$outboundSchema.parse(
      makeExternalTestAssignmentRequest,
    ),
  );
}

export function makeExternalTestAssignmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<MakeExternalTestAssignmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MakeExternalTestAssignmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MakeExternalTestAssignmentRequest' from JSON`,
  );
}

/** @internal */
export const ToolProvider$inboundSchema: z.ZodNativeEnum<typeof ToolProvider> =
  z.nativeEnum(ToolProvider);

/** @internal */
export const ToolProvider$outboundSchema: z.ZodNativeEnum<typeof ToolProvider> =
  ToolProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolProvider$ {
  /** @deprecated use `ToolProvider$inboundSchema` instead. */
  export const inboundSchema = ToolProvider$inboundSchema;
  /** @deprecated use `ToolProvider$outboundSchema` instead. */
  export const outboundSchema = ToolProvider$outboundSchema;
}

/** @internal */
export const MakeExternalTestAssignmentLessonType$inboundSchema:
  z.ZodNativeEnum<typeof MakeExternalTestAssignmentLessonType> = z.nativeEnum(
    MakeExternalTestAssignmentLessonType,
  );

/** @internal */
export const MakeExternalTestAssignmentLessonType$outboundSchema:
  z.ZodNativeEnum<typeof MakeExternalTestAssignmentLessonType> =
    MakeExternalTestAssignmentLessonType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MakeExternalTestAssignmentLessonType$ {
  /** @deprecated use `MakeExternalTestAssignmentLessonType$inboundSchema` instead. */
  export const inboundSchema =
    MakeExternalTestAssignmentLessonType$inboundSchema;
  /** @deprecated use `MakeExternalTestAssignmentLessonType$outboundSchema` instead. */
  export const outboundSchema =
    MakeExternalTestAssignmentLessonType$outboundSchema;
}

/** @internal */
export const MakeExternalTestAssignmentCredentials$inboundSchema: z.ZodType<
  MakeExternalTestAssignmentCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  password: z.string(),
});

/** @internal */
export type MakeExternalTestAssignmentCredentials$Outbound = {
  email: string;
  password: string;
};

/** @internal */
export const MakeExternalTestAssignmentCredentials$outboundSchema: z.ZodType<
  MakeExternalTestAssignmentCredentials$Outbound,
  z.ZodTypeDef,
  MakeExternalTestAssignmentCredentials
> = z.object({
  email: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MakeExternalTestAssignmentCredentials$ {
  /** @deprecated use `MakeExternalTestAssignmentCredentials$inboundSchema` instead. */
  export const inboundSchema =
    MakeExternalTestAssignmentCredentials$inboundSchema;
  /** @deprecated use `MakeExternalTestAssignmentCredentials$outboundSchema` instead. */
  export const outboundSchema =
    MakeExternalTestAssignmentCredentials$outboundSchema;
  /** @deprecated use `MakeExternalTestAssignmentCredentials$Outbound` instead. */
  export type Outbound = MakeExternalTestAssignmentCredentials$Outbound;
}

export function makeExternalTestAssignmentCredentialsToJSON(
  makeExternalTestAssignmentCredentials: MakeExternalTestAssignmentCredentials,
): string {
  return JSON.stringify(
    MakeExternalTestAssignmentCredentials$outboundSchema.parse(
      makeExternalTestAssignmentCredentials,
    ),
  );
}

export function makeExternalTestAssignmentCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<MakeExternalTestAssignmentCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MakeExternalTestAssignmentCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MakeExternalTestAssignmentCredentials' from JSON`,
  );
}

/** @internal */
export const MakeExternalTestAssignmentResponse$inboundSchema: z.ZodType<
  MakeExternalTestAssignmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  toolProvider: ToolProvider$inboundSchema,
  lessonType: MakeExternalTestAssignmentLessonType$inboundSchema,
  attempt: z.number(),
  credentials: z.lazy(() => MakeExternalTestAssignmentCredentials$inboundSchema)
    .optional(),
  assignmentId: z.string().optional(),
  classId: z.string().optional(),
  testUrl: z.string().optional(),
  testId: z.string().optional(),
});

/** @internal */
export type MakeExternalTestAssignmentResponse$Outbound = {
  toolProvider: string;
  lessonType: string;
  attempt: number;
  credentials?: MakeExternalTestAssignmentCredentials$Outbound | undefined;
  assignmentId?: string | undefined;
  classId?: string | undefined;
  testUrl?: string | undefined;
  testId?: string | undefined;
};

/** @internal */
export const MakeExternalTestAssignmentResponse$outboundSchema: z.ZodType<
  MakeExternalTestAssignmentResponse$Outbound,
  z.ZodTypeDef,
  MakeExternalTestAssignmentResponse
> = z.object({
  toolProvider: ToolProvider$outboundSchema,
  lessonType: MakeExternalTestAssignmentLessonType$outboundSchema,
  attempt: z.number(),
  credentials: z.lazy(() =>
    MakeExternalTestAssignmentCredentials$outboundSchema
  ).optional(),
  assignmentId: z.string().optional(),
  classId: z.string().optional(),
  testUrl: z.string().optional(),
  testId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MakeExternalTestAssignmentResponse$ {
  /** @deprecated use `MakeExternalTestAssignmentResponse$inboundSchema` instead. */
  export const inboundSchema = MakeExternalTestAssignmentResponse$inboundSchema;
  /** @deprecated use `MakeExternalTestAssignmentResponse$outboundSchema` instead. */
  export const outboundSchema =
    MakeExternalTestAssignmentResponse$outboundSchema;
  /** @deprecated use `MakeExternalTestAssignmentResponse$Outbound` instead. */
  export type Outbound = MakeExternalTestAssignmentResponse$Outbound;
}

export function makeExternalTestAssignmentResponseToJSON(
  makeExternalTestAssignmentResponse: MakeExternalTestAssignmentResponse,
): string {
  return JSON.stringify(
    MakeExternalTestAssignmentResponse$outboundSchema.parse(
      makeExternalTestAssignmentResponse,
    ),
  );
}

export function makeExternalTestAssignmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<MakeExternalTestAssignmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MakeExternalTestAssignmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MakeExternalTestAssignmentResponse' from JSON`,
  );
}
