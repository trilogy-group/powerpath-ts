/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateExternalTestOutRequest =
  | (components.CreateExternalTestOutInput & { lessonType: "test-out" })
  | (components.CreateExternalPlacementInput & { lessonType: "placement" });

export const CreateExternalTestOutLessonType = {
  Powerpath100: "powerpath-100",
  Quiz: "quiz",
  TestOut: "test-out",
  Placement: "placement",
} as const;
export type CreateExternalTestOutLessonType = ClosedEnum<
  typeof CreateExternalTestOutLessonType
>;

/**
 * Success
 */
export type CreateExternalTestOutResponse = {
  lessonType: CreateExternalTestOutLessonType;
  /**
   * The sourcedId of the created external test reference (ComponentResource)
   */
  lessonId: string;
  /**
   * The sourcedId of the component (unit) containing the test
   */
  courseComponentId: string;
  /**
   * The sourcedId of the resource representing the external test
   */
  resourceId: string;
  /**
   * The URL to the external test system
   */
  launchUrl?: string | undefined;
  /**
   * The tool provider id
   */
  toolProvider: string;
  /**
   * The ID of the test in the spreadsheet
   */
  vendorId: string;
  /**
   * The courseId to enroll the student in if they fail the placement test (optional)
   */
  courseIdOnFail?: string | null | undefined;
  /**
   * The grades for the resource
   */
  grades?: Array<number> | undefined;
};

/** @internal */
export const CreateExternalTestOutRequest$inboundSchema: z.ZodType<
  CreateExternalTestOutRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CreateExternalTestOutInput$inboundSchema.and(
    z.object({ lessonType: z.literal("test-out") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
  components.CreateExternalPlacementInput$inboundSchema.and(
    z.object({ lessonType: z.literal("placement") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
]);

/** @internal */
export type CreateExternalTestOutRequest$Outbound =
  | (components.CreateExternalTestOutInput$Outbound & {
    lessonType: "test-out";
  })
  | (components.CreateExternalPlacementInput$Outbound & {
    lessonType: "placement";
  });

/** @internal */
export const CreateExternalTestOutRequest$outboundSchema: z.ZodType<
  CreateExternalTestOutRequest$Outbound,
  z.ZodTypeDef,
  CreateExternalTestOutRequest
> = z.union([
  components.CreateExternalTestOutInput$outboundSchema.and(
    z.object({ lessonType: z.literal("test-out") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
  components.CreateExternalPlacementInput$outboundSchema.and(
    z.object({ lessonType: z.literal("placement") }).transform((v) => ({
      lessonType: v.lessonType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExternalTestOutRequest$ {
  /** @deprecated use `CreateExternalTestOutRequest$inboundSchema` instead. */
  export const inboundSchema = CreateExternalTestOutRequest$inboundSchema;
  /** @deprecated use `CreateExternalTestOutRequest$outboundSchema` instead. */
  export const outboundSchema = CreateExternalTestOutRequest$outboundSchema;
  /** @deprecated use `CreateExternalTestOutRequest$Outbound` instead. */
  export type Outbound = CreateExternalTestOutRequest$Outbound;
}

export function createExternalTestOutRequestToJSON(
  createExternalTestOutRequest: CreateExternalTestOutRequest,
): string {
  return JSON.stringify(
    CreateExternalTestOutRequest$outboundSchema.parse(
      createExternalTestOutRequest,
    ),
  );
}

export function createExternalTestOutRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateExternalTestOutRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateExternalTestOutRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateExternalTestOutRequest' from JSON`,
  );
}

/** @internal */
export const CreateExternalTestOutLessonType$inboundSchema: z.ZodNativeEnum<
  typeof CreateExternalTestOutLessonType
> = z.nativeEnum(CreateExternalTestOutLessonType);

/** @internal */
export const CreateExternalTestOutLessonType$outboundSchema: z.ZodNativeEnum<
  typeof CreateExternalTestOutLessonType
> = CreateExternalTestOutLessonType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExternalTestOutLessonType$ {
  /** @deprecated use `CreateExternalTestOutLessonType$inboundSchema` instead. */
  export const inboundSchema = CreateExternalTestOutLessonType$inboundSchema;
  /** @deprecated use `CreateExternalTestOutLessonType$outboundSchema` instead. */
  export const outboundSchema = CreateExternalTestOutLessonType$outboundSchema;
}

/** @internal */
export const CreateExternalTestOutResponse$inboundSchema: z.ZodType<
  CreateExternalTestOutResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lessonType: CreateExternalTestOutLessonType$inboundSchema,
  lessonId: z.string(),
  courseComponentId: z.string(),
  resourceId: z.string(),
  launchUrl: z.string().optional(),
  toolProvider: z.string(),
  vendorId: z.string(),
  courseIdOnFail: z.nullable(z.string()).optional(),
  grades: z.array(z.number()).optional(),
});

/** @internal */
export type CreateExternalTestOutResponse$Outbound = {
  lessonType: string;
  lessonId: string;
  courseComponentId: string;
  resourceId: string;
  launchUrl?: string | undefined;
  toolProvider: string;
  vendorId: string;
  courseIdOnFail?: string | null | undefined;
  grades?: Array<number> | undefined;
};

/** @internal */
export const CreateExternalTestOutResponse$outboundSchema: z.ZodType<
  CreateExternalTestOutResponse$Outbound,
  z.ZodTypeDef,
  CreateExternalTestOutResponse
> = z.object({
  lessonType: CreateExternalTestOutLessonType$outboundSchema,
  lessonId: z.string(),
  courseComponentId: z.string(),
  resourceId: z.string(),
  launchUrl: z.string().optional(),
  toolProvider: z.string(),
  vendorId: z.string(),
  courseIdOnFail: z.nullable(z.string()).optional(),
  grades: z.array(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateExternalTestOutResponse$ {
  /** @deprecated use `CreateExternalTestOutResponse$inboundSchema` instead. */
  export const inboundSchema = CreateExternalTestOutResponse$inboundSchema;
  /** @deprecated use `CreateExternalTestOutResponse$outboundSchema` instead. */
  export const outboundSchema = CreateExternalTestOutResponse$outboundSchema;
  /** @deprecated use `CreateExternalTestOutResponse$Outbound` instead. */
  export type Outbound = CreateExternalTestOutResponse$Outbound;
}

export function createExternalTestOutResponseToJSON(
  createExternalTestOutResponse: CreateExternalTestOutResponse,
): string {
  return JSON.stringify(
    CreateExternalTestOutResponse$outboundSchema.parse(
      createExternalTestOutResponse,
    ),
  );
}

export function createExternalTestOutResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateExternalTestOutResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateExternalTestOutResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateExternalTestOutResponse' from JSON`,
  );
}
