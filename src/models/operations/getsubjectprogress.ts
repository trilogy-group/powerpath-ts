/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSubjectProgressRequest = {
  /**
   * The sourcedId of the student
   */
  student: string;
  /**
   * The subject name
   */
  subject: string;
};

export type GetSubjectProgressCourse = {
  courseCode: string | null;
  dateLastModified: string;
  grades: Array<string> | null;
  level: string | null;
  orgSourcedId: string;
  sourcedId: string;
  status: string;
  subjects: Array<string> | null;
  title: string;
};

/**
 * The overview of the course's progress
 */
export type Progress = {
  course: GetSubjectProgressCourse;
  inEnrolled: boolean;
  /**
   * Whether the student has a fully graded assessment result for a test-out lesson in the course
   */
  hasUsedTestOut: boolean;
  /**
   * The sourcedId of the test-out lesson (ComponentResource) in the course
   */
  testOutLessonId: string | null;
  /**
   * The number of lessons that contain an assessment result with a score status of 'fully graded'
   */
  completedLessons: number;
  /**
   * The total number of lessons in the course
   */
  totalLessons: number;
  /**
   * The total XP that can be earned by the student in the course, not considering potential multipliers
   */
  totalAttainableXp: number;
  /**
   * The total XP earned by the student considering calculated multipliers
   */
  totalXpEarned: number;
};

/**
 * Success
 */
export type GetSubjectProgressResponse = {
  /**
   * The progress of the student in each of the subject's courses
   */
  progress: Array<Progress>;
};

/** @internal */
export const GetSubjectProgressRequest$inboundSchema: z.ZodType<
  GetSubjectProgressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  subject: z.string(),
});

/** @internal */
export type GetSubjectProgressRequest$Outbound = {
  student: string;
  subject: string;
};

/** @internal */
export const GetSubjectProgressRequest$outboundSchema: z.ZodType<
  GetSubjectProgressRequest$Outbound,
  z.ZodTypeDef,
  GetSubjectProgressRequest
> = z.object({
  student: z.string(),
  subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubjectProgressRequest$ {
  /** @deprecated use `GetSubjectProgressRequest$inboundSchema` instead. */
  export const inboundSchema = GetSubjectProgressRequest$inboundSchema;
  /** @deprecated use `GetSubjectProgressRequest$outboundSchema` instead. */
  export const outboundSchema = GetSubjectProgressRequest$outboundSchema;
  /** @deprecated use `GetSubjectProgressRequest$Outbound` instead. */
  export type Outbound = GetSubjectProgressRequest$Outbound;
}

export function getSubjectProgressRequestToJSON(
  getSubjectProgressRequest: GetSubjectProgressRequest,
): string {
  return JSON.stringify(
    GetSubjectProgressRequest$outboundSchema.parse(getSubjectProgressRequest),
  );
}

export function getSubjectProgressRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSubjectProgressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubjectProgressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubjectProgressRequest' from JSON`,
  );
}

/** @internal */
export const GetSubjectProgressCourse$inboundSchema: z.ZodType<
  GetSubjectProgressCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseCode: z.nullable(z.string()),
  dateLastModified: z.string(),
  grades: z.nullable(z.array(z.string())),
  level: z.nullable(z.string()),
  orgSourcedId: z.string(),
  sourcedId: z.string(),
  status: z.string(),
  subjects: z.nullable(z.array(z.string())),
  title: z.string(),
});

/** @internal */
export type GetSubjectProgressCourse$Outbound = {
  courseCode: string | null;
  dateLastModified: string;
  grades: Array<string> | null;
  level: string | null;
  orgSourcedId: string;
  sourcedId: string;
  status: string;
  subjects: Array<string> | null;
  title: string;
};

/** @internal */
export const GetSubjectProgressCourse$outboundSchema: z.ZodType<
  GetSubjectProgressCourse$Outbound,
  z.ZodTypeDef,
  GetSubjectProgressCourse
> = z.object({
  courseCode: z.nullable(z.string()),
  dateLastModified: z.string(),
  grades: z.nullable(z.array(z.string())),
  level: z.nullable(z.string()),
  orgSourcedId: z.string(),
  sourcedId: z.string(),
  status: z.string(),
  subjects: z.nullable(z.array(z.string())),
  title: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubjectProgressCourse$ {
  /** @deprecated use `GetSubjectProgressCourse$inboundSchema` instead. */
  export const inboundSchema = GetSubjectProgressCourse$inboundSchema;
  /** @deprecated use `GetSubjectProgressCourse$outboundSchema` instead. */
  export const outboundSchema = GetSubjectProgressCourse$outboundSchema;
  /** @deprecated use `GetSubjectProgressCourse$Outbound` instead. */
  export type Outbound = GetSubjectProgressCourse$Outbound;
}

export function getSubjectProgressCourseToJSON(
  getSubjectProgressCourse: GetSubjectProgressCourse,
): string {
  return JSON.stringify(
    GetSubjectProgressCourse$outboundSchema.parse(getSubjectProgressCourse),
  );
}

export function getSubjectProgressCourseFromJSON(
  jsonString: string,
): SafeParseResult<GetSubjectProgressCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubjectProgressCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubjectProgressCourse' from JSON`,
  );
}

/** @internal */
export const Progress$inboundSchema: z.ZodType<
  Progress,
  z.ZodTypeDef,
  unknown
> = z.object({
  course: z.lazy(() => GetSubjectProgressCourse$inboundSchema),
  inEnrolled: z.boolean(),
  hasUsedTestOut: z.boolean(),
  testOutLessonId: z.nullable(z.string()),
  completedLessons: z.number(),
  totalLessons: z.number(),
  totalAttainableXp: z.number(),
  totalXpEarned: z.number(),
});

/** @internal */
export type Progress$Outbound = {
  course: GetSubjectProgressCourse$Outbound;
  inEnrolled: boolean;
  hasUsedTestOut: boolean;
  testOutLessonId: string | null;
  completedLessons: number;
  totalLessons: number;
  totalAttainableXp: number;
  totalXpEarned: number;
};

/** @internal */
export const Progress$outboundSchema: z.ZodType<
  Progress$Outbound,
  z.ZodTypeDef,
  Progress
> = z.object({
  course: z.lazy(() => GetSubjectProgressCourse$outboundSchema),
  inEnrolled: z.boolean(),
  hasUsedTestOut: z.boolean(),
  testOutLessonId: z.nullable(z.string()),
  completedLessons: z.number(),
  totalLessons: z.number(),
  totalAttainableXp: z.number(),
  totalXpEarned: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Progress$ {
  /** @deprecated use `Progress$inboundSchema` instead. */
  export const inboundSchema = Progress$inboundSchema;
  /** @deprecated use `Progress$outboundSchema` instead. */
  export const outboundSchema = Progress$outboundSchema;
  /** @deprecated use `Progress$Outbound` instead. */
  export type Outbound = Progress$Outbound;
}

export function progressToJSON(progress: Progress): string {
  return JSON.stringify(Progress$outboundSchema.parse(progress));
}

export function progressFromJSON(
  jsonString: string,
): SafeParseResult<Progress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Progress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Progress' from JSON`,
  );
}

/** @internal */
export const GetSubjectProgressResponse$inboundSchema: z.ZodType<
  GetSubjectProgressResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  progress: z.array(z.lazy(() => Progress$inboundSchema)),
});

/** @internal */
export type GetSubjectProgressResponse$Outbound = {
  progress: Array<Progress$Outbound>;
};

/** @internal */
export const GetSubjectProgressResponse$outboundSchema: z.ZodType<
  GetSubjectProgressResponse$Outbound,
  z.ZodTypeDef,
  GetSubjectProgressResponse
> = z.object({
  progress: z.array(z.lazy(() => Progress$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubjectProgressResponse$ {
  /** @deprecated use `GetSubjectProgressResponse$inboundSchema` instead. */
  export const inboundSchema = GetSubjectProgressResponse$inboundSchema;
  /** @deprecated use `GetSubjectProgressResponse$outboundSchema` instead. */
  export const outboundSchema = GetSubjectProgressResponse$outboundSchema;
  /** @deprecated use `GetSubjectProgressResponse$Outbound` instead. */
  export type Outbound = GetSubjectProgressResponse$Outbound;
}

export function getSubjectProgressResponseToJSON(
  getSubjectProgressResponse: GetSubjectProgressResponse,
): string {
  return JSON.stringify(
    GetSubjectProgressResponse$outboundSchema.parse(getSubjectProgressResponse),
  );
}

export function getSubjectProgressResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSubjectProgressResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubjectProgressResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubjectProgressResponse' from JSON`,
  );
}
