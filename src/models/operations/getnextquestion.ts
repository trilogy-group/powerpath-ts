/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetNextQuestionRequest = {
  /**
   * The sourcedId of the student who is answering the question
   */
  student: string;
  /**
   * The sourcedId of the ComponentResource that represents the PowerPath lesson
   */
  lesson: string;
};

/**
 * Success
 */
export type GetNextQuestionResponse = {
  /**
   * The current PowerPath score of the student in this lesson
   */
  score: number;
  /**
   * A PowerPath Test Question
   */
  question: components.PowerPathTestQuestion;
};

/** @internal */
export const GetNextQuestionRequest$inboundSchema: z.ZodType<
  GetNextQuestionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  lesson: z.string(),
});

/** @internal */
export type GetNextQuestionRequest$Outbound = {
  student: string;
  lesson: string;
};

/** @internal */
export const GetNextQuestionRequest$outboundSchema: z.ZodType<
  GetNextQuestionRequest$Outbound,
  z.ZodTypeDef,
  GetNextQuestionRequest
> = z.object({
  student: z.string(),
  lesson: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextQuestionRequest$ {
  /** @deprecated use `GetNextQuestionRequest$inboundSchema` instead. */
  export const inboundSchema = GetNextQuestionRequest$inboundSchema;
  /** @deprecated use `GetNextQuestionRequest$outboundSchema` instead. */
  export const outboundSchema = GetNextQuestionRequest$outboundSchema;
  /** @deprecated use `GetNextQuestionRequest$Outbound` instead. */
  export type Outbound = GetNextQuestionRequest$Outbound;
}

export function getNextQuestionRequestToJSON(
  getNextQuestionRequest: GetNextQuestionRequest,
): string {
  return JSON.stringify(
    GetNextQuestionRequest$outboundSchema.parse(getNextQuestionRequest),
  );
}

export function getNextQuestionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetNextQuestionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextQuestionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextQuestionRequest' from JSON`,
  );
}

/** @internal */
export const GetNextQuestionResponse$inboundSchema: z.ZodType<
  GetNextQuestionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  score: z.number(),
  question: components.PowerPathTestQuestion$inboundSchema,
});

/** @internal */
export type GetNextQuestionResponse$Outbound = {
  score: number;
  question: components.PowerPathTestQuestion$Outbound;
};

/** @internal */
export const GetNextQuestionResponse$outboundSchema: z.ZodType<
  GetNextQuestionResponse$Outbound,
  z.ZodTypeDef,
  GetNextQuestionResponse
> = z.object({
  score: z.number(),
  question: components.PowerPathTestQuestion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNextQuestionResponse$ {
  /** @deprecated use `GetNextQuestionResponse$inboundSchema` instead. */
  export const inboundSchema = GetNextQuestionResponse$inboundSchema;
  /** @deprecated use `GetNextQuestionResponse$outboundSchema` instead. */
  export const outboundSchema = GetNextQuestionResponse$outboundSchema;
  /** @deprecated use `GetNextQuestionResponse$Outbound` instead. */
  export type Outbound = GetNextQuestionResponse$Outbound;
}

export function getNextQuestionResponseToJSON(
  getNextQuestionResponse: GetNextQuestionResponse,
): string {
  return JSON.stringify(
    GetNextQuestionResponse$outboundSchema.parse(getNextQuestionResponse),
  );
}

export function getNextQuestionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetNextQuestionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNextQuestionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNextQuestionResponse' from JSON`,
  );
}
