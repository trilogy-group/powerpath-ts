/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateStudentItemResponseStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateStudentItemResponseStatus = ClosedEnum<
  typeof UpdateStudentItemResponseStatus
>;

export const UpdateStudentItemResponseScoreStatus = {
  Exempt: "exempt",
  FullyGraded: "fully graded",
  NotSubmitted: "not submitted",
  PartiallyGraded: "partially graded",
  Submitted: "submitted",
} as const;
export type UpdateStudentItemResponseScoreStatus = ClosedEnum<
  typeof UpdateStudentItemResponseScoreStatus
>;

export type UpdateStudentItemResponseLearningObjectiveId = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

export type UpdateStudentItemResponseLearningObjectiveSet = {
  source: string;
  learningObjectiveIds: Array<UpdateStudentItemResponseLearningObjectiveId>;
};

/**
 * The student's result for the item, either a component or a componentResource
 */
export type UpdateStudentItemResponseResult = {
  status: UpdateStudentItemResponseStatus;
  metadata?: { [k: string]: any } | null | undefined;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: Date;
  scorePercentile?: number | null | undefined;
  scoreStatus: UpdateStudentItemResponseScoreStatus;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<UpdateStudentItemResponseLearningObjectiveSet>
    | null
    | undefined;
  inProgress?: string | null | undefined;
  incomplete?: string | null | undefined;
  late?: string | null | undefined;
  missing?: string | null | undefined;
};

export type UpdateStudentItemResponseRequest = {
  studentId: string;
  componentId?: string | undefined;
  componentResourceId?: string | undefined;
  /**
   * The student's result for the item, either a component or a componentResource
   */
  result: UpdateStudentItemResponseResult;
};

/**
 * Student item response updated
 */
export type UpdateStudentItemResponseResponse = {
  /**
   * Represents an assessment line item.
   */
  componentLineItem?: components.AssessmentLineItem | undefined;
  /**
   * Represents an assessment result.
   */
  componentResult?: components.AssessmentResult | undefined;
  /**
   * Represents an assessment line item.
   */
  componentResourceLineItem?: components.AssessmentLineItem | undefined;
  /**
   * Represents an assessment result.
   */
  componentResourceResult?: components.AssessmentResult | undefined;
};

/** @internal */
export const UpdateStudentItemResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateStudentItemResponseStatus
> = z.nativeEnum(UpdateStudentItemResponseStatus);

/** @internal */
export const UpdateStudentItemResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateStudentItemResponseStatus
> = UpdateStudentItemResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStudentItemResponseStatus$ {
  /** @deprecated use `UpdateStudentItemResponseStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateStudentItemResponseStatus$inboundSchema;
  /** @deprecated use `UpdateStudentItemResponseStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateStudentItemResponseStatus$outboundSchema;
}

/** @internal */
export const UpdateStudentItemResponseScoreStatus$inboundSchema:
  z.ZodNativeEnum<typeof UpdateStudentItemResponseScoreStatus> = z.nativeEnum(
    UpdateStudentItemResponseScoreStatus,
  );

/** @internal */
export const UpdateStudentItemResponseScoreStatus$outboundSchema:
  z.ZodNativeEnum<typeof UpdateStudentItemResponseScoreStatus> =
    UpdateStudentItemResponseScoreStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStudentItemResponseScoreStatus$ {
  /** @deprecated use `UpdateStudentItemResponseScoreStatus$inboundSchema` instead. */
  export const inboundSchema =
    UpdateStudentItemResponseScoreStatus$inboundSchema;
  /** @deprecated use `UpdateStudentItemResponseScoreStatus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStudentItemResponseScoreStatus$outboundSchema;
}

/** @internal */
export const UpdateStudentItemResponseLearningObjectiveId$inboundSchema:
  z.ZodType<
    UpdateStudentItemResponseLearningObjectiveId,
    z.ZodTypeDef,
    unknown
  > = z.object({
    learningObjectiveId: z.string(),
    score: z.number().optional(),
    textScore: z.string().optional(),
  });

/** @internal */
export type UpdateStudentItemResponseLearningObjectiveId$Outbound = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

/** @internal */
export const UpdateStudentItemResponseLearningObjectiveId$outboundSchema:
  z.ZodType<
    UpdateStudentItemResponseLearningObjectiveId$Outbound,
    z.ZodTypeDef,
    UpdateStudentItemResponseLearningObjectiveId
  > = z.object({
    learningObjectiveId: z.string(),
    score: z.number().optional(),
    textScore: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStudentItemResponseLearningObjectiveId$ {
  /** @deprecated use `UpdateStudentItemResponseLearningObjectiveId$inboundSchema` instead. */
  export const inboundSchema =
    UpdateStudentItemResponseLearningObjectiveId$inboundSchema;
  /** @deprecated use `UpdateStudentItemResponseLearningObjectiveId$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStudentItemResponseLearningObjectiveId$outboundSchema;
  /** @deprecated use `UpdateStudentItemResponseLearningObjectiveId$Outbound` instead. */
  export type Outbound = UpdateStudentItemResponseLearningObjectiveId$Outbound;
}

export function updateStudentItemResponseLearningObjectiveIdToJSON(
  updateStudentItemResponseLearningObjectiveId:
    UpdateStudentItemResponseLearningObjectiveId,
): string {
  return JSON.stringify(
    UpdateStudentItemResponseLearningObjectiveId$outboundSchema.parse(
      updateStudentItemResponseLearningObjectiveId,
    ),
  );
}

export function updateStudentItemResponseLearningObjectiveIdFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateStudentItemResponseLearningObjectiveId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateStudentItemResponseLearningObjectiveId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateStudentItemResponseLearningObjectiveId' from JSON`,
  );
}

/** @internal */
export const UpdateStudentItemResponseLearningObjectiveSet$inboundSchema:
  z.ZodType<
    UpdateStudentItemResponseLearningObjectiveSet,
    z.ZodTypeDef,
    unknown
  > = z.object({
    source: z.string(),
    learningObjectiveIds: z.array(
      z.lazy(() => UpdateStudentItemResponseLearningObjectiveId$inboundSchema),
    ),
  });

/** @internal */
export type UpdateStudentItemResponseLearningObjectiveSet$Outbound = {
  source: string;
  learningObjectiveIds: Array<
    UpdateStudentItemResponseLearningObjectiveId$Outbound
  >;
};

/** @internal */
export const UpdateStudentItemResponseLearningObjectiveSet$outboundSchema:
  z.ZodType<
    UpdateStudentItemResponseLearningObjectiveSet$Outbound,
    z.ZodTypeDef,
    UpdateStudentItemResponseLearningObjectiveSet
  > = z.object({
    source: z.string(),
    learningObjectiveIds: z.array(
      z.lazy(() => UpdateStudentItemResponseLearningObjectiveId$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStudentItemResponseLearningObjectiveSet$ {
  /** @deprecated use `UpdateStudentItemResponseLearningObjectiveSet$inboundSchema` instead. */
  export const inboundSchema =
    UpdateStudentItemResponseLearningObjectiveSet$inboundSchema;
  /** @deprecated use `UpdateStudentItemResponseLearningObjectiveSet$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStudentItemResponseLearningObjectiveSet$outboundSchema;
  /** @deprecated use `UpdateStudentItemResponseLearningObjectiveSet$Outbound` instead. */
  export type Outbound = UpdateStudentItemResponseLearningObjectiveSet$Outbound;
}

export function updateStudentItemResponseLearningObjectiveSetToJSON(
  updateStudentItemResponseLearningObjectiveSet:
    UpdateStudentItemResponseLearningObjectiveSet,
): string {
  return JSON.stringify(
    UpdateStudentItemResponseLearningObjectiveSet$outboundSchema.parse(
      updateStudentItemResponseLearningObjectiveSet,
    ),
  );
}

export function updateStudentItemResponseLearningObjectiveSetFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateStudentItemResponseLearningObjectiveSet,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateStudentItemResponseLearningObjectiveSet$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateStudentItemResponseLearningObjectiveSet' from JSON`,
  );
}

/** @internal */
export const UpdateStudentItemResponseResult$inboundSchema: z.ZodType<
  UpdateStudentItemResponseResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: UpdateStudentItemResponseStatus$inboundSchema,
  metadata: z.nullable(z.record(z.any())).optional(),
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  scorePercentile: z.nullable(z.number()).optional(),
  scoreStatus: UpdateStudentItemResponseScoreStatus$inboundSchema,
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() =>
      UpdateStudentItemResponseLearningObjectiveSet$inboundSchema
    )),
  ).optional(),
  inProgress: z.nullable(z.string()).optional(),
  incomplete: z.nullable(z.string()).optional(),
  late: z.nullable(z.string()).optional(),
  missing: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateStudentItemResponseResult$Outbound = {
  status: string;
  metadata?: { [k: string]: any } | null | undefined;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: string;
  scorePercentile?: number | null | undefined;
  scoreStatus: string;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<UpdateStudentItemResponseLearningObjectiveSet$Outbound>
    | null
    | undefined;
  inProgress?: string | null | undefined;
  incomplete?: string | null | undefined;
  late?: string | null | undefined;
  missing?: string | null | undefined;
};

/** @internal */
export const UpdateStudentItemResponseResult$outboundSchema: z.ZodType<
  UpdateStudentItemResponseResult$Outbound,
  z.ZodTypeDef,
  UpdateStudentItemResponseResult
> = z.object({
  status: UpdateStudentItemResponseStatus$outboundSchema,
  metadata: z.nullable(z.record(z.any())).optional(),
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.date().transform(v => v.toISOString()),
  scorePercentile: z.nullable(z.number()).optional(),
  scoreStatus: UpdateStudentItemResponseScoreStatus$outboundSchema,
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() =>
      UpdateStudentItemResponseLearningObjectiveSet$outboundSchema
    )),
  ).optional(),
  inProgress: z.nullable(z.string()).optional(),
  incomplete: z.nullable(z.string()).optional(),
  late: z.nullable(z.string()).optional(),
  missing: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStudentItemResponseResult$ {
  /** @deprecated use `UpdateStudentItemResponseResult$inboundSchema` instead. */
  export const inboundSchema = UpdateStudentItemResponseResult$inboundSchema;
  /** @deprecated use `UpdateStudentItemResponseResult$outboundSchema` instead. */
  export const outboundSchema = UpdateStudentItemResponseResult$outboundSchema;
  /** @deprecated use `UpdateStudentItemResponseResult$Outbound` instead. */
  export type Outbound = UpdateStudentItemResponseResult$Outbound;
}

export function updateStudentItemResponseResultToJSON(
  updateStudentItemResponseResult: UpdateStudentItemResponseResult,
): string {
  return JSON.stringify(
    UpdateStudentItemResponseResult$outboundSchema.parse(
      updateStudentItemResponseResult,
    ),
  );
}

export function updateStudentItemResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStudentItemResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStudentItemResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStudentItemResponseResult' from JSON`,
  );
}

/** @internal */
export const UpdateStudentItemResponseRequest$inboundSchema: z.ZodType<
  UpdateStudentItemResponseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  studentId: z.string(),
  componentId: z.string().optional(),
  componentResourceId: z.string().optional(),
  result: z.lazy(() => UpdateStudentItemResponseResult$inboundSchema),
});

/** @internal */
export type UpdateStudentItemResponseRequest$Outbound = {
  studentId: string;
  componentId?: string | undefined;
  componentResourceId?: string | undefined;
  result: UpdateStudentItemResponseResult$Outbound;
};

/** @internal */
export const UpdateStudentItemResponseRequest$outboundSchema: z.ZodType<
  UpdateStudentItemResponseRequest$Outbound,
  z.ZodTypeDef,
  UpdateStudentItemResponseRequest
> = z.object({
  studentId: z.string(),
  componentId: z.string().optional(),
  componentResourceId: z.string().optional(),
  result: z.lazy(() => UpdateStudentItemResponseResult$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStudentItemResponseRequest$ {
  /** @deprecated use `UpdateStudentItemResponseRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateStudentItemResponseRequest$inboundSchema;
  /** @deprecated use `UpdateStudentItemResponseRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateStudentItemResponseRequest$outboundSchema;
  /** @deprecated use `UpdateStudentItemResponseRequest$Outbound` instead. */
  export type Outbound = UpdateStudentItemResponseRequest$Outbound;
}

export function updateStudentItemResponseRequestToJSON(
  updateStudentItemResponseRequest: UpdateStudentItemResponseRequest,
): string {
  return JSON.stringify(
    UpdateStudentItemResponseRequest$outboundSchema.parse(
      updateStudentItemResponseRequest,
    ),
  );
}

export function updateStudentItemResponseRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStudentItemResponseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStudentItemResponseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStudentItemResponseRequest' from JSON`,
  );
}

/** @internal */
export const UpdateStudentItemResponseResponse$inboundSchema: z.ZodType<
  UpdateStudentItemResponseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  componentLineItem: components.AssessmentLineItem$inboundSchema.optional(),
  componentResult: components.AssessmentResult$inboundSchema.optional(),
  componentResourceLineItem: components.AssessmentLineItem$inboundSchema
    .optional(),
  componentResourceResult: components.AssessmentResult$inboundSchema.optional(),
});

/** @internal */
export type UpdateStudentItemResponseResponse$Outbound = {
  componentLineItem?: components.AssessmentLineItem$Outbound | undefined;
  componentResult?: components.AssessmentResult$Outbound | undefined;
  componentResourceLineItem?:
    | components.AssessmentLineItem$Outbound
    | undefined;
  componentResourceResult?: components.AssessmentResult$Outbound | undefined;
};

/** @internal */
export const UpdateStudentItemResponseResponse$outboundSchema: z.ZodType<
  UpdateStudentItemResponseResponse$Outbound,
  z.ZodTypeDef,
  UpdateStudentItemResponseResponse
> = z.object({
  componentLineItem: components.AssessmentLineItem$outboundSchema.optional(),
  componentResult: components.AssessmentResult$outboundSchema.optional(),
  componentResourceLineItem: components.AssessmentLineItem$outboundSchema
    .optional(),
  componentResourceResult: components.AssessmentResult$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStudentItemResponseResponse$ {
  /** @deprecated use `UpdateStudentItemResponseResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateStudentItemResponseResponse$inboundSchema;
  /** @deprecated use `UpdateStudentItemResponseResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateStudentItemResponseResponse$outboundSchema;
  /** @deprecated use `UpdateStudentItemResponseResponse$Outbound` instead. */
  export type Outbound = UpdateStudentItemResponseResponse$Outbound;
}

export function updateStudentItemResponseResponseToJSON(
  updateStudentItemResponseResponse: UpdateStudentItemResponseResponse,
): string {
  return JSON.stringify(
    UpdateStudentItemResponseResponse$outboundSchema.parse(
      updateStudentItemResponseResponse,
    ),
  );
}

export function updateStudentItemResponseResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStudentItemResponseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStudentItemResponseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStudentItemResponseResponse' from JSON`,
  );
}
