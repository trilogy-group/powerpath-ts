/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResetAttemptRequest = {
  /**
   * The sourcedId of the student for who the attempt should be reset
   */
  student: string;
  /**
   * The sourcedId of the lesson (ComponentResource)
   */
  lesson: string;
};

/**
 * Success
 */
export type ResetAttemptResponse = {
  /**
   * Whether the reset was successful
   */
  success: boolean;
  /**
   * The reset score (always 0)
   */
  score: number;
};

/** @internal */
export const ResetAttemptRequest$inboundSchema: z.ZodType<
  ResetAttemptRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  student: z.string(),
  lesson: z.string(),
});

/** @internal */
export type ResetAttemptRequest$Outbound = {
  student: string;
  lesson: string;
};

/** @internal */
export const ResetAttemptRequest$outboundSchema: z.ZodType<
  ResetAttemptRequest$Outbound,
  z.ZodTypeDef,
  ResetAttemptRequest
> = z.object({
  student: z.string(),
  lesson: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResetAttemptRequest$ {
  /** @deprecated use `ResetAttemptRequest$inboundSchema` instead. */
  export const inboundSchema = ResetAttemptRequest$inboundSchema;
  /** @deprecated use `ResetAttemptRequest$outboundSchema` instead. */
  export const outboundSchema = ResetAttemptRequest$outboundSchema;
  /** @deprecated use `ResetAttemptRequest$Outbound` instead. */
  export type Outbound = ResetAttemptRequest$Outbound;
}

export function resetAttemptRequestToJSON(
  resetAttemptRequest: ResetAttemptRequest,
): string {
  return JSON.stringify(
    ResetAttemptRequest$outboundSchema.parse(resetAttemptRequest),
  );
}

export function resetAttemptRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResetAttemptRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResetAttemptRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResetAttemptRequest' from JSON`,
  );
}

/** @internal */
export const ResetAttemptResponse$inboundSchema: z.ZodType<
  ResetAttemptResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  score: z.number(),
});

/** @internal */
export type ResetAttemptResponse$Outbound = {
  success: boolean;
  score: number;
};

/** @internal */
export const ResetAttemptResponse$outboundSchema: z.ZodType<
  ResetAttemptResponse$Outbound,
  z.ZodTypeDef,
  ResetAttemptResponse
> = z.object({
  success: z.boolean(),
  score: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResetAttemptResponse$ {
  /** @deprecated use `ResetAttemptResponse$inboundSchema` instead. */
  export const inboundSchema = ResetAttemptResponse$inboundSchema;
  /** @deprecated use `ResetAttemptResponse$outboundSchema` instead. */
  export const outboundSchema = ResetAttemptResponse$outboundSchema;
  /** @deprecated use `ResetAttemptResponse$Outbound` instead. */
  export type Outbound = ResetAttemptResponse$Outbound;
}

export function resetAttemptResponseToJSON(
  resetAttemptResponse: ResetAttemptResponse,
): string {
  return JSON.stringify(
    ResetAttemptResponse$outboundSchema.parse(resetAttemptResponse),
  );
}

export function resetAttemptResponseFromJSON(
  jsonString: string,
): SafeParseResult<ResetAttemptResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResetAttemptResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResetAttemptResponse' from JSON`,
  );
}
