/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { PowerPathError } from "./powerpatherror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TooManyRequestsResponseImsxCodeMinorField = {
  imsxCodeMinorFieldName?: "TargetEndSystem" | undefined;
  imsxCodeMinorFieldValue?: "server_busy" | undefined;
};

export type TooManyRequestsResponseImsxCodeMinor = {
  imsxCodeMinorField: Array<TooManyRequestsResponseImsxCodeMinorField>;
};

export type TooManyRequestsResponseErrorData = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: TooManyRequestsResponseImsxCodeMinor;
  imsxErrorDetails?: Array<{ [k: string]: string }> | undefined;
};

export class TooManyRequestsResponseError extends PowerPathError {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: TooManyRequestsResponseImsxCodeMinor;
  imsxErrorDetails?: Array<{ [k: string]: string }> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TooManyRequestsResponseErrorData;

  constructor(
    err: TooManyRequestsResponseErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;
    if (err.imsxErrorDetails != null) {
      this.imsxErrorDetails = err.imsxErrorDetails;
    }

    this.name = "TooManyRequestsResponseError";
  }
}

/** @internal */
export const TooManyRequestsResponseImsxCodeMinorField$inboundSchema: z.ZodType<
  TooManyRequestsResponseImsxCodeMinorField,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorFieldName: z.literal("TargetEndSystem").default(
    "TargetEndSystem",
  ).optional(),
  imsx_codeMinorFieldValue: z.literal("server_busy").default("server_busy")
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorFieldName": "imsxCodeMinorFieldName",
    "imsx_codeMinorFieldValue": "imsxCodeMinorFieldValue",
  });
});

/** @internal */
export type TooManyRequestsResponseImsxCodeMinorField$Outbound = {
  imsx_codeMinorFieldName: "TargetEndSystem";
  imsx_codeMinorFieldValue: "server_busy";
};

/** @internal */
export const TooManyRequestsResponseImsxCodeMinorField$outboundSchema:
  z.ZodType<
    TooManyRequestsResponseImsxCodeMinorField$Outbound,
    z.ZodTypeDef,
    TooManyRequestsResponseImsxCodeMinorField
  > = z.object({
    imsxCodeMinorFieldName: z.literal("TargetEndSystem").default(
      "TargetEndSystem" as const,
    ),
    imsxCodeMinorFieldValue: z.literal("server_busy").default(
      "server_busy" as const,
    ),
  }).transform((v) => {
    return remap$(v, {
      imsxCodeMinorFieldName: "imsx_codeMinorFieldName",
      imsxCodeMinorFieldValue: "imsx_codeMinorFieldValue",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyRequestsResponseImsxCodeMinorField$ {
  /** @deprecated use `TooManyRequestsResponseImsxCodeMinorField$inboundSchema` instead. */
  export const inboundSchema =
    TooManyRequestsResponseImsxCodeMinorField$inboundSchema;
  /** @deprecated use `TooManyRequestsResponseImsxCodeMinorField$outboundSchema` instead. */
  export const outboundSchema =
    TooManyRequestsResponseImsxCodeMinorField$outboundSchema;
  /** @deprecated use `TooManyRequestsResponseImsxCodeMinorField$Outbound` instead. */
  export type Outbound = TooManyRequestsResponseImsxCodeMinorField$Outbound;
}

export function tooManyRequestsResponseImsxCodeMinorFieldToJSON(
  tooManyRequestsResponseImsxCodeMinorField:
    TooManyRequestsResponseImsxCodeMinorField,
): string {
  return JSON.stringify(
    TooManyRequestsResponseImsxCodeMinorField$outboundSchema.parse(
      tooManyRequestsResponseImsxCodeMinorField,
    ),
  );
}

export function tooManyRequestsResponseImsxCodeMinorFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  TooManyRequestsResponseImsxCodeMinorField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TooManyRequestsResponseImsxCodeMinorField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TooManyRequestsResponseImsxCodeMinorField' from JSON`,
  );
}

/** @internal */
export const TooManyRequestsResponseImsxCodeMinor$inboundSchema: z.ZodType<
  TooManyRequestsResponseImsxCodeMinor,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorField: z.array(
    z.lazy(() => TooManyRequestsResponseImsxCodeMinorField$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorField": "imsxCodeMinorField",
  });
});

/** @internal */
export type TooManyRequestsResponseImsxCodeMinor$Outbound = {
  imsx_codeMinorField: Array<
    TooManyRequestsResponseImsxCodeMinorField$Outbound
  >;
};

/** @internal */
export const TooManyRequestsResponseImsxCodeMinor$outboundSchema: z.ZodType<
  TooManyRequestsResponseImsxCodeMinor$Outbound,
  z.ZodTypeDef,
  TooManyRequestsResponseImsxCodeMinor
> = z.object({
  imsxCodeMinorField: z.array(
    z.lazy(() => TooManyRequestsResponseImsxCodeMinorField$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorField: "imsx_codeMinorField",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyRequestsResponseImsxCodeMinor$ {
  /** @deprecated use `TooManyRequestsResponseImsxCodeMinor$inboundSchema` instead. */
  export const inboundSchema =
    TooManyRequestsResponseImsxCodeMinor$inboundSchema;
  /** @deprecated use `TooManyRequestsResponseImsxCodeMinor$outboundSchema` instead. */
  export const outboundSchema =
    TooManyRequestsResponseImsxCodeMinor$outboundSchema;
  /** @deprecated use `TooManyRequestsResponseImsxCodeMinor$Outbound` instead. */
  export type Outbound = TooManyRequestsResponseImsxCodeMinor$Outbound;
}

export function tooManyRequestsResponseImsxCodeMinorToJSON(
  tooManyRequestsResponseImsxCodeMinor: TooManyRequestsResponseImsxCodeMinor,
): string {
  return JSON.stringify(
    TooManyRequestsResponseImsxCodeMinor$outboundSchema.parse(
      tooManyRequestsResponseImsxCodeMinor,
    ),
  );
}

export function tooManyRequestsResponseImsxCodeMinorFromJSON(
  jsonString: string,
): SafeParseResult<TooManyRequestsResponseImsxCodeMinor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TooManyRequestsResponseImsxCodeMinor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TooManyRequestsResponseImsxCodeMinor' from JSON`,
  );
}

/** @internal */
export const TooManyRequestsResponseError$inboundSchema: z.ZodType<
  TooManyRequestsResponseError,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure").default("failure"),
  imsx_severity: z.literal("error").default("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() =>
    TooManyRequestsResponseImsxCodeMinor$inboundSchema
  ),
  imsx_error_details: z.array(z.record(z.string())).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
      "imsx_error_details": "imsxErrorDetails",
    });

    return new TooManyRequestsResponseError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TooManyRequestsResponseError$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: TooManyRequestsResponseImsxCodeMinor$Outbound;
  imsx_error_details?: Array<{ [k: string]: string }> | undefined;
};

/** @internal */
export const TooManyRequestsResponseError$outboundSchema: z.ZodType<
  TooManyRequestsResponseError$Outbound,
  z.ZodTypeDef,
  TooManyRequestsResponseError
> = z.instanceof(TooManyRequestsResponseError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        TooManyRequestsResponseImsxCodeMinor$outboundSchema
      ),
      imsxErrorDetails: z.array(z.record(z.string())).optional(),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
        imsxErrorDetails: "imsx_error_details",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyRequestsResponseError$ {
  /** @deprecated use `TooManyRequestsResponseError$inboundSchema` instead. */
  export const inboundSchema = TooManyRequestsResponseError$inboundSchema;
  /** @deprecated use `TooManyRequestsResponseError$outboundSchema` instead. */
  export const outboundSchema = TooManyRequestsResponseError$outboundSchema;
  /** @deprecated use `TooManyRequestsResponseError$Outbound` instead. */
  export type Outbound = TooManyRequestsResponseError$Outbound;
}
