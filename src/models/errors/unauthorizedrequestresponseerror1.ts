/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UnauthorizedRequestResponseImsxCodeMinorField1 = {
  imsxCodeMinorFieldName?: "TargetEndSystem" | undefined;
  imsxCodeMinorFieldValue?: "unauthorisedrequest" | undefined;
};

export type UnauthorizedRequestResponseImsxCodeMinor = {
  imsxCodeMinorField: Array<UnauthorizedRequestResponseImsxCodeMinorField1>;
};

export type UnauthorizedRequestResponseError1Data = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnauthorizedRequestResponseImsxCodeMinor;
};

export class UnauthorizedRequestResponseError1 extends Error {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnauthorizedRequestResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedRequestResponseError1Data;

  constructor(err: UnauthorizedRequestResponseError1Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "UnauthorizedRequestResponseError1";
  }
}

export type UnauthorizedRequestResponseError2Data = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnauthorizedRequestResponseImsxCodeMinor;
};

export class UnauthorizedRequestResponseError2 extends Error {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnauthorizedRequestResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedRequestResponseError2Data;

  constructor(err: UnauthorizedRequestResponseError2Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "UnauthorizedRequestResponseError2";
  }
}

/** @internal */
export const UnauthorizedRequestResponseImsxCodeMinorField1$inboundSchema:
  z.ZodType<
    UnauthorizedRequestResponseImsxCodeMinorField1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    imsx_codeMinorFieldName: z.literal("TargetEndSystem").optional(),
    imsx_codeMinorFieldValue: z.literal("unauthorisedrequest").optional(),
  }).transform((v) => {
    return remap$(v, {
      "imsx_codeMinorFieldName": "imsxCodeMinorFieldName",
      "imsx_codeMinorFieldValue": "imsxCodeMinorFieldValue",
    });
  });

/** @internal */
export type UnauthorizedRequestResponseImsxCodeMinorField1$Outbound = {
  imsx_codeMinorFieldName: "TargetEndSystem";
  imsx_codeMinorFieldValue: "unauthorisedrequest";
};

/** @internal */
export const UnauthorizedRequestResponseImsxCodeMinorField1$outboundSchema:
  z.ZodType<
    UnauthorizedRequestResponseImsxCodeMinorField1$Outbound,
    z.ZodTypeDef,
    UnauthorizedRequestResponseImsxCodeMinorField1
  > = z.object({
    imsxCodeMinorFieldName: z.literal("TargetEndSystem").default(
      "TargetEndSystem" as const,
    ),
    imsxCodeMinorFieldValue: z.literal("unauthorisedrequest").default(
      "unauthorisedrequest" as const,
    ),
  }).transform((v) => {
    return remap$(v, {
      imsxCodeMinorFieldName: "imsx_codeMinorFieldName",
      imsxCodeMinorFieldValue: "imsx_codeMinorFieldValue",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedRequestResponseImsxCodeMinorField1$ {
  /** @deprecated use `UnauthorizedRequestResponseImsxCodeMinorField1$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedRequestResponseImsxCodeMinorField1$inboundSchema;
  /** @deprecated use `UnauthorizedRequestResponseImsxCodeMinorField1$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedRequestResponseImsxCodeMinorField1$outboundSchema;
  /** @deprecated use `UnauthorizedRequestResponseImsxCodeMinorField1$Outbound` instead. */
  export type Outbound =
    UnauthorizedRequestResponseImsxCodeMinorField1$Outbound;
}

export function unauthorizedRequestResponseImsxCodeMinorField1ToJSON(
  unauthorizedRequestResponseImsxCodeMinorField1:
    UnauthorizedRequestResponseImsxCodeMinorField1,
): string {
  return JSON.stringify(
    UnauthorizedRequestResponseImsxCodeMinorField1$outboundSchema.parse(
      unauthorizedRequestResponseImsxCodeMinorField1,
    ),
  );
}

export function unauthorizedRequestResponseImsxCodeMinorField1FromJSON(
  jsonString: string,
): SafeParseResult<
  UnauthorizedRequestResponseImsxCodeMinorField1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnauthorizedRequestResponseImsxCodeMinorField1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnauthorizedRequestResponseImsxCodeMinorField1' from JSON`,
  );
}

/** @internal */
export const UnauthorizedRequestResponseImsxCodeMinor$inboundSchema: z.ZodType<
  UnauthorizedRequestResponseImsxCodeMinor,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorField: z.array(
    z.lazy(() => UnauthorizedRequestResponseImsxCodeMinorField1$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorField": "imsxCodeMinorField",
  });
});

/** @internal */
export type UnauthorizedRequestResponseImsxCodeMinor$Outbound = {
  imsx_codeMinorField: Array<
    UnauthorizedRequestResponseImsxCodeMinorField1$Outbound
  >;
};

/** @internal */
export const UnauthorizedRequestResponseImsxCodeMinor$outboundSchema: z.ZodType<
  UnauthorizedRequestResponseImsxCodeMinor$Outbound,
  z.ZodTypeDef,
  UnauthorizedRequestResponseImsxCodeMinor
> = z.object({
  imsxCodeMinorField: z.array(
    z.lazy(() => UnauthorizedRequestResponseImsxCodeMinorField1$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorField: "imsx_codeMinorField",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedRequestResponseImsxCodeMinor$ {
  /** @deprecated use `UnauthorizedRequestResponseImsxCodeMinor$inboundSchema` instead. */
  export const inboundSchema =
    UnauthorizedRequestResponseImsxCodeMinor$inboundSchema;
  /** @deprecated use `UnauthorizedRequestResponseImsxCodeMinor$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedRequestResponseImsxCodeMinor$outboundSchema;
  /** @deprecated use `UnauthorizedRequestResponseImsxCodeMinor$Outbound` instead. */
  export type Outbound = UnauthorizedRequestResponseImsxCodeMinor$Outbound;
}

export function unauthorizedRequestResponseImsxCodeMinorToJSON(
  unauthorizedRequestResponseImsxCodeMinor:
    UnauthorizedRequestResponseImsxCodeMinor,
): string {
  return JSON.stringify(
    UnauthorizedRequestResponseImsxCodeMinor$outboundSchema.parse(
      unauthorizedRequestResponseImsxCodeMinor,
    ),
  );
}

export function unauthorizedRequestResponseImsxCodeMinorFromJSON(
  jsonString: string,
): SafeParseResult<
  UnauthorizedRequestResponseImsxCodeMinor,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnauthorizedRequestResponseImsxCodeMinor$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnauthorizedRequestResponseImsxCodeMinor' from JSON`,
  );
}

/** @internal */
export const UnauthorizedRequestResponseError1$inboundSchema: z.ZodType<
  UnauthorizedRequestResponseError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure"),
  imsx_severity: z.literal("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() =>
    UnauthorizedRequestResponseImsxCodeMinor$inboundSchema
  ),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new UnauthorizedRequestResponseError1(remapped);
  });

/** @internal */
export type UnauthorizedRequestResponseError1$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: UnauthorizedRequestResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const UnauthorizedRequestResponseError1$outboundSchema: z.ZodType<
  UnauthorizedRequestResponseError1$Outbound,
  z.ZodTypeDef,
  UnauthorizedRequestResponseError1
> = z.instanceof(UnauthorizedRequestResponseError1)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        UnauthorizedRequestResponseImsxCodeMinor$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedRequestResponseError1$ {
  /** @deprecated use `UnauthorizedRequestResponseError1$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedRequestResponseError1$inboundSchema;
  /** @deprecated use `UnauthorizedRequestResponseError1$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedRequestResponseError1$outboundSchema;
  /** @deprecated use `UnauthorizedRequestResponseError1$Outbound` instead. */
  export type Outbound = UnauthorizedRequestResponseError1$Outbound;
}

/** @internal */
export const UnauthorizedRequestResponseError2$inboundSchema: z.ZodType<
  UnauthorizedRequestResponseError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure"),
  imsx_severity: z.literal("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() =>
    UnauthorizedRequestResponseImsxCodeMinor$inboundSchema
  ),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new UnauthorizedRequestResponseError2(remapped);
  });

/** @internal */
export type UnauthorizedRequestResponseError2$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: UnauthorizedRequestResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const UnauthorizedRequestResponseError2$outboundSchema: z.ZodType<
  UnauthorizedRequestResponseError2$Outbound,
  z.ZodTypeDef,
  UnauthorizedRequestResponseError2
> = z.instanceof(UnauthorizedRequestResponseError2)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        UnauthorizedRequestResponseImsxCodeMinor$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedRequestResponseError2$ {
  /** @deprecated use `UnauthorizedRequestResponseError2$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedRequestResponseError2$inboundSchema;
  /** @deprecated use `UnauthorizedRequestResponseError2$outboundSchema` instead. */
  export const outboundSchema =
    UnauthorizedRequestResponseError2$outboundSchema;
  /** @deprecated use `UnauthorizedRequestResponseError2$Outbound` instead. */
  export type Outbound = UnauthorizedRequestResponseError2$Outbound;
}
