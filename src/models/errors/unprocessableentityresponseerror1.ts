/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UnprocessableEntityResponseImsxCodeMinorField1 = {
  imsxCodeMinorFieldName?: "TargetEndSystem" | undefined;
  imsxCodeMinorFieldValue?: "invaliddata" | undefined;
};

export type UnprocessableEntityResponseImsxCodeMinor = {
  imsxCodeMinorField: Array<UnprocessableEntityResponseImsxCodeMinorField1>;
};

export type UnprocessableEntityResponseError1Data = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnprocessableEntityResponseImsxCodeMinor;
};

export class UnprocessableEntityResponseError1 extends Error {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnprocessableEntityResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: UnprocessableEntityResponseError1Data;

  constructor(err: UnprocessableEntityResponseError1Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "UnprocessableEntityResponseError1";
  }
}

export type UnprocessableEntityResponseError2Data = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnprocessableEntityResponseImsxCodeMinor;
};

export class UnprocessableEntityResponseError2 extends Error {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnprocessableEntityResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: UnprocessableEntityResponseError2Data;

  constructor(err: UnprocessableEntityResponseError2Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "UnprocessableEntityResponseError2";
  }
}

/** @internal */
export const UnprocessableEntityResponseImsxCodeMinorField1$inboundSchema:
  z.ZodType<
    UnprocessableEntityResponseImsxCodeMinorField1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    imsx_codeMinorFieldName: z.literal("TargetEndSystem").optional(),
    imsx_codeMinorFieldValue: z.literal("invaliddata").optional(),
  }).transform((v) => {
    return remap$(v, {
      "imsx_codeMinorFieldName": "imsxCodeMinorFieldName",
      "imsx_codeMinorFieldValue": "imsxCodeMinorFieldValue",
    });
  });

/** @internal */
export type UnprocessableEntityResponseImsxCodeMinorField1$Outbound = {
  imsx_codeMinorFieldName: "TargetEndSystem";
  imsx_codeMinorFieldValue: "invaliddata";
};

/** @internal */
export const UnprocessableEntityResponseImsxCodeMinorField1$outboundSchema:
  z.ZodType<
    UnprocessableEntityResponseImsxCodeMinorField1$Outbound,
    z.ZodTypeDef,
    UnprocessableEntityResponseImsxCodeMinorField1
  > = z.object({
    imsxCodeMinorFieldName: z.literal("TargetEndSystem").default(
      "TargetEndSystem" as const,
    ),
    imsxCodeMinorFieldValue: z.literal("invaliddata").default(
      "invaliddata" as const,
    ),
  }).transform((v) => {
    return remap$(v, {
      imsxCodeMinorFieldName: "imsx_codeMinorFieldName",
      imsxCodeMinorFieldValue: "imsx_codeMinorFieldValue",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityResponseImsxCodeMinorField1$ {
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinorField1$inboundSchema` instead. */
  export const inboundSchema =
    UnprocessableEntityResponseImsxCodeMinorField1$inboundSchema;
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinorField1$outboundSchema` instead. */
  export const outboundSchema =
    UnprocessableEntityResponseImsxCodeMinorField1$outboundSchema;
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinorField1$Outbound` instead. */
  export type Outbound =
    UnprocessableEntityResponseImsxCodeMinorField1$Outbound;
}

export function unprocessableEntityResponseImsxCodeMinorField1ToJSON(
  unprocessableEntityResponseImsxCodeMinorField1:
    UnprocessableEntityResponseImsxCodeMinorField1,
): string {
  return JSON.stringify(
    UnprocessableEntityResponseImsxCodeMinorField1$outboundSchema.parse(
      unprocessableEntityResponseImsxCodeMinorField1,
    ),
  );
}

export function unprocessableEntityResponseImsxCodeMinorField1FromJSON(
  jsonString: string,
): SafeParseResult<
  UnprocessableEntityResponseImsxCodeMinorField1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnprocessableEntityResponseImsxCodeMinorField1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnprocessableEntityResponseImsxCodeMinorField1' from JSON`,
  );
}

/** @internal */
export const UnprocessableEntityResponseImsxCodeMinor$inboundSchema: z.ZodType<
  UnprocessableEntityResponseImsxCodeMinor,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorField: z.array(
    z.lazy(() => UnprocessableEntityResponseImsxCodeMinorField1$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorField": "imsxCodeMinorField",
  });
});

/** @internal */
export type UnprocessableEntityResponseImsxCodeMinor$Outbound = {
  imsx_codeMinorField: Array<
    UnprocessableEntityResponseImsxCodeMinorField1$Outbound
  >;
};

/** @internal */
export const UnprocessableEntityResponseImsxCodeMinor$outboundSchema: z.ZodType<
  UnprocessableEntityResponseImsxCodeMinor$Outbound,
  z.ZodTypeDef,
  UnprocessableEntityResponseImsxCodeMinor
> = z.object({
  imsxCodeMinorField: z.array(
    z.lazy(() => UnprocessableEntityResponseImsxCodeMinorField1$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorField: "imsx_codeMinorField",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityResponseImsxCodeMinor$ {
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinor$inboundSchema` instead. */
  export const inboundSchema =
    UnprocessableEntityResponseImsxCodeMinor$inboundSchema;
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinor$outboundSchema` instead. */
  export const outboundSchema =
    UnprocessableEntityResponseImsxCodeMinor$outboundSchema;
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinor$Outbound` instead. */
  export type Outbound = UnprocessableEntityResponseImsxCodeMinor$Outbound;
}

export function unprocessableEntityResponseImsxCodeMinorToJSON(
  unprocessableEntityResponseImsxCodeMinor:
    UnprocessableEntityResponseImsxCodeMinor,
): string {
  return JSON.stringify(
    UnprocessableEntityResponseImsxCodeMinor$outboundSchema.parse(
      unprocessableEntityResponseImsxCodeMinor,
    ),
  );
}

export function unprocessableEntityResponseImsxCodeMinorFromJSON(
  jsonString: string,
): SafeParseResult<
  UnprocessableEntityResponseImsxCodeMinor,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnprocessableEntityResponseImsxCodeMinor$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnprocessableEntityResponseImsxCodeMinor' from JSON`,
  );
}

/** @internal */
export const UnprocessableEntityResponseError1$inboundSchema: z.ZodType<
  UnprocessableEntityResponseError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure"),
  imsx_severity: z.literal("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() =>
    UnprocessableEntityResponseImsxCodeMinor$inboundSchema
  ),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new UnprocessableEntityResponseError1(remapped);
  });

/** @internal */
export type UnprocessableEntityResponseError1$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: UnprocessableEntityResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const UnprocessableEntityResponseError1$outboundSchema: z.ZodType<
  UnprocessableEntityResponseError1$Outbound,
  z.ZodTypeDef,
  UnprocessableEntityResponseError1
> = z.instanceof(UnprocessableEntityResponseError1)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        UnprocessableEntityResponseImsxCodeMinor$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityResponseError1$ {
  /** @deprecated use `UnprocessableEntityResponseError1$inboundSchema` instead. */
  export const inboundSchema = UnprocessableEntityResponseError1$inboundSchema;
  /** @deprecated use `UnprocessableEntityResponseError1$outboundSchema` instead. */
  export const outboundSchema =
    UnprocessableEntityResponseError1$outboundSchema;
  /** @deprecated use `UnprocessableEntityResponseError1$Outbound` instead. */
  export type Outbound = UnprocessableEntityResponseError1$Outbound;
}

/** @internal */
export const UnprocessableEntityResponseError2$inboundSchema: z.ZodType<
  UnprocessableEntityResponseError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure"),
  imsx_severity: z.literal("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() =>
    UnprocessableEntityResponseImsxCodeMinor$inboundSchema
  ),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new UnprocessableEntityResponseError2(remapped);
  });

/** @internal */
export type UnprocessableEntityResponseError2$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: UnprocessableEntityResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const UnprocessableEntityResponseError2$outboundSchema: z.ZodType<
  UnprocessableEntityResponseError2$Outbound,
  z.ZodTypeDef,
  UnprocessableEntityResponseError2
> = z.instanceof(UnprocessableEntityResponseError2)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        UnprocessableEntityResponseImsxCodeMinor$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityResponseError2$ {
  /** @deprecated use `UnprocessableEntityResponseError2$inboundSchema` instead. */
  export const inboundSchema = UnprocessableEntityResponseError2$inboundSchema;
  /** @deprecated use `UnprocessableEntityResponseError2$outboundSchema` instead. */
  export const outboundSchema =
    UnprocessableEntityResponseError2$outboundSchema;
  /** @deprecated use `UnprocessableEntityResponseError2$Outbound` instead. */
  export type Outbound = UnprocessableEntityResponseError2$Outbound;
}
