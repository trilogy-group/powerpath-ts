/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { PowerPathError } from "./powerpatherror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type NotFoundResponseImsxCodeMinorField = {
  imsxCodeMinorFieldName?: "TargetEndSystem" | undefined;
  imsxCodeMinorFieldValue?: "unknownobject" | undefined;
};

export type NotFoundResponseImsxCodeMinor = {
  imsxCodeMinorField: Array<NotFoundResponseImsxCodeMinorField>;
};

export type NotFoundResponseErrorData = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: NotFoundResponseImsxCodeMinor;
};

export class NotFoundResponseError extends PowerPathError {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: NotFoundResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: NotFoundResponseErrorData;

  constructor(
    err: NotFoundResponseErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "NotFoundResponseError";
  }
}

/** @internal */
export const NotFoundResponseImsxCodeMinorField$inboundSchema: z.ZodType<
  NotFoundResponseImsxCodeMinorField,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorFieldName: z.literal("TargetEndSystem").default(
    "TargetEndSystem",
  ).optional(),
  imsx_codeMinorFieldValue: z.literal("unknownobject").default("unknownobject")
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorFieldName": "imsxCodeMinorFieldName",
    "imsx_codeMinorFieldValue": "imsxCodeMinorFieldValue",
  });
});

/** @internal */
export type NotFoundResponseImsxCodeMinorField$Outbound = {
  imsx_codeMinorFieldName: "TargetEndSystem";
  imsx_codeMinorFieldValue: "unknownobject";
};

/** @internal */
export const NotFoundResponseImsxCodeMinorField$outboundSchema: z.ZodType<
  NotFoundResponseImsxCodeMinorField$Outbound,
  z.ZodTypeDef,
  NotFoundResponseImsxCodeMinorField
> = z.object({
  imsxCodeMinorFieldName: z.literal("TargetEndSystem").default(
    "TargetEndSystem" as const,
  ),
  imsxCodeMinorFieldValue: z.literal("unknownobject").default(
    "unknownobject" as const,
  ),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorFieldName: "imsx_codeMinorFieldName",
    imsxCodeMinorFieldValue: "imsx_codeMinorFieldValue",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundResponseImsxCodeMinorField$ {
  /** @deprecated use `NotFoundResponseImsxCodeMinorField$inboundSchema` instead. */
  export const inboundSchema = NotFoundResponseImsxCodeMinorField$inboundSchema;
  /** @deprecated use `NotFoundResponseImsxCodeMinorField$outboundSchema` instead. */
  export const outboundSchema =
    NotFoundResponseImsxCodeMinorField$outboundSchema;
  /** @deprecated use `NotFoundResponseImsxCodeMinorField$Outbound` instead. */
  export type Outbound = NotFoundResponseImsxCodeMinorField$Outbound;
}

export function notFoundResponseImsxCodeMinorFieldToJSON(
  notFoundResponseImsxCodeMinorField: NotFoundResponseImsxCodeMinorField,
): string {
  return JSON.stringify(
    NotFoundResponseImsxCodeMinorField$outboundSchema.parse(
      notFoundResponseImsxCodeMinorField,
    ),
  );
}

export function notFoundResponseImsxCodeMinorFieldFromJSON(
  jsonString: string,
): SafeParseResult<NotFoundResponseImsxCodeMinorField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NotFoundResponseImsxCodeMinorField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotFoundResponseImsxCodeMinorField' from JSON`,
  );
}

/** @internal */
export const NotFoundResponseImsxCodeMinor$inboundSchema: z.ZodType<
  NotFoundResponseImsxCodeMinor,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorField: z.array(
    z.lazy(() => NotFoundResponseImsxCodeMinorField$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorField": "imsxCodeMinorField",
  });
});

/** @internal */
export type NotFoundResponseImsxCodeMinor$Outbound = {
  imsx_codeMinorField: Array<NotFoundResponseImsxCodeMinorField$Outbound>;
};

/** @internal */
export const NotFoundResponseImsxCodeMinor$outboundSchema: z.ZodType<
  NotFoundResponseImsxCodeMinor$Outbound,
  z.ZodTypeDef,
  NotFoundResponseImsxCodeMinor
> = z.object({
  imsxCodeMinorField: z.array(
    z.lazy(() => NotFoundResponseImsxCodeMinorField$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorField: "imsx_codeMinorField",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundResponseImsxCodeMinor$ {
  /** @deprecated use `NotFoundResponseImsxCodeMinor$inboundSchema` instead. */
  export const inboundSchema = NotFoundResponseImsxCodeMinor$inboundSchema;
  /** @deprecated use `NotFoundResponseImsxCodeMinor$outboundSchema` instead. */
  export const outboundSchema = NotFoundResponseImsxCodeMinor$outboundSchema;
  /** @deprecated use `NotFoundResponseImsxCodeMinor$Outbound` instead. */
  export type Outbound = NotFoundResponseImsxCodeMinor$Outbound;
}

export function notFoundResponseImsxCodeMinorToJSON(
  notFoundResponseImsxCodeMinor: NotFoundResponseImsxCodeMinor,
): string {
  return JSON.stringify(
    NotFoundResponseImsxCodeMinor$outboundSchema.parse(
      notFoundResponseImsxCodeMinor,
    ),
  );
}

export function notFoundResponseImsxCodeMinorFromJSON(
  jsonString: string,
): SafeParseResult<NotFoundResponseImsxCodeMinor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotFoundResponseImsxCodeMinor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotFoundResponseImsxCodeMinor' from JSON`,
  );
}

/** @internal */
export const NotFoundResponseError$inboundSchema: z.ZodType<
  NotFoundResponseError,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure").default("failure"),
  imsx_severity: z.literal("error").default("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() => NotFoundResponseImsxCodeMinor$inboundSchema),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new NotFoundResponseError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type NotFoundResponseError$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: NotFoundResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const NotFoundResponseError$outboundSchema: z.ZodType<
  NotFoundResponseError$Outbound,
  z.ZodTypeDef,
  NotFoundResponseError
> = z.instanceof(NotFoundResponseError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() => NotFoundResponseImsxCodeMinor$outboundSchema),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundResponseError$ {
  /** @deprecated use `NotFoundResponseError$inboundSchema` instead. */
  export const inboundSchema = NotFoundResponseError$inboundSchema;
  /** @deprecated use `NotFoundResponseError$outboundSchema` instead. */
  export const outboundSchema = NotFoundResponseError$outboundSchema;
  /** @deprecated use `NotFoundResponseError$Outbound` instead. */
  export type Outbound = NotFoundResponseError$Outbound;
}
