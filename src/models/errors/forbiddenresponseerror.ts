/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ForbiddenResponseImsxCodeMinorField = {
  imsxCodeMinorFieldName?: "TargetEndSystem" | undefined;
  imsxCodeMinorFieldValue?: "forbidden" | undefined;
};

export type ForbiddenResponseImsxCodeMinor = {
  imsxCodeMinorField: Array<ForbiddenResponseImsxCodeMinorField>;
};

export type ForbiddenResponseErrorData = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: ForbiddenResponseImsxCodeMinor;
};

export class ForbiddenResponseError extends Error {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: ForbiddenResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: ForbiddenResponseErrorData;

  constructor(err: ForbiddenResponseErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "ForbiddenResponseError";
  }
}

/** @internal */
export const ForbiddenResponseImsxCodeMinorField$inboundSchema: z.ZodType<
  ForbiddenResponseImsxCodeMinorField,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorFieldName: z.literal("TargetEndSystem").optional(),
  imsx_codeMinorFieldValue: z.literal("forbidden").optional(),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorFieldName": "imsxCodeMinorFieldName",
    "imsx_codeMinorFieldValue": "imsxCodeMinorFieldValue",
  });
});

/** @internal */
export type ForbiddenResponseImsxCodeMinorField$Outbound = {
  imsx_codeMinorFieldName: "TargetEndSystem";
  imsx_codeMinorFieldValue: "forbidden";
};

/** @internal */
export const ForbiddenResponseImsxCodeMinorField$outboundSchema: z.ZodType<
  ForbiddenResponseImsxCodeMinorField$Outbound,
  z.ZodTypeDef,
  ForbiddenResponseImsxCodeMinorField
> = z.object({
  imsxCodeMinorFieldName: z.literal("TargetEndSystem").default(
    "TargetEndSystem" as const,
  ),
  imsxCodeMinorFieldValue: z.literal("forbidden").default("forbidden" as const),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorFieldName: "imsx_codeMinorFieldName",
    imsxCodeMinorFieldValue: "imsx_codeMinorFieldValue",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForbiddenResponseImsxCodeMinorField$ {
  /** @deprecated use `ForbiddenResponseImsxCodeMinorField$inboundSchema` instead. */
  export const inboundSchema =
    ForbiddenResponseImsxCodeMinorField$inboundSchema;
  /** @deprecated use `ForbiddenResponseImsxCodeMinorField$outboundSchema` instead. */
  export const outboundSchema =
    ForbiddenResponseImsxCodeMinorField$outboundSchema;
  /** @deprecated use `ForbiddenResponseImsxCodeMinorField$Outbound` instead. */
  export type Outbound = ForbiddenResponseImsxCodeMinorField$Outbound;
}

export function forbiddenResponseImsxCodeMinorFieldToJSON(
  forbiddenResponseImsxCodeMinorField: ForbiddenResponseImsxCodeMinorField,
): string {
  return JSON.stringify(
    ForbiddenResponseImsxCodeMinorField$outboundSchema.parse(
      forbiddenResponseImsxCodeMinorField,
    ),
  );
}

export function forbiddenResponseImsxCodeMinorFieldFromJSON(
  jsonString: string,
): SafeParseResult<ForbiddenResponseImsxCodeMinorField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ForbiddenResponseImsxCodeMinorField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForbiddenResponseImsxCodeMinorField' from JSON`,
  );
}

/** @internal */
export const ForbiddenResponseImsxCodeMinor$inboundSchema: z.ZodType<
  ForbiddenResponseImsxCodeMinor,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorField: z.array(
    z.lazy(() => ForbiddenResponseImsxCodeMinorField$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorField": "imsxCodeMinorField",
  });
});

/** @internal */
export type ForbiddenResponseImsxCodeMinor$Outbound = {
  imsx_codeMinorField: Array<ForbiddenResponseImsxCodeMinorField$Outbound>;
};

/** @internal */
export const ForbiddenResponseImsxCodeMinor$outboundSchema: z.ZodType<
  ForbiddenResponseImsxCodeMinor$Outbound,
  z.ZodTypeDef,
  ForbiddenResponseImsxCodeMinor
> = z.object({
  imsxCodeMinorField: z.array(
    z.lazy(() => ForbiddenResponseImsxCodeMinorField$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorField: "imsx_codeMinorField",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForbiddenResponseImsxCodeMinor$ {
  /** @deprecated use `ForbiddenResponseImsxCodeMinor$inboundSchema` instead. */
  export const inboundSchema = ForbiddenResponseImsxCodeMinor$inboundSchema;
  /** @deprecated use `ForbiddenResponseImsxCodeMinor$outboundSchema` instead. */
  export const outboundSchema = ForbiddenResponseImsxCodeMinor$outboundSchema;
  /** @deprecated use `ForbiddenResponseImsxCodeMinor$Outbound` instead. */
  export type Outbound = ForbiddenResponseImsxCodeMinor$Outbound;
}

export function forbiddenResponseImsxCodeMinorToJSON(
  forbiddenResponseImsxCodeMinor: ForbiddenResponseImsxCodeMinor,
): string {
  return JSON.stringify(
    ForbiddenResponseImsxCodeMinor$outboundSchema.parse(
      forbiddenResponseImsxCodeMinor,
    ),
  );
}

export function forbiddenResponseImsxCodeMinorFromJSON(
  jsonString: string,
): SafeParseResult<ForbiddenResponseImsxCodeMinor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForbiddenResponseImsxCodeMinor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForbiddenResponseImsxCodeMinor' from JSON`,
  );
}

/** @internal */
export const ForbiddenResponseError$inboundSchema: z.ZodType<
  ForbiddenResponseError,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure"),
  imsx_severity: z.literal("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() => ForbiddenResponseImsxCodeMinor$inboundSchema),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new ForbiddenResponseError(remapped);
  });

/** @internal */
export type ForbiddenResponseError$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: ForbiddenResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const ForbiddenResponseError$outboundSchema: z.ZodType<
  ForbiddenResponseError$Outbound,
  z.ZodTypeDef,
  ForbiddenResponseError
> = z.instanceof(ForbiddenResponseError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        ForbiddenResponseImsxCodeMinor$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForbiddenResponseError$ {
  /** @deprecated use `ForbiddenResponseError$inboundSchema` instead. */
  export const inboundSchema = ForbiddenResponseError$inboundSchema;
  /** @deprecated use `ForbiddenResponseError$outboundSchema` instead. */
  export const outboundSchema = ForbiddenResponseError$outboundSchema;
  /** @deprecated use `ForbiddenResponseError$Outbound` instead. */
  export type Outbound = ForbiddenResponseError$Outbound;
}
