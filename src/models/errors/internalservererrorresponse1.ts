/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type InternalServerErrorResponseImsxCodeMinorField1 = {
  imsxCodeMinorFieldName?: "TargetEndSystem" | undefined;
  imsxCodeMinorFieldValue?: "internal_server_error" | undefined;
};

export type InternalServerErrorResponseImsxCodeMinor = {
  imsxCodeMinorField: Array<InternalServerErrorResponseImsxCodeMinorField1>;
};

export type InternalServerErrorResponse1Data = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: InternalServerErrorResponseImsxCodeMinor;
};

export class InternalServerErrorResponse1 extends Error {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: InternalServerErrorResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: InternalServerErrorResponse1Data;

  constructor(err: InternalServerErrorResponse1Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "InternalServerErrorResponse1";
  }
}

export type InternalServerErrorResponse2Data = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: InternalServerErrorResponseImsxCodeMinor;
};

export class InternalServerErrorResponse2 extends Error {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: InternalServerErrorResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: InternalServerErrorResponse2Data;

  constructor(err: InternalServerErrorResponse2Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "InternalServerErrorResponse2";
  }
}

/** @internal */
export const InternalServerErrorResponseImsxCodeMinorField1$inboundSchema:
  z.ZodType<
    InternalServerErrorResponseImsxCodeMinorField1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    imsx_codeMinorFieldName: z.literal("TargetEndSystem").optional(),
    imsx_codeMinorFieldValue: z.literal("internal_server_error").optional(),
  }).transform((v) => {
    return remap$(v, {
      "imsx_codeMinorFieldName": "imsxCodeMinorFieldName",
      "imsx_codeMinorFieldValue": "imsxCodeMinorFieldValue",
    });
  });

/** @internal */
export type InternalServerErrorResponseImsxCodeMinorField1$Outbound = {
  imsx_codeMinorFieldName: "TargetEndSystem";
  imsx_codeMinorFieldValue: "internal_server_error";
};

/** @internal */
export const InternalServerErrorResponseImsxCodeMinorField1$outboundSchema:
  z.ZodType<
    InternalServerErrorResponseImsxCodeMinorField1$Outbound,
    z.ZodTypeDef,
    InternalServerErrorResponseImsxCodeMinorField1
  > = z.object({
    imsxCodeMinorFieldName: z.literal("TargetEndSystem").default(
      "TargetEndSystem" as const,
    ),
    imsxCodeMinorFieldValue: z.literal("internal_server_error").default(
      "internal_server_error" as const,
    ),
  }).transform((v) => {
    return remap$(v, {
      imsxCodeMinorFieldName: "imsx_codeMinorFieldName",
      imsxCodeMinorFieldValue: "imsx_codeMinorFieldValue",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerErrorResponseImsxCodeMinorField1$ {
  /** @deprecated use `InternalServerErrorResponseImsxCodeMinorField1$inboundSchema` instead. */
  export const inboundSchema =
    InternalServerErrorResponseImsxCodeMinorField1$inboundSchema;
  /** @deprecated use `InternalServerErrorResponseImsxCodeMinorField1$outboundSchema` instead. */
  export const outboundSchema =
    InternalServerErrorResponseImsxCodeMinorField1$outboundSchema;
  /** @deprecated use `InternalServerErrorResponseImsxCodeMinorField1$Outbound` instead. */
  export type Outbound =
    InternalServerErrorResponseImsxCodeMinorField1$Outbound;
}

export function internalServerErrorResponseImsxCodeMinorField1ToJSON(
  internalServerErrorResponseImsxCodeMinorField1:
    InternalServerErrorResponseImsxCodeMinorField1,
): string {
  return JSON.stringify(
    InternalServerErrorResponseImsxCodeMinorField1$outboundSchema.parse(
      internalServerErrorResponseImsxCodeMinorField1,
    ),
  );
}

export function internalServerErrorResponseImsxCodeMinorField1FromJSON(
  jsonString: string,
): SafeParseResult<
  InternalServerErrorResponseImsxCodeMinorField1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InternalServerErrorResponseImsxCodeMinorField1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InternalServerErrorResponseImsxCodeMinorField1' from JSON`,
  );
}

/** @internal */
export const InternalServerErrorResponseImsxCodeMinor$inboundSchema: z.ZodType<
  InternalServerErrorResponseImsxCodeMinor,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorField: z.array(
    z.lazy(() => InternalServerErrorResponseImsxCodeMinorField1$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorField": "imsxCodeMinorField",
  });
});

/** @internal */
export type InternalServerErrorResponseImsxCodeMinor$Outbound = {
  imsx_codeMinorField: Array<
    InternalServerErrorResponseImsxCodeMinorField1$Outbound
  >;
};

/** @internal */
export const InternalServerErrorResponseImsxCodeMinor$outboundSchema: z.ZodType<
  InternalServerErrorResponseImsxCodeMinor$Outbound,
  z.ZodTypeDef,
  InternalServerErrorResponseImsxCodeMinor
> = z.object({
  imsxCodeMinorField: z.array(
    z.lazy(() => InternalServerErrorResponseImsxCodeMinorField1$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorField: "imsx_codeMinorField",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerErrorResponseImsxCodeMinor$ {
  /** @deprecated use `InternalServerErrorResponseImsxCodeMinor$inboundSchema` instead. */
  export const inboundSchema =
    InternalServerErrorResponseImsxCodeMinor$inboundSchema;
  /** @deprecated use `InternalServerErrorResponseImsxCodeMinor$outboundSchema` instead. */
  export const outboundSchema =
    InternalServerErrorResponseImsxCodeMinor$outboundSchema;
  /** @deprecated use `InternalServerErrorResponseImsxCodeMinor$Outbound` instead. */
  export type Outbound = InternalServerErrorResponseImsxCodeMinor$Outbound;
}

export function internalServerErrorResponseImsxCodeMinorToJSON(
  internalServerErrorResponseImsxCodeMinor:
    InternalServerErrorResponseImsxCodeMinor,
): string {
  return JSON.stringify(
    InternalServerErrorResponseImsxCodeMinor$outboundSchema.parse(
      internalServerErrorResponseImsxCodeMinor,
    ),
  );
}

export function internalServerErrorResponseImsxCodeMinorFromJSON(
  jsonString: string,
): SafeParseResult<
  InternalServerErrorResponseImsxCodeMinor,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InternalServerErrorResponseImsxCodeMinor$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InternalServerErrorResponseImsxCodeMinor' from JSON`,
  );
}

/** @internal */
export const InternalServerErrorResponse1$inboundSchema: z.ZodType<
  InternalServerErrorResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure"),
  imsx_severity: z.literal("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() =>
    InternalServerErrorResponseImsxCodeMinor$inboundSchema
  ),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new InternalServerErrorResponse1(remapped);
  });

/** @internal */
export type InternalServerErrorResponse1$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: InternalServerErrorResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const InternalServerErrorResponse1$outboundSchema: z.ZodType<
  InternalServerErrorResponse1$Outbound,
  z.ZodTypeDef,
  InternalServerErrorResponse1
> = z.instanceof(InternalServerErrorResponse1)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        InternalServerErrorResponseImsxCodeMinor$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerErrorResponse1$ {
  /** @deprecated use `InternalServerErrorResponse1$inboundSchema` instead. */
  export const inboundSchema = InternalServerErrorResponse1$inboundSchema;
  /** @deprecated use `InternalServerErrorResponse1$outboundSchema` instead. */
  export const outboundSchema = InternalServerErrorResponse1$outboundSchema;
  /** @deprecated use `InternalServerErrorResponse1$Outbound` instead. */
  export type Outbound = InternalServerErrorResponse1$Outbound;
}

/** @internal */
export const InternalServerErrorResponse2$inboundSchema: z.ZodType<
  InternalServerErrorResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure"),
  imsx_severity: z.literal("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() =>
    InternalServerErrorResponseImsxCodeMinor$inboundSchema
  ),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new InternalServerErrorResponse2(remapped);
  });

/** @internal */
export type InternalServerErrorResponse2$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: InternalServerErrorResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const InternalServerErrorResponse2$outboundSchema: z.ZodType<
  InternalServerErrorResponse2$Outbound,
  z.ZodTypeDef,
  InternalServerErrorResponse2
> = z.instanceof(InternalServerErrorResponse2)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        InternalServerErrorResponseImsxCodeMinor$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalServerErrorResponse2$ {
  /** @deprecated use `InternalServerErrorResponse2$inboundSchema` instead. */
  export const inboundSchema = InternalServerErrorResponse2$inboundSchema;
  /** @deprecated use `InternalServerErrorResponse2$outboundSchema` instead. */
  export const outboundSchema = InternalServerErrorResponse2$outboundSchema;
  /** @deprecated use `InternalServerErrorResponse2$Outbound` instead. */
  export type Outbound = InternalServerErrorResponse2$Outbound;
}
