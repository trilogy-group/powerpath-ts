/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { PowerPathError } from "./powerpatherror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UnprocessableEntityResponseImsxCodeMinorField = {
  imsxCodeMinorFieldName?: "TargetEndSystem" | undefined;
  imsxCodeMinorFieldValue?: "invaliddata" | undefined;
};

export type UnprocessableEntityResponseImsxCodeMinor = {
  imsxCodeMinorField: Array<UnprocessableEntityResponseImsxCodeMinorField>;
};

export type UnprocessableEntityResponseErrorData = {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnprocessableEntityResponseImsxCodeMinor;
};

export class UnprocessableEntityResponseError extends PowerPathError {
  imsxCodeMajor: "failure";
  imsxSeverity: "error";
  imsxDescription: string;
  imsxCodeMinor: UnprocessableEntityResponseImsxCodeMinor;

  /** The original data that was passed to this error instance. */
  data$: UnprocessableEntityResponseErrorData;

  constructor(
    err: UnprocessableEntityResponseErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.imsxCodeMajor = err.imsxCodeMajor;
    this.imsxSeverity = err.imsxSeverity;
    this.imsxDescription = err.imsxDescription;
    this.imsxCodeMinor = err.imsxCodeMinor;

    this.name = "UnprocessableEntityResponseError";
  }
}

/** @internal */
export const UnprocessableEntityResponseImsxCodeMinorField$inboundSchema:
  z.ZodType<
    UnprocessableEntityResponseImsxCodeMinorField,
    z.ZodTypeDef,
    unknown
  > = z.object({
    imsx_codeMinorFieldName: z.literal("TargetEndSystem").default(
      "TargetEndSystem",
    ).optional(),
    imsx_codeMinorFieldValue: z.literal("invaliddata").default("invaliddata")
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "imsx_codeMinorFieldName": "imsxCodeMinorFieldName",
      "imsx_codeMinorFieldValue": "imsxCodeMinorFieldValue",
    });
  });

/** @internal */
export type UnprocessableEntityResponseImsxCodeMinorField$Outbound = {
  imsx_codeMinorFieldName: "TargetEndSystem";
  imsx_codeMinorFieldValue: "invaliddata";
};

/** @internal */
export const UnprocessableEntityResponseImsxCodeMinorField$outboundSchema:
  z.ZodType<
    UnprocessableEntityResponseImsxCodeMinorField$Outbound,
    z.ZodTypeDef,
    UnprocessableEntityResponseImsxCodeMinorField
  > = z.object({
    imsxCodeMinorFieldName: z.literal("TargetEndSystem").default(
      "TargetEndSystem" as const,
    ),
    imsxCodeMinorFieldValue: z.literal("invaliddata").default(
      "invaliddata" as const,
    ),
  }).transform((v) => {
    return remap$(v, {
      imsxCodeMinorFieldName: "imsx_codeMinorFieldName",
      imsxCodeMinorFieldValue: "imsx_codeMinorFieldValue",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityResponseImsxCodeMinorField$ {
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinorField$inboundSchema` instead. */
  export const inboundSchema =
    UnprocessableEntityResponseImsxCodeMinorField$inboundSchema;
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinorField$outboundSchema` instead. */
  export const outboundSchema =
    UnprocessableEntityResponseImsxCodeMinorField$outboundSchema;
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinorField$Outbound` instead. */
  export type Outbound = UnprocessableEntityResponseImsxCodeMinorField$Outbound;
}

export function unprocessableEntityResponseImsxCodeMinorFieldToJSON(
  unprocessableEntityResponseImsxCodeMinorField:
    UnprocessableEntityResponseImsxCodeMinorField,
): string {
  return JSON.stringify(
    UnprocessableEntityResponseImsxCodeMinorField$outboundSchema.parse(
      unprocessableEntityResponseImsxCodeMinorField,
    ),
  );
}

export function unprocessableEntityResponseImsxCodeMinorFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  UnprocessableEntityResponseImsxCodeMinorField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnprocessableEntityResponseImsxCodeMinorField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnprocessableEntityResponseImsxCodeMinorField' from JSON`,
  );
}

/** @internal */
export const UnprocessableEntityResponseImsxCodeMinor$inboundSchema: z.ZodType<
  UnprocessableEntityResponseImsxCodeMinor,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMinorField: z.array(
    z.lazy(() => UnprocessableEntityResponseImsxCodeMinorField$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "imsx_codeMinorField": "imsxCodeMinorField",
  });
});

/** @internal */
export type UnprocessableEntityResponseImsxCodeMinor$Outbound = {
  imsx_codeMinorField: Array<
    UnprocessableEntityResponseImsxCodeMinorField$Outbound
  >;
};

/** @internal */
export const UnprocessableEntityResponseImsxCodeMinor$outboundSchema: z.ZodType<
  UnprocessableEntityResponseImsxCodeMinor$Outbound,
  z.ZodTypeDef,
  UnprocessableEntityResponseImsxCodeMinor
> = z.object({
  imsxCodeMinorField: z.array(
    z.lazy(() => UnprocessableEntityResponseImsxCodeMinorField$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    imsxCodeMinorField: "imsx_codeMinorField",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityResponseImsxCodeMinor$ {
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinor$inboundSchema` instead. */
  export const inboundSchema =
    UnprocessableEntityResponseImsxCodeMinor$inboundSchema;
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinor$outboundSchema` instead. */
  export const outboundSchema =
    UnprocessableEntityResponseImsxCodeMinor$outboundSchema;
  /** @deprecated use `UnprocessableEntityResponseImsxCodeMinor$Outbound` instead. */
  export type Outbound = UnprocessableEntityResponseImsxCodeMinor$Outbound;
}

export function unprocessableEntityResponseImsxCodeMinorToJSON(
  unprocessableEntityResponseImsxCodeMinor:
    UnprocessableEntityResponseImsxCodeMinor,
): string {
  return JSON.stringify(
    UnprocessableEntityResponseImsxCodeMinor$outboundSchema.parse(
      unprocessableEntityResponseImsxCodeMinor,
    ),
  );
}

export function unprocessableEntityResponseImsxCodeMinorFromJSON(
  jsonString: string,
): SafeParseResult<
  UnprocessableEntityResponseImsxCodeMinor,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnprocessableEntityResponseImsxCodeMinor$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnprocessableEntityResponseImsxCodeMinor' from JSON`,
  );
}

/** @internal */
export const UnprocessableEntityResponseError$inboundSchema: z.ZodType<
  UnprocessableEntityResponseError,
  z.ZodTypeDef,
  unknown
> = z.object({
  imsx_codeMajor: z.literal("failure").default("failure"),
  imsx_severity: z.literal("error").default("error"),
  imsx_description: z.string(),
  imsx_CodeMinor: z.lazy(() =>
    UnprocessableEntityResponseImsxCodeMinor$inboundSchema
  ),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "imsx_codeMajor": "imsxCodeMajor",
      "imsx_severity": "imsxSeverity",
      "imsx_description": "imsxDescription",
      "imsx_CodeMinor": "imsxCodeMinor",
    });

    return new UnprocessableEntityResponseError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UnprocessableEntityResponseError$Outbound = {
  imsx_codeMajor: "failure";
  imsx_severity: "error";
  imsx_description: string;
  imsx_CodeMinor: UnprocessableEntityResponseImsxCodeMinor$Outbound;
};

/** @internal */
export const UnprocessableEntityResponseError$outboundSchema: z.ZodType<
  UnprocessableEntityResponseError$Outbound,
  z.ZodTypeDef,
  UnprocessableEntityResponseError
> = z.instanceof(UnprocessableEntityResponseError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      imsxCodeMajor: z.literal("failure").default("failure" as const),
      imsxSeverity: z.literal("error").default("error" as const),
      imsxDescription: z.string(),
      imsxCodeMinor: z.lazy(() =>
        UnprocessableEntityResponseImsxCodeMinor$outboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        imsxCodeMajor: "imsx_codeMajor",
        imsxSeverity: "imsx_severity",
        imsxDescription: "imsx_description",
        imsxCodeMinor: "imsx_CodeMinor",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityResponseError$ {
  /** @deprecated use `UnprocessableEntityResponseError$inboundSchema` instead. */
  export const inboundSchema = UnprocessableEntityResponseError$inboundSchema;
  /** @deprecated use `UnprocessableEntityResponseError$outboundSchema` instead. */
  export const outboundSchema = UnprocessableEntityResponseError$outboundSchema;
  /** @deprecated use `UnprocessableEntityResponseError$Outbound` instead. */
  export type Outbound = UnprocessableEntityResponseError$Outbound;
}
