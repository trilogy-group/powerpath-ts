/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PowerPathCore } from "../core.js";
import { encodeJSON } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Update student question response
 *
 * @remarks
 * Updates the student's response to a question and returns the updated PowerPath score.
 *
 * PowerPath will check the correctness of the response using the QTI question `<qti-response-declaration>` element and update the score accordingly.
 *
 * PowerPath will create/update the required AssessmentLineItem and AssessmentResult objects for the student/question pair if it doesn't exist yet.
 */
export function lessonsUpdateStudentResponse(
  client: PowerPathCore,
  request?: components.UpdateStudentQuestionResponseInput | undefined,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.UpdateStudentQuestionResponseResponse,
    | errors.BadRequestResponseError
    | errors.UnauthorizedRequestResponseError2
    | errors.ForbiddenResponseError1
    | errors.NotFoundResponseError1
    | errors.UnprocessableEntityResponseError1
    | errors.TooManyRequestsResponseError1
    | errors.InternalServerErrorResponse2
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: PowerPathCore,
  request?: components.UpdateStudentQuestionResponseInput | undefined,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.UpdateStudentQuestionResponseResponse,
      | errors.BadRequestResponseError
      | errors.UnauthorizedRequestResponseError2
      | errors.ForbiddenResponseError1
      | errors.NotFoundResponseError1
      | errors.UnprocessableEntityResponseError1
      | errors.TooManyRequestsResponseError1
      | errors.InternalServerErrorResponse2
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      components.UpdateStudentQuestionResponseInput$outboundSchema.optional()
        .parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = payload === undefined
    ? null
    : encodeJSON("body", payload, { explode: true });

  const path = pathToFunc("/powerpath/updateStudentQuestionResponse")();

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "updateStudentQuestionResponse",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PUT",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "422", "429", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.UpdateStudentQuestionResponseResponse,
    | errors.BadRequestResponseError
    | errors.UnauthorizedRequestResponseError2
    | errors.ForbiddenResponseError1
    | errors.NotFoundResponseError1
    | errors.UnprocessableEntityResponseError1
    | errors.TooManyRequestsResponseError1
    | errors.InternalServerErrorResponse2
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.UpdateStudentQuestionResponseResponse$inboundSchema),
    M.jsonErr(400, errors.BadRequestResponseError$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedRequestResponseError2$inboundSchema),
    M.jsonErr(403, errors.ForbiddenResponseError1$inboundSchema),
    M.jsonErr(404, errors.NotFoundResponseError1$inboundSchema),
    M.jsonErr(422, errors.UnprocessableEntityResponseError1$inboundSchema),
    M.jsonErr(429, errors.TooManyRequestsResponseError1$inboundSchema),
    M.jsonErr(500, errors.InternalServerErrorResponse2$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
