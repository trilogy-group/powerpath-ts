/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { powerPathCourseMasteryMakeExternalTestAssignment } from "../../funcs/powerPathCourseMasteryMakeExternalTestAssignment.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.MakeExternalTestAssignmentRequest$inboundSchema
    .optional(),
};

export const tool$powerPathCourseMasteryMakeExternalTestAssignment:
  ToolDefinition<typeof args> = {
    name: "power-path-course-mastery-make-external-test-assignment",
    description: `Make external test assignment

Makes an external test assignment for the given student:
- Applies to both 'test-out' and 'placement' lessons.

This logic changes depending on the provided "toolProvider" value:
- For "edulastic" (currently the only one supported):

  - Authenticates the student with their email on Edulastic
  - Assigns the test to the student in Edulastic
  - Stores the received "assignmentId" and "classId" in the lesson's AssessmentResult
  - Returns the test link, credentials, and IDs of the test for later results consumption

Will fail if:
- The lesson is not an external "test-out" or "placement", or the student does not exist
- External tool (described in the resource.metadata.toolProvider) is not "edulastic"
- Any other problem on the Edulastic API being used that may happen

A 'Lesson' in this context is a ComponentResource object which has a Resource object with lessonType = "test-out" or "placement" associated with it.
`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await powerPathCourseMasteryMakeExternalTestAssignment(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
