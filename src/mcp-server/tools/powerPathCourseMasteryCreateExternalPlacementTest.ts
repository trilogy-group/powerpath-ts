/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { powerPathCourseMasteryCreateExternalPlacementTest } from "../../funcs/powerPathCourseMasteryCreateExternalPlacementTest.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CreateExternalPlacementTestRequest$inboundSchema
    .optional(),
};

export const tool$powerPathCourseMasteryCreateExternalPlacementTest:
  ToolDefinition<typeof args> = {
    name: "power-path-course-mastery-create-external-placement-test",
    description: `Create an External Placement Test

Creates or updates a ComponentResource to act as a Placement Test lesson in a course.
This allows integrating with external test-taking platforms (like Edulastic) for content delivery.

The endpoint creates or updates (if they already exist) the following entities:
- A CourseComponent for the course to hold the Placement Test lesson
- A Resource with lessonType = "placement" and the external service details as metadata
- A ComponentResource acting as the Placement Test lesson

A test assignment is mandatory in order to obtain access credentials for this test on the external platform, as well as to obtain the IDs necessary for fetching test results later on:
- For test assignments, use the "makeExternalTestAssignment" endpoint.
- For test results retrieval, use the "importExternalTestAssignmentResults" endpoint.

If a 'courseIdOnFail' parameter is supplied, its Course's sourcedId will be used to automatically enroll the student when the placement test is completed with a score below 90 %. When the parameter is omitted (or set to null), no automatic enrollment will happen.

This request fails if:
- The 'course' provided does not exist, or a non-null 'courseIdOnFail' references a non-existent course
- An existing Placement Test lesson in the course, targeting the same grade, has a different toolProvider than the one provided (need to perform an update to the Resource first, altering the "toolProvider", before trying again)

A 'Lesson' in this context is a ComponentResource object which has a Resource object with lessonType = "placement" associated with it.
`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await powerPathCourseMasteryCreateExternalPlacementTest(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
