/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { lessonsCreateAttempt } from "../funcs/lessonsCreateAttempt.js";
import { lessonsFinalizeResponse } from "../funcs/lessonsFinalizeResponse.js";
import { lessonsGetAttempts } from "../funcs/lessonsGetAttempts.js";
import { lessonsGetNextQuestion } from "../funcs/lessonsGetNextQuestion.js";
import { lessonsGetProgress } from "../funcs/lessonsGetProgress.js";
import { lessonsResetAttempt } from "../funcs/lessonsResetAttempt.js";
import { lessonsUpdateStudentResponse } from "../funcs/lessonsUpdateStudentResponse.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Lessons extends ClientSDK {
  /**
   * Create new attempt
   *
   * @remarks
   * Creates a new attempt for a student in a lesson if current attempt is completed
   */
  async createAttempt(
    request?: operations.CreateNewAttemptRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateNewAttemptResponse> {
    return unwrapAsync(lessonsCreateAttempt(
      this,
      request,
      options,
    ));
  }

  /**
   * Finalize a quiz assessment
   *
   * @remarks
   * Finalize a lesson/assessment of 'quiz' type after all questions have been answered.
   *
   * Evaluates answered questions, attribute scores for each question, and overall lesson score.
   *
   * PowerPath will check the correctness of the response using the QTI question `<qti-response-declaration>` element and update the score accordingly.
   *
   * PowerPath will create/update the required AssessmentLineItem and AssessmentResult objects for the student/question pair if it doesn't exist yet.
   *
   * Returns the final assessment result for the student.
   */
  async finalizeResponse(
    request?: operations.FinalStudentAssessmentResponseRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.FinalStudentAssessmentResponseResponse> {
    return unwrapAsync(lessonsFinalizeResponse(
      this,
      request,
      options,
    ));
  }

  /**
   * Get assessment progress
   *
   * @remarks
   * Returns the progress the student has made in the given PowerPath lesson
   */
  async getProgress(
    request: operations.GetAssessmentProgressRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAssessmentProgressResponse> {
    return unwrapAsync(lessonsGetProgress(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all attempts
   *
   * @remarks
   * Returns a list of all attempts for a student in a lesson
   */
  async getAttempts(
    request: operations.GetAttemptsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAttemptsResponse> {
    return unwrapAsync(lessonsGetAttempts(
      this,
      request,
      options,
    ));
  }

  /**
   * Get next question
   *
   * @remarks
   * Returns the next question in the given PowerPath lesson
   */
  async getNextQuestion(
    request: operations.GetNextQuestionRequest,
    options?: RequestOptions,
  ): Promise<operations.GetNextQuestionResponse> {
    return unwrapAsync(lessonsGetNextQuestion(
      this,
      request,
      options,
    ));
  }

  /**
   * Reset attempt
   *
   * @remarks
   * Resets the attempt for the given PowerPath lesson of a student, removing all previous responses and resetting the score to 0
   */
  async resetAttempt(
    request?: operations.ResetAttemptRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ResetAttemptResponse> {
    return unwrapAsync(lessonsResetAttempt(
      this,
      request,
      options,
    ));
  }

  /**
   * Update student question response
   *
   * @remarks
   * Updates the student's response to a question and returns the updated PowerPath score.
   *
   * PowerPath will check the correctness of the response using the QTI question `<qti-response-declaration>` element and update the score accordingly.
   *
   * PowerPath will create/update the required AssessmentLineItem and AssessmentResult objects for the student/question pair if it doesn't exist yet.
   */
  async updateStudentResponse(
    request?: components.UpdateStudentQuestionResponseInput | undefined,
    options?: RequestOptions,
  ): Promise<operations.UpdateStudentQuestionResponseResponse> {
    return unwrapAsync(lessonsUpdateStudentResponse(
      this,
      request,
      options,
    ));
  }
}
