/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { powerPathLessonPlansAttachComponent } from "../funcs/powerPathLessonPlansAttachComponent.js";
import { powerPathLessonPlansAttachResource } from "../funcs/powerPathLessonPlansAttachResource.js";
import { powerPathLessonPlansCreateLessonPlan } from "../funcs/powerPathLessonPlansCreateLessonPlan.js";
import { powerPathLessonPlansDeleteLessonPlan } from "../funcs/powerPathLessonPlansDeleteLessonPlan.js";
import { powerPathLessonPlansDeleteLessonPlanItem } from "../funcs/powerPathLessonPlansDeleteLessonPlanItem.js";
import { powerPathLessonPlansGetTree } from "../funcs/powerPathLessonPlansGetTree.js";
import { powerPathLessonPlansUpdateLessonPlanItem } from "../funcs/powerPathLessonPlansUpdateLessonPlanItem.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PowerPathLessonPlans extends ClientSDK {
  /**
   * Create a lesson plan
   *
   * @remarks
   *
   *     Creates a new lesson plan for a course and student.
   *
   *     The lesson plan is created by specifying a course sourced ID and a student sourced ID and, optionally, a class sourced ID.
   *     The student must be enrolled in the class to create a lesson plan for them.
   *
   *     If no class sourced ID is provided, the course's default class will be used if available.
   */
  async createLessonPlan(
    request?: operations.CreateLessonPlanRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateLessonPlanResponse> {
    return unwrapAsync(powerPathLessonPlansCreateLessonPlan(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the lesson plan tree for a course and student
   *
   * @remarks
   *
   *     Given a course sourced ID and a user sourced ID, returns the lesson plan tree.
   *
   *     The lesson plan tree is nested object comprised of several lessonPlanItems,
   *     which are nodes that contain information about the lesson plan - including which component or component resource is associated with that node,
   *     as well as which node is its parent.
   *
   *     A node may reference a component or a componentResource.
   *     A node with no parent is considered at the root level of the lesson plan tree.
   *
   *     A student's lesson plan has a unique ID that can be used instead of the parameters to retrieve it.
   */
  async getTree(
    request: operations.GetTreeRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTreeResponse> {
    return unwrapAsync(powerPathLessonPlansGetTree(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a lesson plan
   *
   * @remarks
   *
   *     Deletes a lesson plan by its ID.
   *     This will delete the lesson plan and all of its associated lesson plan items.
   */
  async deleteLessonPlan(
    request: operations.DeleteLessonPlanRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(powerPathLessonPlansDeleteLessonPlan(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a lesson plan item to attach a component to a lesson plan
   *
   * @remarks
   *
   *     Creates a lessonPlanItem of type "component" and attaches it to lesson plan with the given ID.
   *     The lessonPlanItem *must* reference a course component for the course associated with the lesson plan.
   *     The parent lessonPlanItem, if any, must be of type "component" as well.
   */
  async attachComponent(
    request: operations.AttachComponentRequest,
    options?: RequestOptions,
  ): Promise<operations.AttachComponentResponse> {
    return unwrapAsync(powerPathLessonPlansAttachComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a lesson plan item to attach a resource to a lesson plan
   *
   * @remarks
   *
   *     Creates a lessonPlanItem of type "resource" and attaches it to lesson plan with the given ID.
   *     The lessonPlanItem *must* reference a course component resource for the course associated with the lesson plan.
   *
   *     The parent lessonPlanItem, if any, must be of type "component".
   */
  async attachResource(
    request: operations.AttachResourceRequest,
    options?: RequestOptions,
  ): Promise<operations.AttachResourceResponse> {
    return unwrapAsync(powerPathLessonPlansAttachResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a lesson plan item
   *
   * @remarks
   *
   *     Updates a lesson plan item by its ID.
   *
   *     While many parameters of a lesson plan item can be updated,
   *     the main use case for this feature is to re-parent a lesson plan item.
   */
  async updateLessonPlanItem(
    request: operations.UpdateLessonPlanItemRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(powerPathLessonPlansUpdateLessonPlanItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a lesson plan item
   *
   * @remarks
   *
   *     Deletes a lesson plan item by its ID.
   *
   *     This will delete the lesson plan item and all of its associated lesson plan items.
   *     WARNING: This operation is irreversible.
   */
  async deleteLessonPlanItem(
    request: operations.DeleteLessonPlanItemRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(powerPathLessonPlansDeleteLessonPlanItem(
      this,
      request,
      options,
    ));
  }
}
